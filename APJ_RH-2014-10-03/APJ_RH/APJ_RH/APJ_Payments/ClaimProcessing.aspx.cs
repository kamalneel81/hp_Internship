using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Data;
using System.Data.SqlClient;
using System.Data.OracleClient;
using System.Configuration;
using Microsoft.VisualBasic;
using System.Diagnostics;
using Excel = Microsoft.Office.Interop.Excel;
using System.Drawing;
using System.Web.Security;
using System.Xml.Linq;
using System.Text;
using CodeEngine.Framework.QueryBuilder;
using CodeEngine.Framework.QueryBuilder.Enums;

//using outlook = Microsoft.Office.Interop.Outlook;
using Aspose.Email;
using Aspose.Email.Mail;
using Aspose.Email.Outlook;
using System.Net.Mail;
using System.Net.Mime;
//using NonComp;
using System.IO;
using System.Data.Common;

namespace APJ_RH.APJ_Payments
{
   
    public partial class ClaimProcessing : System.Web.UI.Page
    {
        
        
        RHcls rh = new RHcls();
        protected void Page_Load(object sender, EventArgs e)
        {
            //Label masterLbl = (Label)Master.FindControl("Label1");
            String ntName=(String)Session["GlobalName"];            
            Master.MasterPageLabel="Logged in as: ";
            Master.MasterPageLabel1 = ntName;
            ScriptManager scriptManager = ScriptManager.GetCurrent(this.Page);
            scriptManager.RegisterPostBackControl(this.ExportToExcelBtn);
            scriptManager.RegisterPostBackControl(this.GenerateSplitPaymentBtn);
            scriptManager.RegisterPostBackControl(this.GenerateInvoiceFileBtn);
            scriptManager.RegisterPostBackControl(this.GenerateFirstP1UploadFileBtn);
            scriptManager.RegisterPostBackControl(this.GenerateFilesBtn);
            scriptManager.RegisterPostBackControl(this.GenerateCloseLoopFileBtn);
            scriptManager.RegisterPostBackControl(this.GenerateMailToWWASBtn);
            
           
        
     
            if (!IsPostBack)
            {
                SqlCommand cmd = new SqlCommand("select distinct COUNTRY_CODE from APACPPP_USER.COMPANY_CODE_MASTER_APACPPP;");
                //DataTable dt = rh.getData("select distinct COUNTRY_CODE from APACPPP_USER.COMPANY_CODE_MASTER_APACPPP;");
                DataTable dt = rh.getData11(cmd); 
                SelectCountryCodeList.DataSource = dt;
                SelectCountryCodeList.DataTextField = "COUNTRY_CODE";
                SelectCountryCodeList.DataValueField = "COUNTRY_CODE";
                SelectCountryCodeList.DataBind();
                SelectCountryCodeList.Items.Insert(0, "Select the Country Code");

                

                
             
               
            }

            
       }


        protected void SelectTeamList_SelectedIndexChanged(object sender, EventArgs e)
        {
            
            SelectProgramList.DataSource = "";
            SelectProgramList.DataBind();
            if (SelectTeamList.SelectedValue == "CI Payments")
            {
                SqlCommand cmd = new SqlCommand("SELECT DISTINCT PROGRAM FROM PAYMENT_MASTER WHERE (Team_Name = 'CI Payments') AND (COUNTRY_CODE = '" + SelectCountryCodeList.Text + "')");
                //DataTable dt1 = rh.getData("SELECT DISTINCT PROGRAM FROM PAYMENT_MASTER WHERE (Team_Name = 'CI Payments') AND (COUNTRY_CODE = '" + SelectCountryCodeList.Text + "')");
                DataTable dt1 = rh.getData11(cmd); 
                SelectProgramList.DataSource = dt1;
                SelectProgramList.DataTextField = "PROGRAM";
                SelectProgramList.DataValueField = "PROGRAM";
                SelectProgramList.DataBind();
            }
            SelectProgramList.Items.Insert(0, "Select the Program Name");
        }
        
        
        protected void SelectCountryCodeList_SelectedIndexChanged(object sender, EventArgs e)
        
        {
            
            SelectProgramList.DataSource = "";
            SelectProgramList.DataBind();
            if (SelectTeamList.SelectedValue == "CI Payments")
            {
                SqlCommand cmd = new SqlCommand("SELECT DISTINCT PROGRAM FROM PAYMENT_MASTER WHERE (Team_Name = 'CI Payments') AND (COUNTRY_CODE = '" + SelectCountryCodeList.Text + "')");  
                //DataTable dt1 = rh.getData("SELECT DISTINCT PROGRAM FROM PAYMENT_MASTER WHERE (Team_Name = 'CI Payments') AND (COUNTRY_CODE = '" + SelectCountryCodeList.Text + "')");
                DataTable dt1 = rh.getData11(cmd); 
                SelectProgramList.DataSource = dt1;
                SelectProgramList.DataTextField = "PROGRAM";
                SelectProgramList.DataValueField = "PROGRAM";
                SelectProgramList.DataBind();
            }
            SelectProgramList.Items.Insert(0, "Select the Program Name");
        }

        string Condstr = " 1=1";
        
       
        protected void Pending_Click(object sender, EventArgs e)
            
        {
            
            //CommentsList.Items.Clear();

            if (SelectTeamList.Text != "")
            {
                if (SelectTeamList.Text == "Select the Team Name")
                {
                    Condstr = " 1=1";
                }
                else
                {


                    Condstr = Condstr + "AND Team_Name = '" + SelectTeamList.Text + "'";
                }
            
            }
            
           if (SelectProgramList.Text != "Select the Program Name")
               
                {
                    Condstr = Condstr + " AND Program = '" + SelectProgramList.Text + "'";
                }


           if (SelectCountryCodeList.Text != "Select the Country Code")
            {
                Condstr = Condstr + " AND COUNTRY_CODE = '" + SelectCountryCodeList.Text + "'";
            }

           if (SelectPaymentModeList.Text != "Select the Payment Mode")
            {
                Condstr = Condstr + " AND PAYMENT_MODE = '" + SelectPaymentModeList.Text + "'";
            }

            //string strQuery = "";
            //string strQuery1 = "";
            GenerateFirstP1UploadFileBtn.Visible = false;
            ExportToExcelBtn.Visible = false;
            UploadTransactionIdFileBtn.Visible = false;
            CloseToBeSentToAPJStatusBtn.Visible = false;
            GenerateCloseLoopFileBtn.Visible = false;
            AllStatusClosedBtn.Visible = false;
            ClosePaymentAllStatusBtn.Visible = false;
            UploadSplitPaymentFileBtn.Visible = false;
            CloseSplitPaymentStatusBtn.Visible = false;
            GenerateSplitPaymentBtn.Visible = false;
            GenerateInvoiceFileBtn.Visible = false;
            CloseInvoiceStatusBtn.Visible = false;
            UploadInvoiceFileBtn.Visible = false;
            CloseVendorIdStatusBtn.Visible = false;
            CloseSuspectStatusBtn.Visible = false;
            CloseValidationStatusBtn.Visible = false;
            GenerateMailToWWASBtn.Visible = false;
            UpdateNewWWASManagerBtn.Visible = false;
            OpenHoldPaymentStatusBtn.Visible = false;
            OpenPaymentStatusBtn.Visible = false;
            GenerateFilesList.Visible = false;
            GenerateFilesBtn.Visible = false;
            CloseVendorIdMismatchStatusBtn.Visible = false;
            CloseWaitingForAPJStatusBtn.Visible = false;
            UploadCreditNoteFileBtn.Visible = false;
            GenerateCloseLoopFilesList.Visible = false;
            CloseWWASStatusBtn.Visible = false;
            ProcessingCommentsBtn.Visible = false;
            ThresholdApprovalStatusBtn.Visible = false;
            GridTable.Visible = true; 
            
            if (SelectStatusList.Text == "Suspect Status")
            {
                CloseSuspectStatusBtn.Visible = true;
                ExportToExcelBtn.Visible = true;
                //strQuery = "Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE (SUSPECTS_STATUS = 'O') AND (ALL_STATUS = 'O') and " + Condstr + " ORDER BY REF_NO ";

                SqlCommand cmd = new SqlCommand("Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE (SUSPECTS_STATUS = 'O') AND (ALL_STATUS = 'O') and " + Condstr + " ORDER BY REF_NO ");
                DataTable PPdt = new DataTable();
                //PPdt = rh.getData(strQuery);
                PPdt = rh.getData11(cmd); 
                Session["PPdt"] = PPdt;
                //binddata(strQuery, gvSuspectStatus);
                binddata1(cmd, gvSuspectStatus);
            }
            else if (SelectStatusList.Text == "To be Sent To C Ops - Split Payments")
            {
                GenerateSplitPaymentBtn.Visible = true;
                CloseSplitPaymentStatusBtn.Visible = true;   
                ExportToExcelBtn.Visible = true;

                //strQuery = "Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE (SPLIT_PAYMENT_SENT_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (ALL_STATUS = 'O') and " + Condstr + " ORDER BY REF_NO ";
                SqlCommand cmd = new SqlCommand("Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE (SPLIT_PAYMENT_SENT_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (ALL_STATUS = 'O') and " + Condstr + " ORDER BY REF_NO ");
                DataTable TSPdt = new DataTable();
                //TSPdt = rh.getData(strQuery);
                TSPdt = rh.getData11(cmd);
                Session["TSPdt"] = TSPdt;
                //binddata(strQuery, gvSuspectStatus);
                binddata1(cmd, gvSuspectStatus);
            }

            else if (SelectStatusList.Text == "Waiting For C Ops - Split Payments")
            {
                CloseSplitPaymentStatusBtn.Visible = true;
                UploadSplitPaymentFileBtn.Visible = true;
                ExportToExcelBtn.Visible = true;

                //strQuery = "Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE  (SPLIT_PAYMENT_SENT_STATUS = 'C')    and  (SPLIT_PAYMENT_RECD_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (ALL_STATUS = 'O') and " + Condstr + " ORDER BY REF_NO ";
                SqlCommand cmd = new SqlCommand("Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE  (SPLIT_PAYMENT_SENT_STATUS = 'C')    and  (SPLIT_PAYMENT_RECD_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (ALL_STATUS = 'O') and " + Condstr + " ORDER BY REF_NO ");
                DataTable WSPdt = new DataTable();
                //WSPdt = rh.getData(strQuery);
                WSPdt = rh.getData11(cmd);
                Session["WSPdt"] = WSPdt;

                //binddata(strQuery, gvSuspectStatus);
                binddata1(cmd, gvSuspectStatus);
            }


            else if (SelectStatusList.Text == "To Be Sent To Local Outsource - Invoice Collection")
            {
                GenerateInvoiceFileBtn.Visible = true;
                CloseInvoiceStatusBtn.Visible = true;
                ExportToExcelBtn.Visible = true;

                //strQuery = "Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE  (SPLIT_PAYMENT_SENT_STATUS = 'C')    and  (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (ALL_STATUS = 'O') and " + Condstr + " ORDER BY REF_NO ";
                SqlCommand cmd = new SqlCommand("Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE  (SPLIT_PAYMENT_SENT_STATUS = 'C')    and  (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (ALL_STATUS = 'O') and " + Condstr + " ORDER BY REF_NO ");
                DataTable TICdt = new DataTable();
                //TICdt = rh.getData(strQuery);
                TICdt = rh.getData11(cmd);
                Session["TICdt"] = TICdt;
                //binddata(strQuery, gvSuspectStatus);
                binddata1(cmd, gvSuspectStatus);
           }
            else if (SelectStatusList.Text == "Waiting For Local Outsource  - Invoice Collection")
            {
                UploadInvoiceFileBtn.Visible = true;
                CloseInvoiceStatusBtn.Visible = true;
                ExportToExcelBtn.Visible = true;

                //strQuery = "Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE  (SPLIT_PAYMENT_SENT_STATUS = 'C')    and  (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'O') AND(ON_CHAPP_STATUS = 'Y') AND (ALL_STATUS = 'O') and " + Condstr + " ORDER BY REF_NO ";
                SqlCommand cmd = new SqlCommand("Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE  (SPLIT_PAYMENT_SENT_STATUS = 'C')    and  (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'O') AND(ON_CHAPP_STATUS = 'Y') AND (ALL_STATUS = 'O') and " + Condstr + " ORDER BY REF_NO ");
                DataTable WICdt = new DataTable();
                //WICdt = rh.getData(strQuery);
                WICdt = rh.getData11(cmd);
                Session["WICdt"] = WICdt;
                //binddata(strQuery, gvSuspectStatus);
                binddata1(cmd, gvSuspectStatus);
            }
            else if (SelectStatusList.Text == "To Be Uploaded To Platform One")
            {
                GenerateFirstP1UploadFileBtn.Visible = true;
                ExportToExcelBtn.Visible = true;

                //strQuery = "Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE SPLIT_PAYMENT_SENT_STATUS = 'C' AND SPLIT_PAYMENT_RECD_STATUS = 'C' AND SENT_LOS_STATUS = 'C' AND RECD_LOS_STATUS = 'C'AND ON_CHAPP_STATUS = 'Y'AND FIRST_UPLOAD_P1_STATUS = 'O'AND (ALL_STATUS = 'O') and " + Condstr + " ORDER BY REF_NO ";
                SqlCommand cmd = new SqlCommand("Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE SPLIT_PAYMENT_SENT_STATUS = 'C' AND SPLIT_PAYMENT_RECD_STATUS = 'C' AND SENT_LOS_STATUS = 'C' AND RECD_LOS_STATUS = 'C'AND ON_CHAPP_STATUS = 'Y'AND FIRST_UPLOAD_P1_STATUS = 'O'AND (ALL_STATUS = 'O') and " + Condstr + " ORDER BY REF_NO ");
                DataTable TP1dt = new DataTable();
                //TP1dt = rh.getData(strQuery);
                TP1dt = rh.getData11(cmd);
                Session["TP1dt"] = TP1dt;
                //binddata(strQuery, gvSuspectStatus);
                binddata1(cmd, gvSuspectStatus);
            }

            else if (SelectStatusList.Text == "Waiting For Transaction Id")
            {
                UploadTransactionIdFileBtn.Visible = true;
                ExportToExcelBtn.Visible = true;

                //strQuery = "Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE SPLIT_PAYMENT_SENT_STATUS = 'C' AND SPLIT_PAYMENT_RECD_STATUS = 'C' AND SENT_LOS_STATUS = 'C' AND RECD_LOS_STATUS = 'C'AND ON_CHAPP_STATUS = 'Y'AND FIRST_UPLOAD_P1_STATUS = 'C'AND (ALL_STATUS = 'O') AND TRANSACTION_ID IS NULL and " + Condstr + " ORDER BY REF_NO ";
                SqlCommand cmd = new SqlCommand("Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE SPLIT_PAYMENT_SENT_STATUS = 'C' AND SPLIT_PAYMENT_RECD_STATUS = 'C' AND SENT_LOS_STATUS = 'C' AND RECD_LOS_STATUS = 'C'AND ON_CHAPP_STATUS = 'Y'AND FIRST_UPLOAD_P1_STATUS = 'C'AND (ALL_STATUS = 'O') AND TRANSACTION_ID IS NULL and " + Condstr + " ORDER BY REF_NO ");
                DataTable WTIDdt = new DataTable();
                //WTIDdt = rh.getData(strQuery);
                WTIDdt = rh.getData11(cmd);
                Session["WTIDdt"] = WTIDdt;
                //binddata(strQuery, gvSuspectStatus);
                binddata1(cmd, gvSuspectStatus);
            }
            else if (SelectStatusList.Text == "WWAS Approval")
            {
                GenerateMailToWWASBtn.Visible = true;
                UpdateNewWWASManagerBtn.Visible = true;
                ExportToExcelBtn.Visible = true;
                CloseWWASStatusBtn.Visible = true;

                //strQuery = "Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE (WWAS_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (ALL_STATUS = 'O') and " + Condstr + " ORDER BY REF_NO ";
                SqlCommand cmd = new SqlCommand("Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE (WWAS_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (ALL_STATUS = 'O') and " + Condstr + " ORDER BY REF_NO ");
                DataTable WWASDdt = new DataTable();
                //WWASDdt = rh.getData(strQuery);
                WWASDdt = rh.getData11(cmd);
                Session["WWASDdt"] = WWASDdt;
                //binddata(strQuery, gvSuspectStatus);
                binddata1(cmd, gvSuspectStatus);

                //strQuery1 = "SELECT  PAYOUT_ID, PROGRAM, NULL AS[BU], COUNTRY,PARTNER_ID,PARTNER_ENG_NAME AS [PARTNER_NAME],CURR AS [CURRENCY],SUM(PAYOUT_DUE) AS PAYOUT_DUE, SUM(TOT_AMOUNT_PAYABLE) AS TOT_AMOUNT_PAYABLE,SUM(TOT_AMOUNT_PAYABLE_USD) AS [TOT_AMOUNT_PAYABLE IN USD],APPROVING_MGR,PAYMENT_MODE FROM PAYMENT_MASTER WHERE (WWAS_STATUS= 'O') AND (ALL_STATUS = 'O') and " + Condstr + " GROUP BY PAYOUT_ID, PROGRAM, COUNTRY,PARTNER_ID,PARTNER_ENG_NAME,CURR,APPROVING_MGR,PAYMENT_MODE";
                SqlCommand cmd1 = new SqlCommand("SELECT  PAYOUT_ID, PROGRAM, NULL AS[BU], COUNTRY,PARTNER_ID,PARTNER_ENG_NAME AS [PARTNER_NAME],CURR AS [CURRENCY],SUM(PAYOUT_DUE) AS PAYOUT_DUE, SUM(TOT_AMOUNT_PAYABLE) AS TOT_AMOUNT_PAYABLE,SUM(TOT_AMOUNT_PAYABLE_USD) AS [TOT_AMOUNT_PAYABLE IN USD],APPROVING_MGR,PAYMENT_MODE FROM PAYMENT_MASTER WHERE (WWAS_STATUS= 'O') AND (ALL_STATUS = 'O') and " + Condstr + " GROUP BY PAYOUT_ID, PROGRAM, COUNTRY,PARTNER_ID,PARTNER_ENG_NAME,CURR,APPROVING_MGR,PAYMENT_MODE");
                DataTable WWASDdt1 = new DataTable();
                //WWASDdt1 = rh.getData(strQuery1);
                WWASDdt1 = rh.getData11(cmd1); 
                Session["WWASDdt1"] = WWASDdt1;
            
            }

            else if (SelectStatusList.Text == "To Be Sent To APJ Team")
            {
                ExportToExcelBtn.Visible = true;
                CloseToBeSentToAPJStatusBtn.Visible = true;
                GenerateFilesList.Visible  = true;
                GenerateFilesBtn.Visible = true;
                SqlCommand cmd = new SqlCommand();

                if (SelectTeamList.SelectedValue == "FC Payments")
                {
                    //strQuery = "Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and " + Condstr + " ORDER BY REF_NO ";
                     cmd = new SqlCommand("Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and " + Condstr + " ORDER BY REF_NO ");
                }
                else
                {
                    //strQuery = "Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (FIRST_UPLOAD_P1_STATUS = 'C') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and " + Condstr + " ORDER BY REF_NO ";    
                     cmd = new SqlCommand("Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (FIRST_UPLOAD_P1_STATUS = 'C') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and " + Condstr + " ORDER BY REF_NO ");
                }

                
                
                DataTable SAPJDdt = new DataTable();
                //SAPJDdt = rh.getData(strQuery);
                SAPJDdt = rh.getData11(cmd);
                Session["SAPJDdt"] = SAPJDdt;
                //binddata(strQuery, gvSuspectStatus);
                binddata1(cmd, gvSuspectStatus);
            }

            else if (SelectStatusList.Text == "Vendor Id Status")
            {
               CloseVendorIdStatusBtn.Visible = true;
               ExportToExcelBtn.Visible = true;
                

               //strQuery = "Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE (VENDOR_ID_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') and (ALL_STATUS = 'O') and " + Condstr + " ORDER BY REF_NO ";
               SqlCommand cmd = new SqlCommand("Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE (VENDOR_ID_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') and (ALL_STATUS = 'O') and " + Condstr + " ORDER BY REF_NO ");
               DataTable VISDdt = new DataTable();
               //VISDdt = rh.getData(strQuery);
               VISDdt = rh.getData11(cmd);
                Session["VISDdt"] = VISDdt;
                //binddata(strQuery, gvSuspectStatus);
                binddata1(cmd, gvSuspectStatus);
            }

            else if (SelectStatusList.Text == "Vendor Name Mismatch Status")
            {
               CloseVendorIdMismatchStatusBtn.Visible = true;
               ExportToExcelBtn.Visible = true;

               //strQuery = "Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE (VENDOR_NAME_MISMATCH_STATUS = 'O') and (VENDOR_ID_STATUS = 'C') AND (ON_CHAPP_STATUS = 'Y') and (ALL_STATUS = 'O') and " + Condstr + " ORDER BY REF_NO ";
               SqlCommand cmd = new SqlCommand("Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE (VENDOR_NAME_MISMATCH_STATUS = 'O') and (VENDOR_ID_STATUS = 'C') AND (ON_CHAPP_STATUS = 'Y') and (ALL_STATUS = 'O') and " + Condstr + " ORDER BY REF_NO ");
               DataTable VIMSDdt = new DataTable();
               //VIMSDdt = rh.getData(strQuery);
               VIMSDdt = rh.getData11(cmd);
               Session["VIMSDdt"] = VIMSDdt;
               //binddata(strQuery, gvSuspectStatus);
               binddata1(cmd, gvSuspectStatus);
            }

            else if (SelectStatusList.Text == "Waiting For APJ Team")
            {
               CloseWaitingForAPJStatusBtn.Visible = true;  
               UploadCreditNoteFileBtn.Visible = true;
               ExportToExcelBtn.Visible = true;

               //strQuery = "Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (SENT_APJ_STATUS = 'C')AND (RECD_APJ_CLOSE_LOOP_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and " + Condstr + " ORDER BY REF_NO ";
               SqlCommand cmd = new SqlCommand("Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (SENT_APJ_STATUS = 'C')AND (RECD_APJ_CLOSE_LOOP_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and " + Condstr + " ORDER BY REF_NO ");
               DataTable WAPJDdt = new DataTable();
               //WAPJDdt = rh.getData(strQuery);
               WAPJDdt = rh.getData11(cmd);
               Session["WAPJDdt"] = WAPJDdt;
               //binddata(strQuery, gvSuspectStatus);
               binddata1(cmd, gvSuspectStatus);
            }


            else if (SelectStatusList.Text == "Reply Recd From APJ Team - Close Loop")
            {
               ExportToExcelBtn.Visible = true;
               GenerateCloseLoopFilesList.Visible = true;
               AllStatusClosedBtn.Visible = true;
               GenerateCloseLoopFileBtn.Visible = true;

                //strQuery = "Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE (UPLOADED_TO_P1_STATUS = 'O') and (RECD_APJ_CLOSE_LOOP_STATUS = 'C') and (ALL_STATUS = 'O') and " + Condstr + " ORDER BY REF_NO ";
                SqlCommand cmd = new SqlCommand("Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE (UPLOADED_TO_P1_STATUS = 'O') and (RECD_APJ_CLOSE_LOOP_STATUS = 'C') and (ALL_STATUS = 'O') and " + Condstr + " ORDER BY REF_NO ");
                DataTable RRAPJDdt = new DataTable();
                //RRAPJDdt = rh.getData(strQuery);
                RRAPJDdt = rh.getData11(cmd);
                Session["RRAPJDdt"] = RRAPJDdt;
                //binddata(strQuery, gvSuspectStatus);
                binddata1(cmd, gvSuspectStatus);
            }
            else if (SelectStatusList.Text == "All Status - Pending")
            {
                ExportToExcelBtn.Visible = true;
                AllStatusClosedBtn.Visible = true;
                OpenHoldPaymentStatusBtn.Visible = true;
                ProcessingCommentsBtn.Visible = true;

                //strQuery = "Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE (ALL_STATUS = 'O') and " + Condstr + " ORDER BY REF_NO ";
                SqlCommand cmd = new SqlCommand("Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE (ALL_STATUS = 'O') and " + Condstr + " ORDER BY REF_NO ");
                DataTable ASPdt = new DataTable();
                //ASPdt = rh.getData(strQuery);
                ASPdt = rh.getData11(cmd);
                Session["ASPdt"] = ASPdt;
                //binddata(strQuery, gvSuspectStatus);
                binddata1(cmd, gvSuspectStatus);
            }
            else if (SelectStatusList.Text == "Hold Payments")
            {
                ExportToExcelBtn.Visible = true;
                OpenPaymentStatusBtn.Visible = true;


                //strQuery = "Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE (ALL_STATUS = 'H') and " + Condstr + " ORDER BY REF_NO ";
                SqlCommand cmd = new SqlCommand("Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE (ALL_STATUS = 'H') and " + Condstr + " ORDER BY REF_NO ");
                DataTable HPdt = new DataTable();
                //HPdt = rh.getData(strQuery);
                HPdt = rh.getData11(cmd);
                Session["HPdt"] = HPdt;
                //binddata(strQuery, gvSuspectStatus);
                binddata1(cmd, gvSuspectStatus);
            }
            else if (SelectStatusList.Text == "Closed")
            {
                ExportToExcelBtn.Visible = true;
                OpenPaymentStatusBtn.Visible = true;


                //strQuery = "Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE (ALL_STATUS = 'C') and " + Condstr + " ORDER BY REF_NO ";
                SqlCommand cmd = new SqlCommand("Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE (ALL_STATUS = 'C') and " + Condstr + " ORDER BY REF_NO ");
                DataTable Cdt = new DataTable();
                //Cdt = rh.getData(strQuery);
                Cdt = rh.getData11(cmd);
                Session["Cdt"] = Cdt;
                //binddata(strQuery, gvSuspectStatus);
                binddata1(cmd, gvSuspectStatus);
            }
            else if (SelectStatusList.Text == "Threshold Approval Status")
            {
                ExportToExcelBtn.Visible = true;
                ThresholdApprovalStatusBtn.Visible = true;


                //strQuery = "Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE (TRESHOLD_STATUS = 'O') and (ALL_STATUS = 'O') and " + Condstr + " ORDER BY REF_NO ";
                SqlCommand cmd = new SqlCommand("Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,SAP_DOC_NO,CLEARING_DOC_NO,CHECK_REFERENCE,CLEARING_DATE,VALUE_DATE,REMARKS_FRM_PMT_OFFICE,VENDOR_ID_STATUS,VENDOR_NAME_MISMATCH_STATUS,VENDOR_NAME_MISMATCH_STATUS_COMMENTS,WWAS_STATUS,WWAS_APPROVAL_DATE,WWAS_COMMENTS,WWAS_OLD_MANGER,SPLIT_PAYMENT_SENT_STATUS,SPLIT_PAYMENT_SENT_DATE_CLOSED_BY,SPLIT_PAYMENT_SENT_DATE,SPLIT_PAYMENT_RECD_STATUS,SPLIT_PAYMENT_RECD_DATE,SENT_LOS_STATUS,SENT_LOS_DATE,RECD_LOS_STATUS,RECD_LOS_DATE,FIRST_UPLOAD_P1_STATUS,TRANSACTION_ID_UPlOAD_STATUS,TRANSACTION_ID_UPlOAD_DATE,TAX_INVOICE_NO,POSTING_DT,COUNTRY_CODE,COMPANY_CODE,SUSPECTS_STATUS,SUSPECT_STATUS_CLOSED_DATE,SUSPECTS_COMMENTS,VALIDATION_STATUS,FALLOUT_COMMENTS,PHYSICAL_CHK_NO,AWB_NUMBER,AWB_NUMBER_DATE,SENT_APJ_STATUS,SENT_APJ_STATUS_TYPE,RECD_APJ_DOC_NO_STATUS,RECD_APJ_CLOSE_LOOP_STATUS,UPLOADED_TO_P1_STATUS,ALL_STATUS,HOLD_STATUS_CHANGE_COMMENTS,ALL_STATUS_OPEN_DATE,WHT_TAX_CODE,VAT_TAX_CODE,SYSTEM_TYPE,PROCESSING_COMMENTS,RECD_APJ_DOC_NO_STATUS_COMMENTS,TRESHOLD_STATUS,TRESHOLD_APPROVAL_EMAIL_ID from Payment_Master WHERE (TRESHOLD_STATUS = 'O') and (ALL_STATUS = 'O') and " + Condstr + " ORDER BY REF_NO ");
                DataTable TAS = new DataTable();
                //TAS = rh.getData(strQuery);
                TAS = rh.getData11(cmd);
                Session["TAS"] = TAS;
                //binddata(strQuery, gvSuspectStatus);
                binddata1(cmd, gvSuspectStatus);
                
                //strQuery1 = "Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,TRESHOLD_APPROVAL_EMAIL_ID,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT from Payment_Master WHERE (TRESHOLD_STATUS = 'O') and (ALL_STATUS = 'O') and " + Condstr + " ORDER BY REF_NO ";
                SqlCommand cmd1 = new SqlCommand("Select REF_NO,PAYOUT_ID,TRANSACTION_ID,TRANSACTION_ID_GEN_DATE,PROGRAM,COUNTRY,FISCAL_YEAR,QUARTER,MONTH,PARTNER_ID,PARTNER_NAME,PARTNER_ENG_NAME,CURR,PAYOUT_DUE,VAT_PERCENTAGE,AMOUNT_AFTER_VAT,WHT_PERCENTAGE,TOT_AMOUNT_PAYABLE,TOT_AMOUNT_PAYABLE_USD,TRESHOLD_APPROVAL_EMAIL_ID,APPROVING_MGR,PAYMENT_MODE,VENDOR_NO,INVOICE_NO,INVOICE_DATE,ECLIPSE_CODE,MCC_CODE,CREDIT_NOTE_PL,REMARKS,ENSE,DEPT,SF,PT,PL,SUB_PL,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT from Payment_Master WHERE (TRESHOLD_STATUS = 'O') and (ALL_STATUS = 'O') and " + Condstr + " ORDER BY REF_NO ");
                DataTable TAS1 = new DataTable();
                //TAS1 = rh.getData(strQuery1);
                TAS1 = rh.getData11(cmd1);
                Session["TAS1"] = TAS1;
            }
        }
        //private void binddata(string strQuery, GridView gv)
        //{
        //    DataTable dt = rh.getData(strQuery);
        //    //DataTable dt = rh.getData11(cmd);
        //    //for (int i = 0; i < dt.Rows.Count; i++)
        //    //{
        //    //    //if (i == 0) { dt.Columns.Add("PARTNER_PRO_ID_Link", typeof(string)); dt.Rows[i]["PARTNER_PRO_ID_Link"] = "<a href=JavaScript:divexpandcollapse('div" + dt.Rows[i]["PARTNER_PRO_ID"].ToString() + "');Test</a>"; }
        //    //    if (i == 0) { dt.Columns.Add("PARTNER_PRO_ID_Link", typeof(string)); dt.Rows[i]["PARTNER_ID_Link"] = "JavaScript:divexpandcollapse('div" + dt.Rows[i]["PARTNER__ID"].ToString() + "');"; }
        //    //    if (i > 0) { dt.Rows[i]["PARTNER_PRO_ID_Link"] = "JavaScript:divexpandcollapse('div" + dt.Rows[i]["PARTNER_PRO_ID"].ToString() + "');"; }

        //    //}



        //    gv.DataSource = dt;
        //    gv.DataBind();


        //}
        private void binddata1(SqlCommand cmd, GridView gv)
        {
            //DataTable dt = rh.getData(strQuery);
            DataTable dt = rh.getData11(cmd);
            //for (int i = 0; i < dt.Rows.Count; i++)
            //{
            //    //if (i == 0) { dt.Columns.Add("PARTNER_PRO_ID_Link", typeof(string)); dt.Rows[i]["PARTNER_PRO_ID_Link"] = "<a href=JavaScript:divexpandcollapse('div" + dt.Rows[i]["PARTNER_PRO_ID"].ToString() + "');Test</a>"; }
            //    if (i == 0) { dt.Columns.Add("PARTNER_PRO_ID_Link", typeof(string)); dt.Rows[i]["PARTNER_ID_Link"] = "JavaScript:divexpandcollapse('div" + dt.Rows[i]["PARTNER__ID"].ToString() + "');"; }
            //    if (i > 0) { dt.Rows[i]["PARTNER_PRO_ID_Link"] = "JavaScript:divexpandcollapse('div" + dt.Rows[i]["PARTNER_PRO_ID"].ToString() + "');"; }

            //}



            gv.DataSource = dt;
            gv.DataBind();


        }


        
        protected void gvSuspectStatus_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            //if (e.Row.RowType == DataControlRowType.DataRow)
            //{
            //    Label lblpartner_pro_id = (Label)e.Row.FindControl("lblpartner_pro_id");
            //    GridView gvSuspectStatus_Child = (GridView)e.Row.FindControl("gvSuspectStatus_Child");

            //    string partner_pro_id = lblpartner_pro_id.Text;
            //    DataTable dt = rh.getData("SELECT PARTNER_PRO_ID, PROGRAM_NAME, PL, SUSPECT_COMMENTS, RESOLUTION_COMMENTS, COUNTRY, CURRENCY, GROSS_AMOUNT, GROSS_AMOUNT - NET_AMOUNT AS VAT_AMOUNT, NET_AMOUNT, INVOICE_NUMBER, INVOICE_NUMBER1, BATCH,  INVOICE_DATE, VAT_PER, PAYMENT_TEMPLATE_RECD_DATE FROM ASP_USER.TRANS_MASTER_EMEAPAY WHERE SUSPECT_STATUS = 'O' AND " + Condstr + " GROUP BY PARTNER_PRO_ID, PROGRAM_NAME, PL, SUSPECT_COMMENTS, RESOLUTION_COMMENTS, COUNTRY, CURRENCY, GROSS_AMOUNT, NET_AMOUNT, INVOICE_NUMBER, INVOICE_NUMBER1, BATCH, VAT_PER,  INVOICE_DATE, PAYMENT_TEMPLATE_RECD_DATE");

            //    gvSuspectStatus_Child.DataSource = dt;
            //    gvSuspectStatus_Child.DataBind();

            //}

        }

        public static void Show(string message)
        {
            string cleanMessage = message.Replace("'", "\'");
            Page page = HttpContext.Current.CurrentHandler as Page;
            string script = string.Format("alert('{0}');", cleanMessage);
            if (page != null && !page.ClientScript.IsClientScriptBlockRegistered("alert"))
            {
                page.ClientScript.RegisterClientScriptBlock(page.GetType(), "alert", script, true /* addScriptTags */);
            }
        }

       
        //protected void chkboxSelectAll_CheckedChanged(object sender, EventArgs e)
        //{
        //    CheckBox ChkBoxHeader = (CheckBox)gvPendingInvoiceCommunication.HeaderRow.FindControl("chkboxSelectAll");
        //    foreach (GridViewRow row in gvPendingInvoiceCommunication.Rows)
        //    {
        //        CheckBox ChkBoxRows = (CheckBox)row.FindControl("CB");
        //        if (ChkBoxHeader.Checked == true)
        //        {
        //            ChkBoxRows.Checked = true;
        //        }
        //        else
        //        {
        //            ChkBoxRows.Checked = false;
        //        }
        //    }
        //}

        private string GetSortDirection(string column)
        {
            string sortDirection = "DESC";
            string sortExpression = ViewState["SortExpression"] as string;

            if (sortExpression != null)
            {
                if (sortExpression == column)
                {
                    string lastDirection = ViewState["SortDirection"] as string;
                    if ((lastDirection != null) && (lastDirection == "DESC"))
                    {
                        sortDirection = "ASC";
                    }
                }
            }

            ViewState["SortDirection"] = sortDirection;
            ViewState["SortExpression"] = column;

            return sortDirection;
        }

        protected void GridViewSS_Sorting(object sender, GridViewSortEventArgs e)
        {
            //DataTable dt = ((DataTable)Session["ASPdt"]);
            //DataTable dt = ((DataTable)Session["TICdt"]);
            //dt.DefaultView.Sort = e.SortExpression + " " + GetSortDirection(e.SortExpression);
            
            //gvSuspectStatus.DataSource = dt;
            //gvSuspectStatus.DataBind();

            
            if (SelectStatusList.Text == "Suspect Status")
            {
                DataTable dt = ((DataTable)Session["PPdt"]);
                dt.DefaultView.Sort = e.SortExpression + " " + GetSortDirection(e.SortExpression);
                gvSuspectStatus.DataSource = dt;
                gvSuspectStatus.DataBind();
            }
            else if (SelectStatusList.Text == "To be Sent To C Ops - Split Payments")
            {
                DataTable dt = ((DataTable)Session["TSPdt"]);
                dt.DefaultView.Sort = e.SortExpression + " " + GetSortDirection(e.SortExpression);
                gvSuspectStatus.DataSource = dt;
                gvSuspectStatus.DataBind();
            
            }

            else if (SelectStatusList.Text == "Waiting For C Ops - Split Payments")
            {
                DataTable dt = ((DataTable)Session["WSPdt"]);
                dt.DefaultView.Sort = e.SortExpression + " " + GetSortDirection(e.SortExpression);
                gvSuspectStatus.DataSource = dt;
                gvSuspectStatus.DataBind();
            }

            else if (SelectStatusList.Text == "To Be Sent To Local Outsource - Invoice Collection")
            {
                DataTable dt = ((DataTable)Session["TICdt"]);
                dt.DefaultView.Sort = e.SortExpression + " " + GetSortDirection(e.SortExpression);
                gvSuspectStatus.DataSource = dt;
                gvSuspectStatus.DataBind();
            }

            else if (SelectStatusList.Text == "Waiting For Local Outsource  - Invoice Collection")
            {
                DataTable dt = ((DataTable)Session["WICdt"]);
                dt.DefaultView.Sort = e.SortExpression + " " + GetSortDirection(e.SortExpression);
                gvSuspectStatus.DataSource = dt;
                gvSuspectStatus.DataBind();
            }
            else if (SelectStatusList.Text == "To Be Uploaded To Platform One")
            {
                DataTable dt = ((DataTable)Session["TP1dt"]);
                dt.DefaultView.Sort = e.SortExpression + " " + GetSortDirection(e.SortExpression);
                gvSuspectStatus.DataSource = dt;
                gvSuspectStatus.DataBind();
            }
            else if (SelectStatusList.Text == "Waiting For Transaction Id")
            {
                DataTable dt = ((DataTable)Session["WTIDdt"]);
                dt.DefaultView.Sort = e.SortExpression + " " + GetSortDirection(e.SortExpression);
                gvSuspectStatus.DataSource = dt;
                gvSuspectStatus.DataBind();
            }
            else if (SelectStatusList.Text == "WWAS Approval")
            {
                DataTable dt = ((DataTable)Session["WWASDdt"]);
                dt.DefaultView.Sort = e.SortExpression + " " + GetSortDirection(e.SortExpression);
                gvSuspectStatus.DataSource = dt;
                gvSuspectStatus.DataBind();
            }
            else if (SelectStatusList.Text == "Vendor Id Status")
            {
                DataTable dt = ((DataTable)Session["VISDdt"]);
                dt.DefaultView.Sort = e.SortExpression + " " + GetSortDirection(e.SortExpression);
                gvSuspectStatus.DataSource = dt;
                gvSuspectStatus.DataBind();
            }
            else if (SelectStatusList.Text == "Vendor Name Mismatch Status")
            {
                DataTable dt = ((DataTable)Session["VIMSDdt"]);
                dt.DefaultView.Sort = e.SortExpression + " " + GetSortDirection(e.SortExpression);
                gvSuspectStatus.DataSource = dt;
                gvSuspectStatus.DataBind();
            
            }
            else if (SelectStatusList.Text == "To Be Sent To APJ Team")
            {
                DataTable dt = ((DataTable)Session["SAPJDdt"]);
                dt.DefaultView.Sort = e.SortExpression + " " + GetSortDirection(e.SortExpression);
                gvSuspectStatus.DataSource = dt;
                gvSuspectStatus.DataBind();
           }

            else if (SelectStatusList.Text == "Waiting For APJ Team")
            {
                DataTable dt = ((DataTable)Session["WAPJDdt"]);
                dt.DefaultView.Sort = e.SortExpression + " " + GetSortDirection(e.SortExpression);
                gvSuspectStatus.DataSource = dt;
                gvSuspectStatus.DataBind();
            
            }

            else if (SelectStatusList.Text == "Reply Recd From APJ Team - Close Loop")
            {
                DataTable dt = ((DataTable)Session["RRAPJDdt"]);
                dt.DefaultView.Sort = e.SortExpression + " " + GetSortDirection(e.SortExpression);
                gvSuspectStatus.DataSource = dt;
                gvSuspectStatus.DataBind();
            
           }
            else if (SelectStatusList.Text == "All Status - Pending")
            {
                DataTable dt = ((DataTable)Session["ASPdt"]);
                dt.DefaultView.Sort = e.SortExpression + " " + GetSortDirection(e.SortExpression);
                gvSuspectStatus.DataSource = dt;
                gvSuspectStatus.DataBind();
            
            }
            else if (SelectStatusList.Text == "Hold Payments")
            {
                DataTable dt = ((DataTable)Session["HPdt"]);
                dt.DefaultView.Sort = e.SortExpression + " " + GetSortDirection(e.SortExpression);
                gvSuspectStatus.DataSource = dt;
                gvSuspectStatus.DataBind();
            }
            else if (SelectStatusList.Text == "Closed")
            {
                DataTable dt = ((DataTable)Session["Cdt"]);
                dt.DefaultView.Sort = e.SortExpression + " " + GetSortDirection(e.SortExpression);
                gvSuspectStatus.DataSource = dt;
                gvSuspectStatus.DataBind();
            
            }
        }
        protected void GridViewSS_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            if (SelectStatusList.Text == "Suspect Status")
            {
                DataTable dt = ((DataTable)Session["PPdt"]);
                gvSuspectStatus.PageIndex = e.NewPageIndex;
                gvSuspectStatus.DataSource = dt;
                gvSuspectStatus.DataBind();
            }
            else if (SelectStatusList.Text == "To be Sent To C Ops - Split Payments")
            {
                DataTable dt = ((DataTable)Session["TSPdt"]);
                gvSuspectStatus.PageIndex = e.NewPageIndex;
                gvSuspectStatus.DataSource = dt;
                gvSuspectStatus.DataBind();
            
            }

            else if (SelectStatusList.Text == "Waiting For C Ops - Split Payments")
            {
                DataTable dt = ((DataTable)Session["WSPdt"]);
                gvSuspectStatus.PageIndex = e.NewPageIndex;
                gvSuspectStatus.DataSource = dt;
                gvSuspectStatus.DataBind();
            }

            else if (SelectStatusList.Text == "To Be Sent To Local Outsource - Invoice Collection")
            {
                DataTable dt = ((DataTable)Session["TICdt"]);
                gvSuspectStatus.PageIndex = e.NewPageIndex;
                gvSuspectStatus.DataSource = dt;
                gvSuspectStatus.DataBind();
            }

            else if (SelectStatusList.Text == "Waiting For Local Outsource  - Invoice Collection")
            {
                DataTable dt = ((DataTable)Session["WICdt"]);
                gvSuspectStatus.PageIndex = e.NewPageIndex;
                gvSuspectStatus.DataSource = dt;
                gvSuspectStatus.DataBind();
            }
            else if (SelectStatusList.Text == "To Be Uploaded To Platform One")
            {
                DataTable dt = ((DataTable)Session["TP1dt"]);
                gvSuspectStatus.PageIndex = e.NewPageIndex;
                gvSuspectStatus.DataSource = dt;
                gvSuspectStatus.DataBind();
            }
            else if (SelectStatusList.Text == "Waiting For Transaction Id")
            {
                DataTable dt = ((DataTable)Session["WTIDdt"]);
                gvSuspectStatus.PageIndex = e.NewPageIndex;
                gvSuspectStatus.DataSource = dt;
                gvSuspectStatus.DataBind();
            }
            else if (SelectStatusList.Text == "WWAS Approval")
            {
                DataTable dt = ((DataTable)Session["WWASDdt"]);
                gvSuspectStatus.PageIndex = e.NewPageIndex;
                gvSuspectStatus.DataSource = dt;
                gvSuspectStatus.DataBind();
            }
            else if (SelectStatusList.Text == "Vendor Id Status")
            {
                DataTable dt = ((DataTable)Session["VISDdt"]);
                gvSuspectStatus.PageIndex = e.NewPageIndex;
                gvSuspectStatus.DataSource = dt;
                gvSuspectStatus.DataBind();
            }
            else if (SelectStatusList.Text == "Vendor Name Mismatch Status")
            {
                DataTable dt = ((DataTable)Session["VIMSDdt"]);
                gvSuspectStatus.PageIndex = e.NewPageIndex;
                gvSuspectStatus.DataSource = dt;
                gvSuspectStatus.DataBind();
            
            }
            else if (SelectStatusList.Text == "To Be Sent To APJ Team")
            {
                DataTable dt = ((DataTable)Session["SAPJDdt"]);
                gvSuspectStatus.PageIndex = e.NewPageIndex;
                gvSuspectStatus.DataSource = dt;
                gvSuspectStatus.DataBind();
           }

            else if (SelectStatusList.Text == "Waiting For APJ Team")
            {
                DataTable dt = ((DataTable)Session["WAPJDdt"]);
                gvSuspectStatus.PageIndex = e.NewPageIndex;
                gvSuspectStatus.DataSource = dt;
                gvSuspectStatus.DataBind();
            
            }

            else if (SelectStatusList.Text == "Reply Recd From APJ Team - Close Loop")
            {
                DataTable dt = ((DataTable)Session["RRAPJDdt"]);
                gvSuspectStatus.PageIndex = e.NewPageIndex;
                gvSuspectStatus.DataSource = dt;
                gvSuspectStatus.DataBind();
            
           }
            else if (SelectStatusList.Text == "All Status - Pending")
            {
                DataTable dt = ((DataTable)Session["ASPdt"]);
                gvSuspectStatus.PageIndex = e.NewPageIndex;
                gvSuspectStatus.DataSource = dt;
                gvSuspectStatus.DataBind();
            
            }
            else if (SelectStatusList.Text == "Hold Payments")
            {
                DataTable dt = ((DataTable)Session["HPdt"]);
                gvSuspectStatus.PageIndex = e.NewPageIndex;
                gvSuspectStatus.DataSource = dt;
                gvSuspectStatus.DataBind();
            }
            else if (SelectStatusList.Text == "Closed")
            {
                DataTable dt = ((DataTable)Session["Cdt"]);
                gvSuspectStatus.PageIndex = e.NewPageIndex;
                gvSuspectStatus.DataSource = dt;
                gvSuspectStatus.DataBind();
            
            }
            else if (SelectStatusList.Text == "Threshold Approval Status")
            {
                DataTable dt = ((DataTable)Session["TAS"]);
                gvSuspectStatus.PageIndex = e.NewPageIndex;
                gvSuspectStatus.DataSource = dt;
                gvSuspectStatus.DataBind();

            }
        }



        protected void chkboxSelectAllSS_CheckedChanged(object sender, EventArgs e)
        {
            CheckBox ChkBoxHeader = (CheckBox)gvSuspectStatus.HeaderRow.FindControl("chkboxSelectAll");
            foreach (GridViewRow row in gvSuspectStatus.Rows)
            {
                CheckBox ChkBoxRows = (CheckBox)row.FindControl("CB");
                if (ChkBoxHeader.Checked == true)
                {
                    ChkBoxRows.Checked = true;
                }
                else
                {
                    ChkBoxRows.Checked = false;
                }
            }
        }
        
       

       
       
        protected void KillProcess(string processName)
        {
            System.Diagnostics.Process myproc = new System.Diagnostics.Process();
            try
            {
                foreach (Process thisproc in Process.GetProcessesByName(processName))
                {
                    if (!thisproc.CloseMainWindow())
                    {
                        thisproc.Kill();
                    }
                } // next proc
            }
            catch (Exception Exc)
            {
                string msg = Exc.Message;
            }
        }

        protected void CloseSuspectstatusBtn_Click(object sender, EventArgs e)
        {
            string pproid = "";
            //string batch = "";
            string usertype = Session["GlobalUserType"].ToString();
            if ((usertype == "ADMIN") || (usertype == "SME"))
            {
            for (int i = 0; i < gvSuspectStatus.Rows.Count; i++)
            {
                CheckBox cb = (CheckBox)gvSuspectStatus.Rows[i].FindControl("CB");
                if (cb.Checked)
                {
                    //batch = gvSuspectStatus.Rows[i].Cells[47].Text.ToString();
                    Label lblpartner_pro_id = (Label)gvSuspectStatus.Rows[i].Cells[16].FindControl("lblpartner_pro_id");
                    pproid = lblpartner_pro_id.Text.ToString();
                    //currency =gvSuspectStatus.Rows[i].Cells[9].Text.ToString();
                    //invNum1 =gvSuspectStatus.Rows[i].Cells[12].Text.ToString();
                    string ResolutionComments = CloseSuspectstatusCommentsTxt.Text;
                    string processor = Session["GlobalUserID"].ToString();
                    string Inv_dt = DateTime.Now.Date.ToString("dd-MMM-yyyy");
                    DataTable dt;
                    //Neel's Code 
                    //SqlCommand cmd = new SqlCommand("Update PAYMENT_MASTER SET SUSPECTS_STATUS = 'C', SUSPECT_STATUS_CLOSED_DATE =@Inv_dt, SUSPECT_STATUS_CLOSED_BY = @processor, SUSPECTS_COMMENTS =@ResolutionComment WHERE REF_NO =@pproid");
                    
                    //cmd.Parameters.AddWithValue("@Inv_dt", Inv_dt);
                    //cmd.Parameters.AddWithValue("@processor", processor);
                    //cmd.Parameters.AddWithValue("@ResolutionComments", ResolutionComments);
                    //cmd.Parameters.AddWithValue("@pproid", pproid);
                    //dt = rh.getData11(cmd);
                    //Neel's Code End
                    //test
                    UpdateQueryBuilder qry = new UpdateQueryBuilder();
                    qry.Table="PAYMENT_MASTER";
                    qry.SetField("SUSPECT_STATUS_CLOSED_DATE", Inv_dt);
                    qry.SetField("SUSPECTS_STATUS", 'C');
                    qry.SetField("SUSPECT_STATUS_CLOSED_BY", processor);
                    qry.SetField("SUSPECTS_COMMENTS", ResolutionComments);
                    qry.AddWhere("REF_NO", Comparison.Equals, pproid);
                    qry.SetDbProviderFactory(DbProviderFactories.GetFactory("System.Data.SqlClient"));
                    DbCommand command = qry.BuildCommand();
                    SqlCommand cmd1 = new SqlCommand();
                    cmd1 = (SqlCommand)command;
                    dt = rh.getData11(cmd1);
                    //test end
                    //dt = rh.getData("Update PAYMENT_MASTER SET SUSPECTS_STATUS = 'C', SUSPECT_STATUS_CLOSED_DATE = '" + Inv_dt + "', SUSPECT_STATUS_CLOSED_BY = '" + processor + "', SUSPECTS_COMMENTS = '" + ResolutionComments + "' WHERE REF_NO = '" + pproid + "'");
                }

            }
            ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('Updated');", true);
            CloseSuspectstatusCommentsTxt.Text = "";
            }
            
           else
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('You do not have Permissions to Close the Status');", true);
            }
        }

        protected void CloseSplitPaymentStatusBtn_Click(object sender, EventArgs e)
        {
            string pproid = "";
            //string batch = "";
            string usertype = Session["GlobalUserType"].ToString();
            if ((usertype == "ADMIN")|| (usertype == "SME"))
               
            {
                for (int i = 0; i < gvSuspectStatus.Rows.Count; i++)
                {
                    CheckBox cb = (CheckBox)gvSuspectStatus.Rows[i].FindControl("CB");
                    if (cb.Checked)
                    {
                        //batch = gvSuspectStatus.Rows[i].Cells[47].Text.ToString();
                        Label lblpartner_pro_id = (Label)gvSuspectStatus.Rows[i].Cells[16].FindControl("lblpartner_pro_id");
                        pproid = lblpartner_pro_id.Text.ToString();
                        //currency =gvSuspectStatus.Rows[i].Cells[9].Text.ToString();
                        //invNum1 =gvSuspectStatus.Rows[i].Cells[12].Text.ToString();
                        string ResolutionComments = CloseSplitStatusCommentsTxt.Text;
                        string processor = Session["GlobalUserID"].ToString();
                        string Inv_dt = DateTime.Now.Date.ToString("dd-MMM-yyyy");
                        DataTable dt;
                        //Neel's Code 
                        //SqlCommand cmd = new SqlCommand("Update PAYMENT_MASTER SET SPLIT_PAYMENT_SENT_STATUS = 'C', SPLIT_PAYMENT_RECD_STATUS = 'C', SPLIT_PAYMENT_RECD_DATE =@Inv_dt, SPLIT_PAYMENT_RECD_DATE_CLOSED_BY =@processor, SPLIT_PAYMENT_RECD_DATE_COMMENTS =@ResolutionComments WHERE REF_NO =@pproid");
                        //cmd.Parameters.AddWithValue("@Inv_dt", Inv_dt);
                        //cmd.Parameters.AddWithValue("@processor", processor);
                        //cmd.Parameters.AddWithValue("@ResolutionComments", ResolutionComments);
                        //cmd.Parameters.AddWithValue("@pproid", pproid);
                        //dt = rh.getData11(cmd);

                        //Neel's Code End
                        //test
                        UpdateQueryBuilder qry = new UpdateQueryBuilder();
                        qry.Table = "PAYMENT_MASTER";
                        qry.SetField("SPLIT_PAYMENT_RECD_DATE", Inv_dt);
                        qry.SetField("SPLIT_PAYMENT_SENT_STATUS", 'C');
                        qry.SetField("SPLIT_PAYMENT_RECD_STATUS", 'C');
                        qry.SetField("SPLIT_PAYMENT_RECD_DATE_CLOSED_BY", processor);
                        qry.SetField("SPLIT_PAYMENT_RECD_DATE_COMMENTS", ResolutionComments);
                        qry.AddWhere("REF_NO", Comparison.Equals, pproid);
                        qry.SetDbProviderFactory(DbProviderFactories.GetFactory("System.Data.SqlClient"));
                        DbCommand command = qry.BuildCommand();
                        SqlCommand cmd1 = new SqlCommand();
                        cmd1 = (SqlCommand)command;
                        dt = rh.getData11(cmd1);
                        //test end
                      //  dt = rh.getData("Update PAYMENT_MASTER SET SPLIT_PAYMENT_SENT_STATUS = 'C', SPLIT_PAYMENT_RECD_STATUS = 'C', SPLIT_PAYMENT_RECD_DATE = '" + Inv_dt + "', SPLIT_PAYMENT_RECD_DATE_CLOSED_BY = '" + processor + "', SPLIT_PAYMENT_RECD_DATE_COMMENTS = '" + ResolutionComments + "' WHERE REF_NO = '" + pproid + "'");
                    }

                }
                ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('Updated');", true);
                CloseSplitStatusCommentsTxt.Text = "";

            }

            else
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('You do not have Permissions to Close the Status');", true);
                
            }
        }
        protected void GenerateSplitPaymentStatusBtn_Click(object sender, EventArgs e)
        {
          
            

            if (SelectTeamList.Text != "")
            {
                if (SelectTeamList.Text == "Select the Team Name")
                {
                    Condstr = " 1=1";
                }
                else
                {


                    Condstr = Condstr + "AND Team_Name = '" + SelectTeamList.Text + "'";
                }

            }



            if (SelectProgramList.Text != "Select the Program Name")
            {
                Condstr = Condstr + " AND Program = '" + SelectProgramList.Text + "'";
            }


            if (SelectCountryCodeList.Text != "Select the Country Code")
            {
                Condstr = Condstr + " AND COUNTRY_CODE = '" + SelectCountryCodeList.Text + "'";
            }

            if (SelectPaymentModeList.Text != "Select the Payment Mode")
            {
                Condstr = Condstr + " AND PAYMENT_MODE = '" + SelectPaymentModeList.Text + "'";
            }

            SqlCommand cmd = new SqlCommand("SELECT PAYOUT_ID as [Payout ID],PROGRAM as [Program],COUNTRY as [Country],FISCAL_YEAR as [Year],QUARTER as [Quarter],PARTNER_ID as [Partner ID],PARTNER_NAME as [Partner Name],PARTNER_ENG_NAME as [Partner English Name],CURR as [ISO Currency Type],PAYOUT_DUE as [Payout Due],null as [Split Amount],MCC_CODE as [MCC],CREDIT_NOTE_PL as [Credit Note PL],PL as [PL (Cheque/TT)],REMARKS as [Part No] FROM PAYMENT_MASTER WHERE (SPLIT_PAYMENT_SENT_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (ALL_STATUS = 'O') and " + Condstr + "");  
            //string strQuery = "SELECT PAYOUT_ID as [Payout ID],PROGRAM as [Program],COUNTRY as [Country],FISCAL_YEAR as [Year],QUARTER as [Quarter],PARTNER_ID as [Partner ID],PARTNER_NAME as [Partner Name],PARTNER_ENG_NAME as [Partner English Name],CURR as [ISO Currency Type],PAYOUT_DUE as [Payout Due],null as [Split Amount],MCC_CODE as [MCC],CREDIT_NOTE_PL as [Credit Note PL],PL as [PL (Cheque/TT)],REMARKS as [Part No] FROM PAYMENT_MASTER WHERE (SPLIT_PAYMENT_SENT_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (ALL_STATUS = 'O') and " + Condstr + "";

            //DataTable dt = rh.getData(strQuery);
            DataTable dt = rh.getData11(cmd);
            Session["SSdt"] = dt;
            //string excelfilename = Server.MapPath("ExportToExcelFiles/") + Session["GlobalName"] + ".xlsx";
            string processor1 = Session["GlobalName"].ToString();
            processor1 = processor1.Replace('\\', '-'); 

            string country = "";
            string program_name = "";
           
                 //country = gvSuspectStatus.Rows[0].Cells[8].Text.ToString();
                 country = SelectCountryCodeList.Text.ToString();
                 program_name = SelectProgramList.Text.ToString();   
        
            string timeStamp = DateTime.Now.ToString("s");

            timeStamp = timeStamp.Replace(':', '-');
            timeStamp = timeStamp.Replace("T", "__");
            //currentWorksheet.Cells[1, 1] = timeStamp;
            //currentWorksheet.Cells[1, 2] = "No error occured";

            string filename = "";
            string fname = "";
            
            
            if (SelectTeamList.Text == "FC Payments")
            {
                filename = "C:\\APJ_RH_PaymentsFiles\\Generate_Split_Files\\" + country + "_" + "PADB" + "_" + processor1 + "_" + timeStamp + ".xlsx";

                fname = country + "_" + "PADB" + "_" + processor1 + "_" + timeStamp + ".xlsx";
            }

            else
            {
                filename = "C:\\APJ_RH_PaymentsFiles\\Generate_Split_Files\\" + country + "_" + "PADB" + "_" + program_name + "_" + processor1 + "_" + timeStamp + ".xlsx";
                fname = country + "_" + "PADB" + "_" + program_name + "_" + processor1 + "_" + timeStamp + ".xlsx";
            }
      

            if (File.Exists(filename))
            {
                File.Delete(filename);

            }

            
            string imported = rh.ExportToExcel(dt, filename);
            string processor = Session["GlobalUserID"].ToString();

            
            string Inv_dt = DateTime.Now.Date.ToString("dd-MMM-yyyy");

            SqlCommand cmd1 = new SqlCommand("Update PAYMENT_MASTER SET SPLIT_PAYMENT_SENT_STATUS = 'C', SPLIT_PAYMENT_SENT_DATE = '" + Inv_dt + "', SPLIT_PAYMENT_SENT_DATE_CLOSED_BY = '" + processor + "' WHERE (SPLIT_PAYMENT_SENT_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (ALL_STATUS = 'O') and " + Condstr + "");  
            //dt = rh.getData("Update PAYMENT_MASTER SET SPLIT_PAYMENT_SENT_STATUS = 'C', SPLIT_PAYMENT_SENT_DATE = '" + Inv_dt + "', SPLIT_PAYMENT_SENT_DATE_CLOSED_BY = '" + processor + "' WHERE (SPLIT_PAYMENT_SENT_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (ALL_STATUS = 'O') and " + Condstr + "");
            dt = rh.getData11(cmd1);
            Response.AppendHeader("Content-Disposition", "attachment; filename=" + fname);
            Response.TransmitFile(filename);
            Response.AppendHeader("X-Download-Options", "noopen");
            Response.End();
        }
        protected void GenerateInvoiceFileBtn_Click(object sender, EventArgs e)
        {
            

            if (SelectTeamList.Text != "")
            {
                if (SelectTeamList.Text == "Select the Team Name")
                {
                    Condstr = " 1=1";
                }
                else
                {


                    Condstr = Condstr + "AND Team_Name = '" + SelectTeamList.Text + "'";
                }

            }


            if (SelectProgramList.Text != "Select the Program Name")
            {
                Condstr = Condstr + " AND Program = '" + SelectProgramList.Text + "'";
            }

            if (SelectCountryCodeList.Text != "Select the Country Code")
            {
                Condstr = Condstr + " AND COUNTRY_CODE = '" + SelectCountryCodeList.Text + "'";
            }

            if (SelectPaymentModeList.Text != "Select the Payment Mode")
            {
                Condstr = Condstr + " AND PAYMENT_MODE = '" + SelectPaymentModeList.Text + "'";
            }

            SqlCommand cmd = new SqlCommand("SELECT REF_NO, PAYOUT_ID, TRANSACTION_ID, TRANSACTION_ID_GEN_DATE, PROGRAM, COUNTRY, FISCAL_YEAR, QUARTER, MONTH, PARTNER_ID, PARTNER_NAME, PARTNER_ENG_NAME, CURR, PAYOUT_DUE, VAT_PERCENTAGE, AMOUNT_AFTER_VAT, WHT_PERCENTAGE, TOT_AMOUNT_PAYABLE, APPROVING_MGR, PAYMENT_MODE, VENDOR_NO, INVOICE_NO, INVOICE_DATE, ECLIPSE_CODE, MCC_CODE, CREDIT_NOTE_PL, REMARKS, ENSE, DEPT, SF, PT, PL, SUB_PL, ACCT, LCL_SUB_ACCT, IC_SUB_ACCT, SAP_DOC_NO, NULL AS [Payment Currency Type], NULL AS [Payment Amount(After Tax)], NULL AS [Payment Date (MM/DD/YYYY)], REMARKS_FRM_PMT_OFFICE FROM PAYMENT_MASTER WHERE  (SPLIT_PAYMENT_SENT_STATUS = 'C')    and  (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (ALL_STATUS = 'O') and " + Condstr + ""); 
            //string strQuery = "SELECT REF_NO, PAYOUT_ID, TRANSACTION_ID, TRANSACTION_ID_GEN_DATE, PROGRAM, COUNTRY, FISCAL_YEAR, QUARTER, MONTH, PARTNER_ID, PARTNER_NAME, PARTNER_ENG_NAME, CURR, PAYOUT_DUE, VAT_PERCENTAGE, AMOUNT_AFTER_VAT, WHT_PERCENTAGE, TOT_AMOUNT_PAYABLE, APPROVING_MGR, PAYMENT_MODE, VENDOR_NO, INVOICE_NO, INVOICE_DATE, ECLIPSE_CODE, MCC_CODE, CREDIT_NOTE_PL, REMARKS, ENSE, DEPT, SF, PT, PL, SUB_PL, ACCT, LCL_SUB_ACCT, IC_SUB_ACCT, SAP_DOC_NO, NULL AS [Payment Currency Type], NULL AS [Payment Amount(After Tax)], NULL AS [Payment Date (MM/DD/YYYY)], REMARKS_FRM_PMT_OFFICE FROM PAYMENT_MASTER WHERE  (SPLIT_PAYMENT_SENT_STATUS = 'C')    and  (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (ALL_STATUS = 'O') and " + Condstr + "";
            //DataTable dt = rh.getData(strQuery);
            DataTable dt = rh.getData11(cmd);
            Session["SSdt"] = dt;
            //string excelfilename = Server.MapPath("ExportToExcelFiles/") + Session["GlobalName"] + ".xlsx";
            string processor1 = Session["GlobalName"].ToString();
            processor1 = processor1.Replace('\\', '-');

            string country = "";
            string program_name = "";

            //country = gvSuspectStatus.Rows[0].Cells[8].Text.ToString();
            country = SelectCountryCodeList.Text.ToString();
            program_name = SelectProgramList.Text.ToString();

            string timeStamp = DateTime.Now.ToString("s");

            timeStamp = timeStamp.Replace(':', '-');
            timeStamp = timeStamp.Replace("T", "__");
            //currentWorksheet.Cells[1, 1] = timeStamp;
            //currentWorksheet.Cells[1, 2] = "No error occured";

            string filename = "";
            string fname = "";


            if (SelectTeamList.Text == "FC Payments")
            {
                filename = "C:\\APJ_RH_PaymentsFiles\\Generate_Invoice_Files\\" + country + "_" + "PADV" + "_" + processor1 + "_" + timeStamp + ".xlsx";

                fname = country + "_" + "PADV" + "_" + processor1 + "_" + timeStamp + ".xlsx";
            }

            else
            {
                filename = "C:\\APJ_RH_PaymentsFiles\\Generate_Invoice_Files\\" + country + "_" + "PADV" + "_" + program_name + "_" + processor1 + "_" + timeStamp + ".xlsx";
                fname = country + "_" + "PADV" + "_" + program_name + "_" + processor1 + "_" + timeStamp + ".xlsx";
            }


            if (File.Exists(filename))
            {
                File.Delete(filename);

            }


            string imported = rh.ExportToExcel(dt, filename);
            string processor = Session["GlobalUserID"].ToString();


            string Inv_dt = DateTime.Now.Date.ToString("dd-MMM-yyyy");

            SqlCommand cmd1 = new SqlCommand("Update PAYMENT_MASTER SET SENT_LOS_STATUS = 'C', SENT_LOS_DATE = '" + Inv_dt + "', SENT_LOS_DATE_CLOSED_BY = '" + processor + "' WHERE  (SPLIT_PAYMENT_SENT_STATUS = 'C')    and  (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (ALL_STATUS = 'O') and " + Condstr + "");  
            //dt = rh.getData("Update PAYMENT_MASTER SET SENT_LOS_STATUS = 'C', SENT_LOS_DATE = '" + Inv_dt + "', SENT_LOS_DATE_CLOSED_BY = '" + processor + "' WHERE  (SPLIT_PAYMENT_SENT_STATUS = 'C')    and  (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (ALL_STATUS = 'O') and " + Condstr + "");
            dt = rh.getData11(cmd1);
            Response.AppendHeader("Content-Disposition", "attachment; filename=" + fname);
            Response.TransmitFile(filename);
            Response.AppendHeader("X-Download-Options", "noopen");
            Response.End();
        }
        protected void GenerateFirstP1UploadFileBtn_Click(object sender, EventArgs e)
        {
            

            if (SelectTeamList.Text != "")
            {
                if (SelectTeamList.Text == "Select the Team Name")
                {
                    Condstr = " 1=1";
                }
                else
                {


                    Condstr = Condstr + "AND Team_Name = '" + SelectTeamList.Text + "'";
                }

            }

            if (SelectProgramList.Text != "Select the Program Name")
            {
                Condstr = Condstr + " AND Program = '" + SelectProgramList.Text + "'";
            }

            if (SelectCountryCodeList.Text != "Select the Country Code")
            {
                Condstr = Condstr + " AND COUNTRY_CODE = '" + SelectCountryCodeList.Text + "'";
            }
            if (SelectPaymentModeList.Text != "Select the Payment Mode")
            {
                Condstr = Condstr + " AND PAYMENT_MODE = '" + SelectPaymentModeList.Text + "'";
            }

            //string strQuery="";
            string usertype = Session["GlobalUserType"].ToString();
            SqlCommand cmd = new SqlCommand();
            if ((SelectTeamList.Text == "FC Payments")  && (usertype != "USER"))
            
            {
                //strQuery = "SELECT PAYOUT_ID, TRANSACTION_ID FROM PAYMENT_MASTER WHERE SPLIT_PAYMENT_SENT_STATUS = 'C' AND SPLIT_PAYMENT_RECD_STATUS = 'C' AND SENT_LOS_STATUS = 'C' AND RECD_LOS_STATUS = 'C'AND ON_CHAPP_STATUS = 'Y'AND FIRST_UPLOAD_P1_STATUS = 'O'AND (ALL_STATUS = 'O') and " + Condstr + "";
                cmd = new SqlCommand("SELECT PAYOUT_ID, TRANSACTION_ID FROM PAYMENT_MASTER WHERE SPLIT_PAYMENT_SENT_STATUS = 'C' AND SPLIT_PAYMENT_RECD_STATUS = 'C' AND SENT_LOS_STATUS = 'C' AND RECD_LOS_STATUS = 'C'AND ON_CHAPP_STATUS = 'Y'AND FIRST_UPLOAD_P1_STATUS = 'O'AND (ALL_STATUS = 'O') and " + Condstr + "");
            }

            else if (SelectTeamList.Text == "CI Payments")
            {

                //strQuery = "SELECT REF_NO,PAYOUT_ID, TRANSACTION_ID, TRANSACTION_ID_GEN_DATE, PROGRAM, COUNTRY, FISCAL_YEAR, QUARTER, MONTH, PARTNER_ID, PARTNER_NAME, CURR, PAYOUT_DUE, VAT_PERCENTAGE, TOT_AMOUNT_PAYABLE, APPROVING_MGR, PAYMENT_MODE, VENDOR_NO, INVOICE_NO, ECLIPSE_CODE, MCC_CODE, CREDIT_NOTE_PL, REMARKS, ENSE, DEPT, SF, PT, PL, SUB_PL, ACCT, LCL_SUB_ACCT, IC_SUB_ACCT, SAP_DOC_NO,  CURR AS [Payment Currency Type], AMOUNT_AFTER_VAT AS [Payment Amount], VALUE_DATE AS [Payment Date (MM/DD/YYYY)], REMARKS_FRM_PMT_OFFICE,NULL AS [Status],TARGET_PARTNER_ID,TARGET_PARTNER_ENGLISH_NAME FROM PAYMENT_MASTER WHERE SPLIT_PAYMENT_SENT_STATUS = 'C' AND SPLIT_PAYMENT_RECD_STATUS = 'C' AND SENT_LOS_STATUS = 'C' AND RECD_LOS_STATUS = 'C'AND ON_CHAPP_STATUS = 'Y'AND FIRST_UPLOAD_P1_STATUS = 'O'AND (ALL_STATUS = 'O') and " + Condstr + "";
                cmd = new SqlCommand("SELECT REF_NO,PAYOUT_ID, TRANSACTION_ID, TRANSACTION_ID_GEN_DATE, PROGRAM, COUNTRY, FISCAL_YEAR, QUARTER, MONTH, PARTNER_ID, PARTNER_NAME, CURR, PAYOUT_DUE, VAT_PERCENTAGE, TOT_AMOUNT_PAYABLE, APPROVING_MGR, PAYMENT_MODE, VENDOR_NO, INVOICE_NO, ECLIPSE_CODE, MCC_CODE, CREDIT_NOTE_PL, REMARKS, ENSE, DEPT, SF, PT, PL, SUB_PL, ACCT, LCL_SUB_ACCT, IC_SUB_ACCT, SAP_DOC_NO,  CURR AS [Payment Currency Type], AMOUNT_AFTER_VAT AS [Payment Amount], VALUE_DATE AS [Payment Date (MM/DD/YYYY)], REMARKS_FRM_PMT_OFFICE,NULL AS [Status],TARGET_PARTNER_ID,TARGET_PARTNER_ENGLISH_NAME FROM PAYMENT_MASTER WHERE SPLIT_PAYMENT_SENT_STATUS = 'C' AND SPLIT_PAYMENT_RECD_STATUS = 'C' AND SENT_LOS_STATUS = 'C' AND RECD_LOS_STATUS = 'C'AND ON_CHAPP_STATUS = 'Y'AND FIRST_UPLOAD_P1_STATUS = 'O'AND (ALL_STATUS = 'O') and " + Condstr + "");
            }

            else
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('You do not have Permissions to Close the Status');", true);
            
            }

            //DataTable dt = rh.getData(strQuery);
            DataTable dt = rh.getData11(cmd);
            Session["SSdt"] = dt;
            //string excelfilename = Server.MapPath("ExportToExcelFiles/") + Session["GlobalName"] + ".xlsx";
            string processor1 = Session["GlobalName"].ToString();
            processor1 = processor1.Replace('\\', '-');

            string country = "";
            //string program_name = "";

            //country = gvSuspectStatus.Rows[0].Cells[8].Text.ToString();
            country = SelectCountryCodeList.Text.ToString();
            //program_name = SelectProgramList.Text.ToString();

            string timeStamp = DateTime.Now.ToString("s");

            timeStamp = timeStamp.Replace(':', '-');
            timeStamp = timeStamp.Replace("T", "__");
            //currentWorksheet.Cells[1, 1] = timeStamp;
            //currentWorksheet.Cells[1, 2] = "No error occured";

            string filename = "";
            string fname = "";


            if (SelectTeamList.Text == "FC Payments")  
            {
                filename = "C:\\APJ_RH_PaymentsFiles\\Generate_FirstP1_Files\\" + "PAYMENT_UPLOAD" + "_" + processor1 + "_" + timeStamp + ".xlsx";

                fname = "PAYMENT_UPLOAD" + "_" + processor1 + "_" + timeStamp + ".xlsx";
            }

            else 
            {
                filename = "C:\\APJ_RH_PaymentsFiles\\Generate_FirstP1_Files\\" + country + "_" + "PAYOUT_UPLOAD" + "_" + processor1 + "_" + timeStamp + ".xlsx";
                fname = country + "_" + "PAYOUT_UPLOAD" + "_" + processor1 + "_" + timeStamp + ".xlsx";
            }


            if (File.Exists(filename))
            {
                File.Delete(filename);

            }


            string imported = rh.ExportToExcel(dt, filename);
            string processor = Session["GlobalUserID"].ToString();


            string Inv_dt = DateTime.Now.Date.ToString("dd-MMM-yyyy");

            if ((SelectTeamList.Text == "FC Payments") && (usertype != "USER"))
            {
                SqlCommand cmd1 = new SqlCommand("Update PAYMENT_MASTER SET TRANSACTION_ID_UPlOAD_STATUS = 'C',FIRST_UPLOAD_P1_STATUS = 'C', FIRST_UPLOAD_P1_DATE = '" + Inv_dt + "', FIRST_UPLOAD_P1_CLOSED_BY = '" + processor + "' WHERE SPLIT_PAYMENT_SENT_STATUS = 'C' AND SPLIT_PAYMENT_RECD_STATUS = 'C' AND SENT_LOS_STATUS = 'C' AND RECD_LOS_STATUS = 'C'AND ON_CHAPP_STATUS = 'Y'AND FIRST_UPLOAD_P1_STATUS = 'O'AND (ALL_STATUS = 'O') and " + Condstr + "");
                //dt = rh.getData("Update PAYMENT_MASTER SET TRANSACTION_ID_UPlOAD_STATUS = 'C',FIRST_UPLOAD_P1_STATUS = 'C', FIRST_UPLOAD_P1_DATE = '" + Inv_dt + "', FIRST_UPLOAD_P1_CLOSED_BY = '" + processor + "' WHERE SPLIT_PAYMENT_SENT_STATUS = 'C' AND SPLIT_PAYMENT_RECD_STATUS = 'C' AND SENT_LOS_STATUS = 'C' AND RECD_LOS_STATUS = 'C'AND ON_CHAPP_STATUS = 'Y'AND FIRST_UPLOAD_P1_STATUS = 'O'AND (ALL_STATUS = 'O') and " + Condstr + "");
                dt = rh.getData11(cmd1);
            }
            else if (SelectTeamList.Text == "CI Payments")
            {
                SqlCommand cmd1 = new SqlCommand("Update PAYMENT_MASTER SET FIRST_UPLOAD_P1_STATUS = 'C', FIRST_UPLOAD_P1_DATE = '" + Inv_dt + "', FIRST_UPLOAD_P1_CLOSED_BY = '" + processor + "' WHERE SPLIT_PAYMENT_SENT_STATUS = 'C' AND SPLIT_PAYMENT_RECD_STATUS = 'C' AND SENT_LOS_STATUS = 'C' AND RECD_LOS_STATUS = 'C'AND ON_CHAPP_STATUS = 'Y'AND FIRST_UPLOAD_P1_STATUS = 'O'AND (ALL_STATUS = 'O') and " + Condstr + "");  
                //dt = rh.getData("Update PAYMENT_MASTER SET FIRST_UPLOAD_P1_STATUS = 'C', FIRST_UPLOAD_P1_DATE = '" + Inv_dt + "', FIRST_UPLOAD_P1_CLOSED_BY = '" + processor + "' WHERE SPLIT_PAYMENT_SENT_STATUS = 'C' AND SPLIT_PAYMENT_RECD_STATUS = 'C' AND SENT_LOS_STATUS = 'C' AND RECD_LOS_STATUS = 'C'AND ON_CHAPP_STATUS = 'Y'AND FIRST_UPLOAD_P1_STATUS = 'O'AND (ALL_STATUS = 'O') and " + Condstr + "");
                dt = rh.getData11(cmd1);
            }
            else
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('You do not have Permissions to Close the Status');", true);

            }
            Response.AppendHeader("Content-Disposition", "attachment; filename=" + fname);
            Response.TransmitFile(filename);
            Response.AppendHeader("X-Download-Options", "noopen");
            Response.End();
        }
        protected void CloseInvoiceStatusBtn_Click(object sender, EventArgs e)
        {
            string pproid = "";
            //string batch = "";
            string usertype = Session["GlobalUserType"].ToString();
            if ((usertype == "ADMIN") || (usertype == "SME"))
            {
                for (int i = 0; i < gvSuspectStatus.Rows.Count; i++)
                {
                    CheckBox cb = (CheckBox)gvSuspectStatus.Rows[i].FindControl("CB");
                    if (cb.Checked)
                    {
                        //batch = gvSuspectStatus.Rows[i].Cells[47].Text.ToString();
                        Label lblpartner_pro_id = (Label)gvSuspectStatus.Rows[i].Cells[16].FindControl("lblpartner_pro_id");
                        pproid = lblpartner_pro_id.Text.ToString();
                        //currency =gvSuspectStatus.Rows[i].Cells[9].Text.ToString();
                        //invNum1 =gvSuspectStatus.Rows[i].Cells[12].Text.ToString();
                        string ResolutionComments = CloseInvoiceStatusCommentsTxt.Text;
                        string processor = Session["GlobalUserID"].ToString();
                        string Inv_dt = DateTime.Now.Date.ToString("dd-MMM-yyyy");
                        DataTable dt;

                        //Neel's Code 
                        //SqlCommand cmd = new SqlCommand("Update PAYMENT_MASTER SET SENT_LOS_STATUS = 'C', RECD_LOS_STATUS = 'C',  RECD_LOS_DATE =@Inv_dt, RECD_LOS_CLOSED_BY =@processor, RECD_LOS_COMMENTS =@ResolutionComments WHERE REF_NO =@pproid");
                        //cmd.Parameters.AddWithValue("@Inv_dt", Inv_dt);
                        //cmd.Parameters.AddWithValue("@processor", processor);
                        //cmd.Parameters.AddWithValue("@ResolutionComments", ResolutionComments);
                        //cmd.Parameters.AddWithValue("@pproid", pproid);
                        //dt = rh.getData11(cmd);

                        //Neel's Code End
                        //test
                        UpdateQueryBuilder qry = new UpdateQueryBuilder();
                        qry.Table = "PAYMENT_MASTER";
                        qry.SetField("SENT_LOS_STATUS", 'C');
                        qry.SetField("RECD_LOS_STATUS", 'C');
                        qry.SetField("RECD_LOS_DATE", Inv_dt);
                        qry.SetField("RECD_LOS_CLOSED_BY", processor);
                        qry.SetField("RECD_LOS_COMMENTS", ResolutionComments);
                        qry.AddWhere("REF_NO", Comparison.Equals, pproid);
                        qry.SetDbProviderFactory(DbProviderFactories.GetFactory("System.Data.SqlClient"));
                        DbCommand command = qry.BuildCommand();
                        SqlCommand cmd1 = new SqlCommand();
                        cmd1 = (SqlCommand)command;
                        dt = rh.getData11(cmd1);
                        //test end
                        //dt = rh.getData("Update PAYMENT_MASTER SET SENT_LOS_STATUS = 'C', RECD_LOS_STATUS = 'C',  RECD_LOS_DATE = '" + Inv_dt + "', RECD_LOS_CLOSED_BY = '" + processor + "', RECD_LOS_COMMENTS = '" + ResolutionComments + "' WHERE REF_NO = '" + pproid + "'");
                    }

                }
                ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('Updated');", true);
                CloseInvoiceStatusCommentsTxt.Text = "";
            }
            else
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('You do not have Permissions to Close the Status');", true);
            }
        }


        protected void CloseVendorIdStatusBtn_Click(object sender, EventArgs e)
        {
            string pproid = "";
            //string batch = "";
            string usertype = Session["GlobalUserType"].ToString();
            if ((usertype == "ADMIN") || (usertype == "SME"))
            {
                for (int i = 0; i < gvSuspectStatus.Rows.Count; i++)
                {
                    CheckBox cb = (CheckBox)gvSuspectStatus.Rows[i].FindControl("CB");
                    if (cb.Checked)
                    {
                        //batch = gvSuspectStatus.Rows[i].Cells[47].Text.ToString();
                        Label lblpartner_pro_id = (Label)gvSuspectStatus.Rows[i].Cells[16].FindControl("lblpartner_pro_id");
                        pproid = lblpartner_pro_id.Text.ToString();
                        //currency =gvSuspectStatus.Rows[i].Cells[9].Text.ToString();
                        //invNum1 =gvSuspectStatus.Rows[i].Cells[12].Text.ToString();
                        string ResolutionComments = CloseVendorIdStatustxt.Text;
                        string processor = Session["GlobalUserID"].ToString();
                        string Inv_dt = DateTime.Now.Date.ToString("dd-MMM-yyyy");
                        DataTable dt;

                        //Neel's Code 
                        //SqlCommand cmd = new SqlCommand("Update PAYMENT_MASTER SET VENDOR_ID_STATUS = 'C', VENDOR_ID_STATUS_CLOSED_DATE =@Inv_dt, VENDOR_ID_STATUS_CLOSED_BY =@processor, VENDOR_ID_STATUS_COMMENTS =@ResolutionComments WHERE REF_NO =@pproid");
                        //cmd.Parameters.AddWithValue("@Inv_dt", Inv_dt);
                        //cmd.Parameters.AddWithValue("@processor", processor);
                        //cmd.Parameters.AddWithValue("@ResolutionComments", ResolutionComments);
                        //cmd.Parameters.AddWithValue("@pproid", pproid);
                        //dt = rh.getData11(cmd);

                        //Neel's Code End
                        //test
                        UpdateQueryBuilder qry = new UpdateQueryBuilder();
                        qry.Table = "PAYMENT_MASTER";
                        qry.SetField("VENDOR_ID_STATUS", 'C');                        
                        qry.SetField("VENDOR_ID_STATUS_CLOSED_DATE", Inv_dt);
                        qry.SetField("VENDOR_ID_STATUS_CLOSED_BY", processor);
                        qry.SetField("VENDOR_ID_STATUS_COMMENTS", ResolutionComments);
                        qry.AddWhere("REF_NO", Comparison.Equals, pproid);
                        qry.SetDbProviderFactory(DbProviderFactories.GetFactory("System.Data.SqlClient"));
                        DbCommand command = qry.BuildCommand();
                        SqlCommand cmd1 = new SqlCommand();
                        cmd1 = (SqlCommand)command;
                        dt = rh.getData11(cmd1);
                        //test end
                        //dt = rh.getData("Update PAYMENT_MASTER SET VENDOR_ID_STATUS = 'C', VENDOR_ID_STATUS_CLOSED_DATE = '" + Inv_dt + "', VENDOR_ID_STATUS_CLOSED_BY = '" + processor + "', VENDOR_ID_STATUS_COMMENTS = '" + ResolutionComments + "' WHERE REF_NO = '" + pproid + "'");
                    }

                }
                ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('Updated');", true);
                CloseVendorIdStatustxt.Text = "";
            }
            else
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('You do not have Permissions to Close the Status');", true);
            }
        }

        protected void CloseVendorIdMismatchStatusBtn_Click(object sender, EventArgs e)
        {
            string pproid = "";
            //string batch = "";
            string usertype = Session["GlobalUserType"].ToString();
            if ((usertype == "ADMIN") || (usertype == "SME"))
            {
                for (int i = 0; i < gvSuspectStatus.Rows.Count; i++)
                {
                    CheckBox cb = (CheckBox)gvSuspectStatus.Rows[i].FindControl("CB");
                    if (cb.Checked)
                    {
                        //batch = gvSuspectStatus.Rows[i].Cells[47].Text.ToString();
                        Label lblpartner_pro_id = (Label)gvSuspectStatus.Rows[i].Cells[16].FindControl("lblpartner_pro_id");
                        pproid = lblpartner_pro_id.Text.ToString();
                        ////currency =gvSuspectStatus.Rows[i].Cells[9].Text.ToString();
                        ////invNum1 =gvSuspectStatus.Rows[i].Cells[12].Text.ToString();
                        string ResolutionComments = CloseVendorIdMismatchStatusCommentstxt.Text;
                        string processor = Session["GlobalUserID"].ToString();
                        string Inv_dt = DateTime.Now.Date.ToString("dd-MMM-yyyy");
                        DataTable dt;

                        //Neel's Code 
                        //SqlCommand cmd = new SqlCommand("Update PAYMENT_MASTER SET VENDOR_NAME_MISMATCH_STATUS = 'C', VENDOR_NAME_MISMATCH_STATUS_CLOSED_DATE =@Inv_dt, VENDOR_NAME_MISMATCH_STATUS_CLOSED_BY =@processor, VENDOR_NAME_MISMATCH_STATUS_COMMENTS =@ResolutionComments WHERE REF_NO =@pproid");
                        //cmd.Parameters.AddWithValue("@Inv_dt", Inv_dt);
                        //cmd.Parameters.AddWithValue("@processor", processor);
                        //cmd.Parameters.AddWithValue("@ResolutionComments", ResolutionComments);
                        //cmd.Parameters.AddWithValue("@pproid", pproid);
                        //dt = rh.getData11(cmd);

                        //Neel's Code End
                        //test
                        UpdateQueryBuilder qry = new UpdateQueryBuilder();
                        qry.Table = "PAYMENT_MASTER";
                        qry.SetField("VENDOR_NAME_MISMATCH_STATUS", 'C');
                        qry.SetField("VENDOR_NAME_MISMATCH_STATUS_CLOSED_DATE", Inv_dt);
                        qry.SetField("VENDOR_NAME_MISMATCH_STATUS_CLOSED_BY", processor);
                        qry.SetField("VENDOR_NAME_MISMATCH_STATUS_COMMENTS", ResolutionComments);
                        qry.AddWhere("REF_NO", Comparison.Equals, pproid);
                        qry.SetDbProviderFactory(DbProviderFactories.GetFactory("System.Data.SqlClient"));
                        DbCommand command = qry.BuildCommand();
                        SqlCommand cmd1 = new SqlCommand();
                        cmd1 = (SqlCommand)command;
                        dt = rh.getData11(cmd1);
                        //test end
                        //dt = rh.getData("Update PAYMENT_MASTER SET VENDOR_NAME_MISMATCH_STATUS = 'C', VENDOR_NAME_MISMATCH_STATUS_CLOSED_DATE = '" + Inv_dt + "', VENDOR_NAME_MISMATCH_STATUS_CLOSED_BY = '" + processor + "', VENDOR_NAME_MISMATCH_STATUS_COMMENTS = '" + ResolutionComments + "' WHERE REF_NO = '" + pproid + "'");
                    }

                }
                ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('Updated');", true);
                CloseVendorIdMismatchStatusCommentstxt.Text = "";
            }
            else
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('You do not have Permissions to Close the Status');", true);
            }

        }
        protected void ThresholdApprovalStatusBtn_Click(object sender, EventArgs e)
        {
            string pproid = "";
            //string batch = "";
            string usertype = Session["GlobalUserType"].ToString();
            
              for (int i = 0; i < gvSuspectStatus.Rows.Count; i++)
                {
                    CheckBox cb = (CheckBox)gvSuspectStatus.Rows[i].FindControl("CB");
                    if (cb.Checked)
                    {
                        //batch = gvSuspectStatus.Rows[i].Cells[47].Text.ToString();
                        Label lblpartner_pro_id = (Label)gvSuspectStatus.Rows[i].Cells[16].FindControl("lblpartner_pro_id");
                        pproid = lblpartner_pro_id.Text.ToString();
                        ////currency =gvSuspectStatus.Rows[i].Cells[9].Text.ToString();
                        ////invNum1 =gvSuspectStatus.Rows[i].Cells[12].Text.ToString();
                        
                        string processor = Session["GlobalUserID"].ToString();
                        string Inv_dt = DateTime.Now.Date.ToString("dd-MMM-yyyy");
                        DataTable dt;

                        //Neel's Code 
                        //SqlCommand cmd = new SqlCommand("Update PAYMENT_MASTER SET TRESHOLD_STATUS = 'C', TRESHOLD_CLOSED_STATUS_DATE =@Inv_dt, TRESHOLD_CLOSED_BY =@processor WHERE REF_NO =@pproid");
                        //cmd.Parameters.AddWithValue("@Inv_dt", Inv_dt);
                        //cmd.Parameters.AddWithValue("@processor", processor);                        
                        //cmd.Parameters.AddWithValue("@pproid", pproid);
                        //dt = rh.getData11(cmd);

                        //Neel's Code End
                        //test
                        UpdateQueryBuilder qry = new UpdateQueryBuilder();
                        qry.Table = "PAYMENT_MASTER";
                        qry.SetField("TRESHOLD_STATUS", 'C');
                        qry.SetField("TRESHOLD_CLOSED_STATUS_DATE", Inv_dt);
                        qry.SetField("TRESHOLD_CLOSED_BY", processor);                        
                        qry.AddWhere("REF_NO", Comparison.Equals, pproid);
                        qry.SetDbProviderFactory(DbProviderFactories.GetFactory("System.Data.SqlClient"));
                        DbCommand command = qry.BuildCommand();
                        SqlCommand cmd1 = new SqlCommand();
                        cmd1 = (SqlCommand)command;
                        dt = rh.getData11(cmd1);
                        //test end

                        //dt = rh.getData("Update PAYMENT_MASTER SET TRESHOLD_STATUS = 'C', TRESHOLD_CLOSED_STATUS_DATE = '" + Inv_dt + "', TRESHOLD_CLOSED_BY = '" + processor + "' WHERE REF_NO = '" + pproid + "'"); 
                    }

                }
                ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('Updated');", true);
                
  }
        protected void ProcessingCommentsBtn_Click(object sender, EventArgs e)
        {
            string pproid = "";
            //string batch = "";
            
           
            
                for (int i = 0; i < gvSuspectStatus.Rows.Count; i++)
                {
                    CheckBox cb = (CheckBox)gvSuspectStatus.Rows[i].FindControl("CB");
                    if (cb.Checked)
                    {
                        //batch = gvSuspectStatus.Rows[i].Cells[47].Text.ToString();
                        Label lblpartner_pro_id = (Label)gvSuspectStatus.Rows[i].Cells[16].FindControl("lblpartner_pro_id");
                        pproid = lblpartner_pro_id.Text.ToString();
                        ////currency =gvSuspectStatus.Rows[i].Cells[9].Text.ToString();
                        ////invNum1 =gvSuspectStatus.Rows[i].Cells[12].Text.ToString();
                        string ResolutionComments = ProcessingCommentstxt.Text;
                        string processor = Session["GlobalUserID"].ToString();
                        string Inv_dt = DateTime.Now.Date.ToString("dd-MMM-yyyy");
                        DataTable dt;
                        //Neel's Code 
                        //SqlCommand cmd = new SqlCommand("Update PAYMENT_MASTER SET PROCESSING_COMMENTS =@ResolutionComments WHERE REF_NO =@pproid");
                        //cmd.Parameters.AddWithValue("@ResolutionComments", ResolutionComments);                        
                        //cmd.Parameters.AddWithValue("@pproid", pproid);
                        //dt = rh.getData11(cmd);

                        //Neel's Code End
                        //test
                        UpdateQueryBuilder qry = new UpdateQueryBuilder();
                        qry.Table = "PAYMENT_MASTER";
                        qry.SetField("PROCESSING_COMMENTS", ResolutionComments);                        
                        qry.AddWhere("REF_NO", Comparison.Equals, pproid);
                        qry.SetDbProviderFactory(DbProviderFactories.GetFactory("System.Data.SqlClient"));
                        DbCommand command = qry.BuildCommand();
                        SqlCommand cmd1 = new SqlCommand();
                        cmd1 = (SqlCommand)command;
                        dt = rh.getData11(cmd1);
                        //test end

                        //dt = rh.getData("Update PAYMENT_MASTER SET PROCESSING_COMMENTS = '" + ResolutionComments + "' WHERE REF_NO = '" + pproid + "'");
                    }

                }
                ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('Updated');", true);
                ProcessingCommentstxt.Text = "";
            }
           
       protected void UploadTransactionIdFileBtn_Click(object sender, EventArgs e)
        {
           string strFileCon = "";
           string processor = Session["GlobalUserID"].ToString();
           string username = Session["GlobalName"].ToString();
           string ext = System.IO.Path.GetExtension(FileUpload1.PostedFile.FileName);
           string filePath = username + "_" + FileUpload1.FileName.ToString();
           string Inv_dt = DateTime.Now.Date.ToString("dd-MMM-yyyy");
           string timeStamp = DateTime.Now.ToString("s");

           timeStamp = timeStamp.Replace(':', '-');
           timeStamp = timeStamp.Replace("T", "__");
           string batch = username + timeStamp;

           FileUpload1.SaveAs(Server.MapPath("UploadFiles/Transaction_Id_Files/" + filePath).ToString());
           string filePath1 = Server.MapPath("UploadFiles/Transaction_Id_Files/" + filePath).ToString();

           string[] validFileTypes = { "xls", "xlsx" };
       

          for (int i = 0; i < validFileTypes.Length; i++)
          {
              if (ext == "." + validFileTypes[i])
              {

                  if (validFileTypes[i] == "xls") { strFileCon = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + filePath1 + ";Extended Properties= \"Excel 8.0;HDR=Yes;IMEX=1\";"; }
                  if (validFileTypes[i] == "xlsx") { strFileCon = @"Provider=Microsoft.ACE.OLEDB.12.0;Persist Security Info=False;Data Source=" + filePath1 + ";Extended Properties=\"Excel 12.0;HDR=Yes;IMEX=1\";"; }
                  if (validFileTypes[i] == "txt") { strFileCon = filePath; }
               
                  break;
              }

          }

          System.Data.DataTable dtnew = new System.Data.DataTable();
          dtnew = rh.ReadExcelFilePProID(strFileCon, "Sheet1", false, "6", "");
          int rows = dtnew.Rows.Count;
          string result = rh.insertExcelData(dtnew, false, "6", processor,batch,"");
            
            DataTable dt;
            //dt = rh.getData("UPDATE a SET a.PAYOUT_ID = b.PAYOUT_ID, a.TRANSACTION_ID =b.TRANSACTION_ID,a.TRANSACTION_ID_GEN_DATE = b.TRANSACTION_ID_GEN_DATE,a.ENSE=b.ENSE,a.DEPT=b.DEPT,a.SF=b.SF,a.PT=b.PT,a.PL=b.PL,a.SUB_PL=b.SUB_PL,a.ACCT=b.ACCT,a.LCL_SUB_ACCT=b.LCL_SUB_ACCT,a.IC_SUB_ACCT=b.IC_SUB_ACCT,a.TRANSACTION_ID_UPlOAD_STATUS = 'C',a.TRANSACTION_ID_UPlOAD_DATE = '" + Inv_dt + "',a.TRANSACTION_ID_UPlOAD_CLOSED_BY = '" + processor + "' FROM dbo.PAYMENT_MASTER a join dbo.STAGING_PAYMENT_MASTER b on a.REF_NO=b.REF_NO and a.PAYOUT_DUE=b.PAYOUT_DUE and a.PROGRAM = b.PROGRAM;delete from dbo.STAGING_PAYMENT_MASTER where Batch = '" + batch + "'");
            //Neel's Code 
            SqlCommand cmd = new SqlCommand("UPDATE a SET a.PAYOUT_ID = b.PAYOUT_ID, a.TRANSACTION_ID =b.TRANSACTION_ID,a.TRANSACTION_ID_GEN_DATE = b.TRANSACTION_ID_GEN_DATE,a.ENSE=b.ENSE,a.DEPT=b.DEPT,a.SF=b.SF,a.PT=b.PT,a.PL=b.PL,a.SUB_PL=b.SUB_PL,a.ACCT=b.ACCT,a.LCL_SUB_ACCT=b.LCL_SUB_ACCT,a.IC_SUB_ACCT=b.IC_SUB_ACCT,a.TRANSACTION_ID_UPlOAD_STATUS = 'C',a.TRANSACTION_ID_UPlOAD_DATE =@Inv_dt,a.TRANSACTION_ID_UPlOAD_CLOSED_BY =@processor FROM dbo.PAYMENT_MASTER a join dbo.STAGING_PAYMENT_MASTER b on a.REF_NO=b.REF_NO and a.PAYOUT_DUE=b.PAYOUT_DUE and a.PROGRAM = b.PROGRAM;delete from dbo.STAGING_PAYMENT_MASTER where Batch =@batch");
            cmd.Parameters.AddWithValue("@Inv_dt", Inv_dt);
            cmd.Parameters.AddWithValue("@processor", processor);
            cmd.Parameters.AddWithValue("@batch", batch);
            dt = rh.getData11(cmd);

           //Neel's Code End
            
            ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('Updated');", true); 
  }
       protected void CloseToBeSentToAPJStatusBtn_Click(object sender, EventArgs e)
       {
           string pproid = "";
           //string batch = "";
           string usertype = Session["GlobalUserType"].ToString();
           if ((usertype == "ADMIN") || (usertype == "SME"))
           {
               for (int i = 0; i < gvSuspectStatus.Rows.Count; i++)
               {
                   CheckBox cb = (CheckBox)gvSuspectStatus.Rows[i].FindControl("CB");
                   if (cb.Checked)
                   {
                       //batch = gvSuspectStatus.Rows[i].Cells[47].Text.ToString();
                       Label lblpartner_pro_id = (Label)gvSuspectStatus.Rows[i].Cells[16].FindControl("lblpartner_pro_id");
                       pproid = lblpartner_pro_id.Text.ToString();
                       //currency =gvSuspectStatus.Rows[i].Cells[9].Text.ToString();
                       //invNum1 =gvSuspectStatus.Rows[i].Cells[12].Text.ToString();
                       string ResolutionComments = CloseToBeSentToAPJStatustxt.Text;
                       string processor = Session["GlobalUserID"].ToString();
                       string Inv_dt = DateTime.Now.Date.ToString("dd-MMM-yyyy");
                       DataTable dt;
                       //Neel's Code 
                       //SqlCommand cmd = new SqlCommand("Update PAYMENT_MASTER SET SENT_APJ_STATUS = 'C', SENT_APJ_STATUS_DATE =@Inv_dt, SENT_APJ_STATUS_CLOSED_BY =@processor, SENT_APJ_STATUS_COMMENTS =@ResolutionComments WHERE REF_NO =@pproid");
                       //cmd.Parameters.AddWithValue("@Inv_dt", Inv_dt);
                       //cmd.Parameters.AddWithValue("@processor", processor);
                       //cmd.Parameters.AddWithValue("@ResolutionComments", ResolutionComments);
                       //cmd.Parameters.AddWithValue("@pproid", pproid);
                       //dt = rh.getData11(cmd);

                       //Neel's Code End
                       //test
                       UpdateQueryBuilder qry = new UpdateQueryBuilder();
                       qry.Table = "PAYMENT_MASTER";
                       qry.SetField("SENT_APJ_STATUS", 'C');
                       qry.SetField("SENT_APJ_STATUS_DATE", Inv_dt);
                       qry.SetField("SENT_APJ_STATUS_CLOSED_BY", processor);
                       qry.SetField("PROCESSING_COMMENTS", ResolutionComments);                       
                       qry.AddWhere("REF_NO", Comparison.Equals, pproid);
                       qry.SetDbProviderFactory(DbProviderFactories.GetFactory("System.Data.SqlClient"));
                       DbCommand command = qry.BuildCommand();
                       SqlCommand cmd1 = new SqlCommand();
                       cmd1 = (SqlCommand)command;
                       dt = rh.getData11(cmd1);
                       //test end

                       //dt = rh.getData("Update PAYMENT_MASTER SET SENT_APJ_STATUS = 'C', SENT_APJ_STATUS_DATE = '" + Inv_dt + "', SENT_APJ_STATUS_CLOSED_BY = '" + processor + "', SENT_APJ_STATUS_COMMENTS = '" + ResolutionComments + "' WHERE REF_NO = '" + pproid + "'");
                   }

               }
               ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('Updated');", true);
               CloseToBeSentToAPJStatustxt.Text = "";

           }
           else
           {
               ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('You do not have Permissions to Close the Status');", true);
           }
       }
       protected void CloseWaitingForAPJStatusBtn_Click(object sender, EventArgs e)
       {
           string pproid = "";
           //string batch = "";
           string usertype = Session["GlobalUserType"].ToString();
           if ((usertype == "ADMIN") || (usertype == "SME"))
           {
               for (int i = 0; i < gvSuspectStatus.Rows.Count; i++)
               {
                   CheckBox cb = (CheckBox)gvSuspectStatus.Rows[i].FindControl("CB");
                   if (cb.Checked)
                   {
                       //batch = gvSuspectStatus.Rows[i].Cells[47].Text.ToString();
                       Label lblpartner_pro_id = (Label)gvSuspectStatus.Rows[i].Cells[16].FindControl("lblpartner_pro_id");
                       pproid = lblpartner_pro_id.Text.ToString();
                       //currency =gvSuspectStatus.Rows[i].Cells[9].Text.ToString();
                       //invNum1 =gvSuspectStatus.Rows[i].Cells[12].Text.ToString();
                       string ResolutionComments = CloseWaitingForAPJStatustxt.Text;
                       string processor = Session["GlobalUserID"].ToString();
                       string Inv_dt = DateTime.Now.Date.ToString("dd-MMM-yyyy");
                       DataTable dt;

                       //Neel's Code 
                       //SqlCommand cmd = new SqlCommand("Update PAYMENT_MASTER SET RECD_APJ_DOC_NO_STATUS = 'C', RECD_APJ_DOC_NO_DATE =@Inv_dt, RECD_APJ_DOC_NO_STATUS_CLOSED_BY =@processor, RECD_APJ_DOC_NO_STATUS_COMMENTS =@ResolutionComments WHERE REF_NO =@pproid");
                       //cmd.Parameters.AddWithValue("@Inv_dt", Inv_dt);
                       //cmd.Parameters.AddWithValue("@processor", processor);
                       //cmd.Parameters.AddWithValue("@ResolutionComments", ResolutionComments);
                       //cmd.Parameters.AddWithValue("@pproid", pproid);
                       //dt = rh.getData11(cmd);

                       //Neel's Code End
                       //test
                       UpdateQueryBuilder qry = new UpdateQueryBuilder();
                       qry.Table = "PAYMENT_MASTER";
                       qry.SetField("RECD_APJ_DOC_NO_STATUS", 'C');
                       qry.SetField("RECD_APJ_DOC_NO_DATE", Inv_dt);
                       qry.SetField("RECD_APJ_DOC_NO_STATUS_CLOSED_BY", processor);
                       qry.SetField("RECD_APJ_DOC_NO_STATUS_COMMENTS", ResolutionComments);
                       qry.AddWhere("REF_NO", Comparison.Equals, pproid);
                       qry.SetDbProviderFactory(DbProviderFactories.GetFactory("System.Data.SqlClient"));
                       DbCommand command = qry.BuildCommand();
                       SqlCommand cmd1 = new SqlCommand();
                       cmd1 = (SqlCommand)command;
                       dt = rh.getData11(cmd1);
                       //test end
                      // dt = rh.getData("Update PAYMENT_MASTER SET RECD_APJ_DOC_NO_STATUS = 'C', RECD_APJ_DOC_NO_DATE = '" + Inv_dt + "', RECD_APJ_DOC_NO_STATUS_CLOSED_BY = '" + processor + "', RECD_APJ_DOC_NO_STATUS_COMMENTS = '" + ResolutionComments + "' WHERE REF_NO = '" + pproid + "'");
                   }

               }
               ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('Updated');", true);
               CloseWaitingForAPJStatustxt.Text = "";

           }
           else
           {
               ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('You do not have Permissions to Close the Status');", true);
           }
       }
       protected void CloseWWASStatusBtn_Click(object sender, EventArgs e)
       {
           string pproid = "";
           //string batch = "";
           string usertype = Session["GlobalUserType"].ToString();
           if ((usertype == "ADMIN") || (usertype == "SME"))
           {
               for (int i = 0; i < gvSuspectStatus.Rows.Count; i++)
               {
                   CheckBox cb = (CheckBox)gvSuspectStatus.Rows[i].FindControl("CB");
                   if (cb.Checked)
                   {
                       //batch = gvSuspectStatus.Rows[i].Cells[47].Text.ToString();
                       Label lblpartner_pro_id = (Label)gvSuspectStatus.Rows[i].Cells[16].FindControl("lblpartner_pro_id");
                       pproid = lblpartner_pro_id.Text.ToString();
                       //currency =gvSuspectStatus.Rows[i].Cells[9].Text.ToString();
                       //invNum1 =gvSuspectStatus.Rows[i].Cells[12].Text.ToString();
                       string ResolutionComments = CloseWWASStatustxt.Text;
                       string processor = Session["GlobalUserID"].ToString();
                       string Inv_dt = DateTime.Now.Date.ToString("dd-MMM-yyyy");
                       DataTable dt;

                       //Neel's Code 
                       //SqlCommand cmd = new SqlCommand("Update PAYMENT_MASTER SET WWAS_STATUS = 'C', CLOSE_WWAS_STATUS_DATE =@Inv_dt, CLOSE_WWAS_STATUS_CLOSED_BY =@processor, CLOSE_WWAS_STATUS_COMMENTS =@ResolutionComments WHERE REF_NO =@pproid");
                       //cmd.Parameters.AddWithValue("@Inv_dt", Inv_dt);
                       //cmd.Parameters.AddWithValue("@processor", processor);
                       //cmd.Parameters.AddWithValue("@ResolutionComments", ResolutionComments);
                       //cmd.Parameters.AddWithValue("@pproid", pproid);
                       //dt = rh.getData11(cmd);

                       //Neel's Code End
                       //test
                       UpdateQueryBuilder qry = new UpdateQueryBuilder();
                       qry.Table = "PAYMENT_MASTER";
                       qry.SetField("WWAS_STATUS", 'C');
                       qry.SetField("CLOSE_WWAS_STATUS_DATE", Inv_dt);
                       qry.SetField("CLOSE_WWAS_STATUS_CLOSED_BY", processor);
                       qry.SetField("CLOSE_WWAS_STATUS_COMMENTS", ResolutionComments);
                       qry.AddWhere("REF_NO", Comparison.Equals, pproid);
                       qry.SetDbProviderFactory(DbProviderFactories.GetFactory("System.Data.SqlClient"));
                       DbCommand command = qry.BuildCommand();
                       SqlCommand cmd1 = new SqlCommand();
                       cmd1 = (SqlCommand)command;
                       dt = rh.getData11(cmd1);
                       //test end
                       //dt = rh.getData("Update PAYMENT_MASTER SET WWAS_STATUS = 'C', CLOSE_WWAS_STATUS_DATE = '" + Inv_dt + "', CLOSE_WWAS_STATUS_CLOSED_BY = '" + processor + "', CLOSE_WWAS_STATUS_COMMENTS = '" + ResolutionComments + "' WHERE REF_NO = '" + pproid + "'");
                   }

               }
               ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('Updated');", true);
               CloseWWASStatustxt.Text = "";

           }
           else
           {
               ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('You do not have Permissions to Close the Status');", true);
           }
       }
       protected void AllStatusClosedBtn_Click(object sender, EventArgs e)
       {
           string pproid = "";
           //string batch = "";
           string usertype = Session["GlobalUserType"].ToString();
           if ((usertype == "ADMIN") || (usertype == "SME"))
           {
               for (int i = 0; i < gvSuspectStatus.Rows.Count; i++)
               {
                   CheckBox cb = (CheckBox)gvSuspectStatus.Rows[i].FindControl("CB");
                   if (cb.Checked)
                   {
                       //batch = gvSuspectStatus.Rows[i].Cells[47].Text.ToString();
                       Label lblpartner_pro_id = (Label)gvSuspectStatus.Rows[i].Cells[16].FindControl("lblpartner_pro_id");
                       pproid = lblpartner_pro_id.Text.ToString();
                       //currency =gvSuspectStatus.Rows[i].Cells[9].Text.ToString();
                       //invNum1 =gvSuspectStatus.Rows[i].Cells[12].Text.ToString();
                       string ResolutionComments = AllStatusClosedtxt.Text;
                       string processor = Session["GlobalUserID"].ToString();
                       string Inv_dt = DateTime.Now.Date.ToString("dd-MMM-yyyy");
                       DataTable dt;

                       //Neel's Code 
                       //SqlCommand cmd = new SqlCommand("Update PAYMENT_MASTER SET ALL_STATUS = 'C', ALL_STATUS_CLOSED_DATE =@Inv_dt, ALL_STATUS_CLOSED_BY =@processor, ALL_STATUS_CLOSED_COMMENTS =@ResolutionComments WHERE REF_NO =@pproid");
                       //cmd.Parameters.AddWithValue("@Inv_dt", Inv_dt);
                       //cmd.Parameters.AddWithValue("@processor", processor);
                       //cmd.Parameters.AddWithValue("@ResolutionComments", ResolutionComments);
                       //cmd.Parameters.AddWithValue("@pproid", pproid);
                       //dt = rh.getData11(cmd);

                       //Neel's Code End
                       //test
                       UpdateQueryBuilder qry = new UpdateQueryBuilder();
                       qry.Table = "PAYMENT_MASTER";
                       qry.SetField("ALL_STATUS", 'C');
                       qry.SetField("ALL_STATUS_CLOSED_DATE", Inv_dt);
                       qry.SetField("ALL_STATUS_CLOSED_BY", processor);
                       qry.SetField("ALL_STATUS_CLOSED_COMMENTS", ResolutionComments);
                       qry.AddWhere("REF_NO", Comparison.Equals, pproid);
                       qry.SetDbProviderFactory(DbProviderFactories.GetFactory("System.Data.SqlClient"));
                       DbCommand command = qry.BuildCommand();
                       SqlCommand cmd1 = new SqlCommand();
                       cmd1 = (SqlCommand)command;
                       dt = rh.getData11(cmd1);
                       //test end
                       //dt = rh.getData("Update PAYMENT_MASTER SET ALL_STATUS = 'C', ALL_STATUS_CLOSED_DATE = '" + Inv_dt + "', ALL_STATUS_CLOSED_BY = '" + processor + "', ALL_STATUS_CLOSED_COMMENTS = '" + ResolutionComments + "' WHERE REF_NO = '" + pproid + "'");
                   }

               }
               ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('Updated');", true);
               AllStatusClosedtxt.Text = "";

           }
           else
           {
               ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('You do not have Permissions to Close the Status');", true);
           }
       }
       protected void OpenHoldPaymentStatusBtn_Click(object sender, EventArgs e)
       {
           string pproid = "";
           //string batch = "";
           for (int i = 0; i < gvSuspectStatus.Rows.Count; i++)
           {
               CheckBox cb = (CheckBox)gvSuspectStatus.Rows[i].FindControl("CB");
               if (cb.Checked)
               {
                   //batch = gvSuspectStatus.Rows[i].Cells[47].Text.ToString();
                   Label lblpartner_pro_id = (Label)gvSuspectStatus.Rows[i].Cells[16].FindControl("lblpartner_pro_id");
                   pproid = lblpartner_pro_id.Text.ToString();
                   string Payout_Id = gvSuspectStatus.Rows[i].Cells[2].Text; 
                   //currency =gvSuspectStatus.Rows[i].Cells[9].Text.ToString();
                   //invNum1 =gvSuspectStatus.Rows[i].Cells[12].Text.ToString();
                   string ResolutionComments = OpenHoldPaymentStatustxt.Text;
                   string processor = Session["GlobalUserID"].ToString();
                   string Inv_dt = DateTime.Now.Date.ToString("dd-MMM-yyyy");
                   DataTable dt;
                   //Neel's Code 
                   //SqlCommand cmd = new SqlCommand("Update PAYMENT_MASTER SET ALL_STATUS = 'H', HOLD_STATUS_CHANGE_DATE = @Inv_dt, HOLD_STATUS_CHANGE_BY = @processor, HOLD_STATUS_CHANGE_COMMENTS =@ResolutionComments WHERE PAYOUT_ID = @Payout_Id");
                   //cmd.Parameters.AddWithValue("@Inv_dt", Inv_dt);
                   //cmd.Parameters.AddWithValue("@processor", processor);
                   //cmd.Parameters.AddWithValue("@ResolutionComments", ResolutionComments);
                   //cmd.Parameters.AddWithValue("@Payout_Id", Payout_Id);
                   //dt = rh.getData11(cmd);
                   //Neel's Code End
                   //test
                   UpdateQueryBuilder qry = new UpdateQueryBuilder();
                   qry.Table = "PAYMENT_MASTER";
                   qry.SetField("ALL_STATUS", 'H');
                   qry.SetField("HOLD_STATUS_CHANGE_DATE", Inv_dt);
                   qry.SetField("HOLD_STATUS_CHANGE_BY", processor);
                   qry.SetField("HOLD_STATUS_CHANGE_COMMENTS", ResolutionComments);
                   qry.AddWhere("PAYOUT_ID", Comparison.Equals, Payout_Id);
                   qry.SetDbProviderFactory(DbProviderFactories.GetFactory("System.Data.SqlClient"));
                   DbCommand command = qry.BuildCommand();
                   SqlCommand cmd1 = new SqlCommand();
                   cmd1 = (SqlCommand)command;
                   dt = rh.getData11(cmd1);
                   //test end
                   //dt = rh.getData("Update PAYMENT_MASTER SET ALL_STATUS = 'H', HOLD_STATUS_CHANGE_DATE = '" + Inv_dt + "', HOLD_STATUS_CHANGE_BY = @processor, HOLD_STATUS_CHANGE_COMMENTS = '" + ResolutionComments + "' WHERE PAYOUT_ID = '" + Payout_Id + "'");
               }

           }
           ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('Updated');", true);
           OpenHoldPaymentStatustxt.Text = "";

       }
       protected void OpenPaymentStatusBtn_Click(object sender, EventArgs e)
       {
           string pproid = "";
           //string batch = "";
           for (int i = 0; i < gvSuspectStatus.Rows.Count; i++)
           {
               CheckBox cb = (CheckBox)gvSuspectStatus.Rows[i].FindControl("CB");
               if (cb.Checked)
               {
                   //batch = gvSuspectStatus.Rows[i].Cells[47].Text.ToString();
                   Label lblpartner_pro_id = (Label)gvSuspectStatus.Rows[i].Cells[16].FindControl("lblpartner_pro_id");
                   pproid = lblpartner_pro_id.Text.ToString();
                   string Payout_Id = gvSuspectStatus.Rows[i].Cells[2].Text; 
                   //currency =gvSuspectStatus.Rows[i].Cells[9].Text.ToString();
                   //invNum1 =gvSuspectStatus.Rows[i].Cells[12].Text.ToString();
                   string ResolutionComments = OpenPaymentStatustxt.Text;
                   string processor = Session["GlobalUserID"].ToString();
                   string Inv_dt = DateTime.Now.Date.ToString("dd-MMM-yyyy");
                   DataTable dt;
                   //Neel's Code 
                   //SqlCommand cmd = new SqlCommand("Update PAYMENT_MASTER SET ALL_STATUS = 'O', ALL_STATUS_OPEN_DATE = @Inv_dt, ALL_STATUS_OPEN_BY = @processor, ALL_STATUS_OPEN_COMMENTS =@ResolutionComments WHERE PAYOUT_ID =@Payout_Id");
                   //cmd.Parameters.AddWithValue("@Inv_dt", Inv_dt);
                   //cmd.Parameters.AddWithValue("@processor", processor);
                   //cmd.Parameters.AddWithValue("@ResolutionComments", ResolutionComments);
                   //cmd.Parameters.AddWithValue("@Payout_Id", Payout_Id);
                   //dt = rh.getData11(cmd);
                   //Neel's Code End
                   //test
                   UpdateQueryBuilder qry = new UpdateQueryBuilder();
                   qry.Table = "PAYMENT_MASTER";
                   qry.SetField("ALL_STATUS", 'O');
                   qry.SetField("ALL_STATUS_OPEN_DATE", Inv_dt);
                   qry.SetField("ALL_STATUS_OPEN_BY", processor);
                   qry.SetField("ALL_STATUS_OPEN_COMMENTS", ResolutionComments);
                   qry.AddWhere("PAYOUT_ID", Comparison.Equals, Payout_Id);
                   qry.SetDbProviderFactory(DbProviderFactories.GetFactory("System.Data.SqlClient"));
                   DbCommand command = qry.BuildCommand();
                   SqlCommand cmd1 = new SqlCommand();
                   cmd1 = (SqlCommand)command;
                   dt = rh.getData11(cmd1);
                   //test end
                   //dt = rh.getData("Update PAYMENT_MASTER SET ALL_STATUS = 'O', ALL_STATUS_OPEN_DATE = '" + Inv_dt + "', ALL_STATUS_OPEN_BY = '" + processor + "', ALL_STATUS_OPEN_COMMENTS = '" + ResolutionComments + "' WHERE PAYOUT_ID = '" + Payout_Id + "'");
               }

           }
           ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('Updated');", true);
           OpenPaymentStatustxt.Text = "";

       }
       protected void UploadInvoiceFileBtn_Click(object sender, EventArgs e)
       {
           string strFileCon = "";
           string processor = Session["GlobalUserID"].ToString();
           string username = Session["GlobalName"].ToString();
           string ext = System.IO.Path.GetExtension(FileUpload2.PostedFile.FileName);
           string filePath = username + "_" + FileUpload2.FileName.ToString();
           string Inv_dt = DateTime.Now.Date.ToString("dd-MMM-yyyy");
           string timeStamp = DateTime.Now.ToString("s");

           timeStamp = timeStamp.Replace(':', '-');
           timeStamp = timeStamp.Replace("T", "__");
           string batch = username + timeStamp;

           FileUpload2.SaveAs(Server.MapPath("UploadFiles/Invoice_Files/" + filePath).ToString());
           string filePath1 = Server.MapPath("UploadFiles/Invoice_Files/" + filePath).ToString();

           string[] validFileTypes = { "xls", "xlsx" };


           for (int i = 0; i < validFileTypes.Length; i++)
           {
               if (ext == "." + validFileTypes[i])
               {

                   if (validFileTypes[i] == "xls") { strFileCon = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + filePath1 + ";Extended Properties= \"Excel 8.0;HDR=Yes;IMEX=1\";"; }
                   if (validFileTypes[i] == "xlsx") { strFileCon = @"Provider=Microsoft.ACE.OLEDB.12.0;Persist Security Info=False;Data Source=" + filePath1 + ";Extended Properties=\"Excel 12.0;HDR=Yes;IMEX=1\";"; }
                   if (validFileTypes[i] == "txt") { strFileCon = filePath; }

                   break;
               }

           }

           System.Data.DataTable dtnew = new System.Data.DataTable();
           dtnew = rh.ReadExcelFilePProID(strFileCon, "Sheet1", false, "7", "");
           int rows = dtnew.Rows.Count;
           string result = rh.insertExcelData(dtnew, false, "7", processor, batch,"");
           
           //Duplicate Check Invoice Number
           
           DataTable dtValidation=new DataTable();
           dtValidation = rh.doValidations("Duplicate-invoice_Update");
           int count = dtValidation.Rows.Count;
           string msg = count.ToString() + " Duplicate Records Found";
           if (count == 0)
           {
               ScriptManager.RegisterClientScriptBlock(this, GetType(), "showalert", "alert('" + msg + "');", true);
           }
           else if (count != 0)
           {
               ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('" + msg + "');", true);
           }

            


           //Update Invoice Number
           DataTable dt=new DataTable();
          
          if (SelectTeamList.Text == "FC Payments")
           {

               SqlCommand cmd = new SqlCommand("UPDATE a SET a.INVOICE_NO =b.INVOICE_NO + 'CY',a.WWAS_FLAG =b.INVOICE_NO,a.REMARKS = b.REMARKS,a.INVOICE_DATE = b.INVOICE_DATE,a.RECD_LOS_STATUS = 'C',a.RECD_LOS_DATE = '" + Inv_dt + "',a.RECD_LOS_CLOSED_BY = '" + processor + "' FROM dbo.PAYMENT_MASTER a join dbo.STAGING_PAYMENT_MASTER b on a.REF_NO=b.REF_NO and a.PAYOUT_ID=b.PAYOUT_ID and a.RECD_LOS_STATUS = 'O' and a.SENT_LOS_STATUS = 'C' and a.ALL_STATUS = 'O'and b.INVOICE_NO IS NOT NULL and a.SUSPECTS_STATUS = 'C';delete from dbo.STAGING_PAYMENT_MASTER where Batch = '" + batch + "'");  
              //dt = rh.getData("UPDATE a SET a.INVOICE_NO =b.INVOICE_NO + 'CY',a.WWAS_FLAG =b.INVOICE_NO,a.REMARKS = b.REMARKS,a.INVOICE_DATE = b.INVOICE_DATE,a.RECD_LOS_STATUS = 'C',a.RECD_LOS_DATE = '" + Inv_dt + "',a.RECD_LOS_CLOSED_BY = '" + processor + "' FROM dbo.PAYMENT_MASTER a join dbo.STAGING_PAYMENT_MASTER b on a.REF_NO=b.REF_NO and a.PAYOUT_ID=b.PAYOUT_ID and a.RECD_LOS_STATUS = 'O' and a.SENT_LOS_STATUS = 'C' and a.ALL_STATUS = 'O'and b.INVOICE_NO IS NOT NULL and a.SUSPECTS_STATUS = 'C';delete from dbo.STAGING_PAYMENT_MASTER where Batch = '" + batch + "'");
               dt = rh.getData11(cmd);
               

               
           }

           else if (SelectTeamList.Text == "CI Payments")
           //ci payments
           {
           SqlCommand cmd = new SqlCommand("Update dbo.STAGING_PAYMENT_MASTER set amount_after_vat=round(PAYOUT_DUE+(PAYOUT_DUE*VAT_PERCENTAGE/100),2),tot_amount_payable=round(PAYOUT_DUE+(PAYOUT_DUE*(VAT_PERCENTAGE - WHT_PERCENTAGE)/100),2) where Batch = '" + batch + "'"); 
           //dt = rh.getData("Update dbo.STAGING_PAYMENT_MASTER set amount_after_vat=round(PAYOUT_DUE+(PAYOUT_DUE*VAT_PERCENTAGE/100),2),tot_amount_payable=round(PAYOUT_DUE+(PAYOUT_DUE*(VAT_PERCENTAGE - WHT_PERCENTAGE)/100),2) where Batch = '" + batch + "'");
           dt = rh.getData11(cmd);
           SqlCommand cmd1 = new SqlCommand("UPDATE a SET a.PAYOUT_DUE = b.PAYOUT_DUE, a.VAT_PERCENTAGE=b.VAT_PERCENTAGE,a.amount_after_vat=b.amount_after_vat,a.WHT_PERCENTAGE=b.WHT_PERCENTAGE,a.tot_amount_payable=b.tot_amount_payable,a.INVOICE_NO =(b.INVOICE_NO+a.Program+ Coalesce(a.QUARTER,'')+Coalesce(a.FISCAL_YEAR,'')),a.WWAS_FLAG =b.INVOICE_NO,a.INVOICE_DATE = b.INVOICE_DATE,a.REMARKS = b.REMARKS,a.RECD_LOS_STATUS = 'C',a.RECD_LOS_DATE = '" + Inv_dt + "',a.RECD_LOS_CLOSED_BY = '" + processor + "' FROM dbo.PAYMENT_MASTER a join dbo.STAGING_PAYMENT_MASTER b on a.REF_NO=b.REF_NO and a.PAYOUT_ID=b.PAYOUT_ID and a.PAYOUT_DUE = b.PAYOUT_DUE and a.RECD_LOS_STATUS = 'O' and a.SENT_LOS_STATUS = 'C' and a.ALL_STATUS = 'O'and b.INVOICE_NO IS NOT NULL and a.SUSPECTS_STATUS = 'C';delete from dbo.STAGING_PAYMENT_MASTER where Batch = '" + batch + "'");
           //dt = rh.getData("UPDATE a SET a.PAYOUT_DUE = b.PAYOUT_DUE, a.VAT_PERCENTAGE=b.VAT_PERCENTAGE,a.amount_after_vat=b.amount_after_vat,a.WHT_PERCENTAGE=b.WHT_PERCENTAGE,a.tot_amount_payable=b.tot_amount_payable,a.INVOICE_NO =(b.INVOICE_NO+a.Program+ Coalesce(a.QUARTER,'')+Coalesce(a.FISCAL_YEAR,'')),a.WWAS_FLAG =b.INVOICE_NO,a.INVOICE_DATE = b.INVOICE_DATE,a.REMARKS = b.REMARKS,a.RECD_LOS_STATUS = 'C',a.RECD_LOS_DATE = '" + Inv_dt + "',a.RECD_LOS_CLOSED_BY = '" + processor + "' FROM dbo.PAYMENT_MASTER a join dbo.STAGING_PAYMENT_MASTER b on a.REF_NO=b.REF_NO and a.PAYOUT_ID=b.PAYOUT_ID and a.PAYOUT_DUE = b.PAYOUT_DUE and a.RECD_LOS_STATUS = 'O' and a.SENT_LOS_STATUS = 'C' and a.ALL_STATUS = 'O'and b.INVOICE_NO IS NOT NULL and a.SUSPECTS_STATUS = 'C';delete from dbo.STAGING_PAYMENT_MASTER where Batch = '" + batch + "'");
           dt = rh.getData11(cmd1);
           }
           ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('Updated');", true);
       }
       protected void UploadSplitPaymentFileBtn_Click(object sender, EventArgs e)
       {
           string strFileCon = "";
           string processor = Session["GlobalUserID"].ToString();
           string username = Session["GlobalName"].ToString();
           string ext = System.IO.Path.GetExtension(FileUpload4.PostedFile.FileName);
           string filePath = username + "_" + FileUpload4.FileName.ToString();
           //filename = "C:\\APJ_RH_PaymentsFiles\\" + country + "_" + "PADV" + "_" + processor1 + "_" + timeStamp + ".xlsx";
           string filepathduplicate = (Server.MapPath("UploadFiles/Split_Files/" + filePath).ToString());
            if (File.Exists(filepathduplicate))
           {
               File.Delete(filepathduplicate);

           }

            
           string Inv_dt = DateTime.Now.Date.ToString("dd-MMM-yyyy");
           string timeStamp = DateTime.Now.ToString("s");

           timeStamp = timeStamp.Replace(':', '-');
           timeStamp = timeStamp.Replace("T", "__");
           string batch = username + timeStamp;

           FileUpload4.SaveAs(Server.MapPath("UploadFiles/Split_Files/" + filePath).ToString());
           string filePath1 = Server.MapPath("UploadFiles/Split_Files/" + filePath).ToString();
          

           string[] validFileTypes = { "xls", "xlsx" };


           for (int i = 0; i < validFileTypes.Length; i++)
           {
               if (ext == "." + validFileTypes[i])
               {

                   if (validFileTypes[i] == "xls") { strFileCon = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + filePath1 + ";Extended Properties= \"Excel 8.0;HDR=Yes;IMEX=1\";"; }
                   //if (validFileTypes[i] == "xlsx") { strFileCon = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + filePath1 + ";Extended Properties= \"Excel 12.0 Xml;HDR=YES;\";"; }
                   if (validFileTypes[i] == "txt") { strFileCon = filePath; }
                   if (validFileTypes[i] == "xlsx") { strFileCon = @"Provider=Microsoft.ACE.OLEDB.12.0;Persist Security Info=False;Data Source=" + filePath1 + ";Extended Properties=\"Excel 12.0;HDR=Yes;IMEX=1\";"; }
                        

                   break;
               }

           }

           System.Data.DataTable dtnew = new System.Data.DataTable();
           dtnew = rh.ReadExcelFilePProID(strFileCon, "Sheet1", false, "9", "");
            
           //test code
           //int j = 1;
           //foreach (DataColumn col in dtnew.Columns)
           //{
           //    string test = col.DataType.ToString();
           //    if (col.DataType.Name == "DateTime")
           //    {
                   
           //    }

           //    j = j + 1;

           //}

           int rows = dtnew.Rows.Count;
           string result = rh.insertExcelData(dtnew, false, "9", processor, batch,"");
           DataTable dtValidation = rh.doValidationsbatch("Split_Upld", batch.ToString());


           SqlCommand cmd = new SqlCommand("Update PAYMENT_MASTER SET SPLIT_PAYMENT_RECD_STATUS = 'C', SPLIT_PAYMENT_RECD_DATE = '" + Inv_dt + "', SPLIT_PAYMENT_RECD_DATE_CLOSED_BY = '" + processor + "' WHERE (SPLIT_PAYMENT_SENT_STATUS= 'C') and (SPLIT_PAYMENT_RECD_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (ALL_STATUS = 'O') and Batch = '" + batch + "'");
           DataTable dt;
           //dt = rh.getData("Update PAYMENT_MASTER SET SPLIT_PAYMENT_RECD_STATUS = 'C', SPLIT_PAYMENT_RECD_DATE = '" + Inv_dt + "', SPLIT_PAYMENT_RECD_DATE_CLOSED_BY = '" + processor + "' WHERE (SPLIT_PAYMENT_SENT_STATUS= 'C') and (SPLIT_PAYMENT_RECD_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (ALL_STATUS = 'O') and Batch = '" + batch + "'");
           dt = rh.getData11(cmd);
           ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('Updated');", true);
       }
       protected void UploadCreditNoteFileBtn_Click(object sender, EventArgs e)
       {
           string strFileCon = "";
           string processor = Session["GlobalUserID"].ToString();
           string username = Session["GlobalName"].ToString();
           string ext = System.IO.Path.GetExtension(FileUpload3.PostedFile.FileName);
           string filePath = username + "_" + FileUpload3.FileName.ToString();
           string Inv_dt = DateTime.Now.Date.ToString("dd-MMM-yyyy");
           string timeStamp = DateTime.Now.ToString("s");

           timeStamp = timeStamp.Replace(':', '-');
           timeStamp = timeStamp.Replace("T", "__");
           string batch = username + timeStamp;

           FileUpload3.SaveAs(Server.MapPath("UploadFiles/Credit_Note_Files/" + filePath).ToString());
           string filePath1 = Server.MapPath("UploadFiles/Credit_Note_Files/" + filePath).ToString();

           string[] validFileTypes = { "xls", "xlsx" };


           for (int i = 0; i < validFileTypes.Length; i++)
           {
               if (ext == "." + validFileTypes[i])
               {

                   if (validFileTypes[i] == "xls") { strFileCon = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + filePath1 + ";Extended Properties= \"Excel 8.0;HDR=Yes;IMEX=1\";"; }
                   if (validFileTypes[i] == "xlsx") { strFileCon = @"Provider=Microsoft.ACE.OLEDB.12.0;Persist Security Info=False;Data Source=" + filePath1 + ";Extended Properties=\"Excel 12.0;HDR=Yes;IMEX=1\";"; }
                   if (validFileTypes[i] == "txt") { strFileCon = filePath; }

                   break;
               }

           }

           System.Data.DataTable dtnew = new System.Data.DataTable();
           dtnew = rh.ReadExcelFilePProID(strFileCon, "Sheet1", false, "8", "");
           int rows = dtnew.Rows.Count;
           string result = rh.insertExcelData(dtnew, false, "8", processor, batch,"");

           DataTable dt;
           SqlCommand cmd = new SqlCommand("UPDATE a SET a.CLEARING_DOC_NO =b.CLEARING_DOC_NO,a.CHECK_REFERENCE = b.CHECK_REFERENCE,a.VALUE_DATE = b.VALUE_DATE,a.CLEARING_DATE = b.CLEARING_DATE,a.SAP_DOC_NO = b.SAP_DOC_NO,a.REMARKS_FRM_PMT_OFFICE = b.REMARKS_FRM_PMT_OFFICE,a.RECD_APJ_DOC_NO_STATUS = 'C',a.RECD_APJ_CLOSE_LOOP_STATUS = 'C',a.RECD_APJ_CLOSE_LOOP_DATE = '" + Inv_dt + "',a.RECD_APJ_DOC_NO_DATE = '" + Inv_dt + "',a.RECD_APJ_DOC_NO_STATUS_CLOSED_BY = '" + processor + "' FROM dbo.PAYMENT_MASTER a join dbo.STAGING_PAYMENT_MASTER b on a.REF_NO=b.REF_NO and a.PAYOUT_ID=b.PAYOUT_ID AND a.SENT_APJ_STATUS = 'C' AND a.RECD_APJ_DOC_NO_STATUS = 'O' AND a.ALL_STATUS = 'O' and b.CLEARING_DOC_NO IS NOT NULL;delete from dbo.STAGING_PAYMENT_MASTER where Batch = '" + batch + "'"); 
           //dt = rh.getData("UPDATE a SET a.CLEARING_DOC_NO =b.CLEARING_DOC_NO,a.CHECK_REFERENCE = b.CHECK_REFERENCE,a.VALUE_DATE = b.VALUE_DATE,a.CLEARING_DATE = b.CLEARING_DATE,a.SAP_DOC_NO = b.SAP_DOC_NO,a.REMARKS_FRM_PMT_OFFICE = b.REMARKS_FRM_PMT_OFFICE,a.RECD_APJ_DOC_NO_STATUS = 'C',a.RECD_APJ_CLOSE_LOOP_STATUS = 'C',a.RECD_APJ_CLOSE_LOOP_DATE = '" + Inv_dt + "',a.RECD_APJ_DOC_NO_DATE = '" + Inv_dt + "',a.RECD_APJ_DOC_NO_STATUS_CLOSED_BY = '" + processor + "' FROM dbo.PAYMENT_MASTER a join dbo.STAGING_PAYMENT_MASTER b on a.REF_NO=b.REF_NO and a.PAYOUT_ID=b.PAYOUT_ID AND a.SENT_APJ_STATUS = 'C' AND a.RECD_APJ_DOC_NO_STATUS = 'O' AND a.ALL_STATUS = 'O' and b.CLEARING_DOC_NO IS NOT NULL;delete from dbo.STAGING_PAYMENT_MASTER where Batch = '" + batch + "'");
           dt = rh.getData11(cmd);
           ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('Updated');", true);
       }
       protected void UpdateWWASManagerBtn_Click(object sender, EventArgs e)
       
         
      {
         
           string pproid = "";
           //string Payout_Id = "";
           //string batch = "";
           for (int i = 0; i < gvSuspectStatus.Rows.Count; i++)
           {
               CheckBox cb = (CheckBox)gvSuspectStatus.Rows[i].FindControl("CB");
               if (cb.Checked)
               {
                   //batch = gvSuspectStatus.Rows[i].Cells[47].Text.ToString();
                   Label lblpartner_pro_id = (Label)gvSuspectStatus.Rows[i].Cells[16].FindControl("lblpartner_pro_id");
                   pproid = lblpartner_pro_id.Text.ToString();
                   string Payout_Id = gvSuspectStatus.Rows[i].Cells[2].Text; 
                   //currency =gvSuspectStatus.Rows[i].Cells[9].Text.ToString();
                   //invNum1 =gvSuspectStatus.Rows[i].Cells[12].Text.ToString();
                   string processor = Session["GlobalUserID"].ToString();
                   string Inv_dt = DateTime.Now.Date.ToString("dd-MMM-yyyy");
                   string OldWWASManagerEmaild1 = gvSuspectStatus.Rows[i].Cells[20].Text;                   
                   string OldWWASManagerEmaild = OldWWASManagerEmaildtxt.Text;
                   string WWASApprovalReceivedDate = txtWWASApprovalReceivedDate.Text;
                   string NewWWASManagerEmaild = NewWWASManagerEmaildtxt.Text;
                   string ResolutionComments = WWASManagerCommentstxt.Text;

                   if (OldWWASManagerEmaild1 == OldWWASManagerEmaild)
                   {
                       DataTable dt;
                       //SqlCommand cmd = new SqlCommand("Update PAYMENT_MASTER SET WWAS_OLD_MANGER =@OldWWASManagerEmaild, WWAS_APPROVAL_DATE =@WWASApprovalReceivedDate,  APPROVING_MGR =@NewWWASManagerEmaild, WWAS_MANAGER_UPDATED_BY =@processor, WWAS_MANAGER_UPDATE_DATE =@Inv_dt,WWAS_COMMENTS =@ResolutionComments  WHERE PAYOUT_ID =@Payout_Id and WWAS_STATUS = 'O'");
                       //cmd.Parameters.AddWithValue("@OldWWASManagerEmaild", OldWWASManagerEmaild);
                       //cmd.Parameters.AddWithValue("@WWASApprovalReceivedDate", WWASApprovalReceivedDate);
                       //cmd.Parameters.AddWithValue("@NewWWASManagerEmaild", NewWWASManagerEmaild);
                       //cmd.Parameters.AddWithValue("@processor", processor);
                       //cmd.Parameters.AddWithValue("@Inv_dt", Inv_dt);
                       //cmd.Parameters.AddWithValue("@ResolutionComments", ResolutionComments);
                       //cmd.Parameters.AddWithValue("@Payout_Id", Payout_Id);
                       //dt=rh.getData11(cmd);
                       //test
                       UpdateQueryBuilder qry = new UpdateQueryBuilder();
                       qry.Table = "PAYMENT_MASTER";
                       qry.SetField("WWAS_OLD_MANGER", OldWWASManagerEmaild);
                       qry.SetField("WWAS_APPROVAL_DATE", WWASApprovalReceivedDate);
                       qry.SetField("APPROVING_MGR", NewWWASManagerEmaild);
                       qry.SetField("WWAS_MANAGER_UPDATED_BY", processor);
                       qry.SetField("WWAS_MANAGER_UPDATE_DATE", Inv_dt);
                       qry.SetField("WWAS_COMMENTS", ResolutionComments);
                       qry.AddWhere("PAYOUT_ID", Comparison.Equals, Payout_Id);
                       qry.AddWhere("WWAS_STATUS", Comparison.Equals, 'O');

                       qry.SetDbProviderFactory(DbProviderFactories.GetFactory("System.Data.SqlClient"));
                       DbCommand command = qry.BuildCommand();
                       SqlCommand cmd1 = new SqlCommand();
                       cmd1 = (SqlCommand)command;
                       dt = rh.getData11(cmd1);
                       //test end
                       //dt = rh.getData("Update PAYMENT_MASTER SET WWAS_OLD_MANGER = '" + OldWWASManagerEmaild + "', WWAS_APPROVAL_DATE = '" + WWASApprovalReceivedDate + "',  APPROVING_MGR = '" + NewWWASManagerEmaild + "', WWAS_MANAGER_UPDATED_BY = '" + processor + "', WWAS_MANAGER_UPDATE_DATE = '" + Inv_dt + "',WWAS_COMMENTS = '" + ResolutionComments + "'  WHERE PAYOUT_ID = '" + Payout_Id + "' and WWAS_STATUS = 'O'");
                       DataTable dtValidation = rh.doValidations("WWAS_Approval");
                   }
                   else
                   {
                       ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('OldWWASManagerEmaild Mismatch');", true);
                       
                   
                   }

                  
               }
               
               
           }
           ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('Updated');", true);
           OldWWASManagerEmaildtxt.Text = "";
           txtWWASApprovalReceivedDate.Text = "";
           NewWWASManagerEmaildtxt.Text = "";
           WWASManagerCommentstxt.Text = "";
 

       }
       protected void GenerateMailToWWASBtn_Click(object sender, EventArgs e)
       {
           string filename = "";
           string fname = "";

           filename = Server.MapPath("MailTemplate/" + "Managers Approval for ID -.msg");
               
           fname = "Managers Approval for ID -" + ".msg";
           
           Response.ContentType = "application/vnd.ms-outlook";
           Response.AppendHeader("Content-Disposition", "attachment; filename=" + fname);
           Response.TransmitFile(filename);
           Response.AppendHeader("X-Download-Options", "noopen");
           Response.End();
}

       protected void GenerateFilesBtn_Click(object sender, EventArgs e)
       {

           DataTable dtValidation = rh.doValidations("Non-invoice_Update");

           if (SelectTeamList.Text != "")
           {
               if (SelectTeamList.Text == "Select the Team Name")
               {
                   Condstr = " 1=1";
               }
               else
               {


                   Condstr = Condstr + "AND Team_Name = '" + SelectTeamList.Text + "'";
               }

           }

           if (SelectProgramList.Text != "Select the Program Name")
           {
               Condstr = Condstr + " AND Program = '" + SelectProgramList.Text + "'";
           }

           if (SelectCountryCodeList.Text != "Select the Country Code")
           {
               Condstr = Condstr + " AND COUNTRY_CODE = '" + SelectCountryCodeList.Text + "'";
           }
           if (SelectPaymentModeList.Text != "Select the Payment Mode")
           {
               Condstr = Condstr + " AND PAYMENT_MODE = '" + SelectPaymentModeList.Text + "'";
           }


           if (GenerateFilesList.Text == "CREDIT NOTES")

           {

               //string strQuery = "";
               SqlCommand cmd = new SqlCommand();

               if (SelectTeamList.SelectedValue == "FC Payments")
               {
                   //strQuery = "SELECT REF_NO, PAYOUT_ID, TRANSACTION_ID, TRANSACTION_ID_GEN_DATE, PROGRAM, COUNTRY, FISCAL_YEAR, QUARTER, MONTH, PARTNER_ID, PARTNER_NAME, PARTNER_ENG_NAME, CURR, PAYOUT_DUE, VAT_PERCENTAGE, AMOUNT_AFTER_VAT, WHT_PERCENTAGE, TOT_AMOUNT_PAYABLE, APPROVING_MGR, PAYMENT_MODE, VENDOR_NO, ECLIPSE_CODE, MCC_CODE, CREDIT_NOTE_PL, REMARKS, NULL AS [Credit Note No], NULL AS [Credit Note Date (MM/DD/YYYY)], NULL AS [Order Ref No], NULL AS [Credit Note Currency Type],NULL AS [Credit Note Amount (After Tax)],NULL AS [Remarks from ITH/CRO]  FROM PAYMENT_MASTER WHERE (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (PAYMENT_MODE = 'CREDIT NOTES') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and " + Condstr + "";
                   cmd = new SqlCommand("SELECT REF_NO, PAYOUT_ID, TRANSACTION_ID, TRANSACTION_ID_GEN_DATE, PROGRAM, COUNTRY, FISCAL_YEAR, QUARTER, MONTH, PARTNER_ID, PARTNER_NAME, PARTNER_ENG_NAME, CURR, PAYOUT_DUE, VAT_PERCENTAGE, AMOUNT_AFTER_VAT, WHT_PERCENTAGE, TOT_AMOUNT_PAYABLE, APPROVING_MGR, PAYMENT_MODE, VENDOR_NO, ECLIPSE_CODE, MCC_CODE, CREDIT_NOTE_PL, REMARKS, NULL AS [Credit Note No], NULL AS [Credit Note Date (MM/DD/YYYY)], NULL AS [Order Ref No], NULL AS [Credit Note Currency Type],NULL AS [Credit Note Amount (After Tax)],NULL AS [Remarks from ITH/CRO]  FROM PAYMENT_MASTER WHERE (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (PAYMENT_MODE = 'CREDIT NOTES') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and " + Condstr + "");
               }
               else 
               {
                   //strQuery = "SELECT REF_NO, PAYOUT_ID, TRANSACTION_ID, TRANSACTION_ID_GEN_DATE, PROGRAM, COUNTRY, FISCAL_YEAR, QUARTER, MONTH, PARTNER_ID, PARTNER_NAME, PARTNER_ENG_NAME, CURR, PAYOUT_DUE, VAT_PERCENTAGE, AMOUNT_AFTER_VAT, WHT_PERCENTAGE, TOT_AMOUNT_PAYABLE, APPROVING_MGR, PAYMENT_MODE, VENDOR_NO, ECLIPSE_CODE, MCC_CODE, CREDIT_NOTE_PL, REMARKS, NULL AS [Credit Note No], NULL AS [Credit Note Date (MM/DD/YYYY)], NULL AS [Order Ref No], NULL AS [Credit Note Currency Type],NULL AS [Credit Note Amount (After Tax)],NULL AS [Remarks from ITH/CRO]  FROM PAYMENT_MASTER WHERE (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (FIRST_UPLOAD_P1_STATUS = 'C') AND (PAYMENT_MODE = 'CREDIT NOTES') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and " + Condstr + "";
                   cmd = new SqlCommand("SELECT REF_NO, PAYOUT_ID, TRANSACTION_ID, TRANSACTION_ID_GEN_DATE, PROGRAM, COUNTRY, FISCAL_YEAR, QUARTER, MONTH, PARTNER_ID, PARTNER_NAME, PARTNER_ENG_NAME, CURR, PAYOUT_DUE, VAT_PERCENTAGE, AMOUNT_AFTER_VAT, WHT_PERCENTAGE, TOT_AMOUNT_PAYABLE, APPROVING_MGR, PAYMENT_MODE, VENDOR_NO, ECLIPSE_CODE, MCC_CODE, CREDIT_NOTE_PL, REMARKS, NULL AS [Credit Note No], NULL AS [Credit Note Date (MM/DD/YYYY)], NULL AS [Order Ref No], NULL AS [Credit Note Currency Type],NULL AS [Credit Note Amount (After Tax)],NULL AS [Remarks from ITH/CRO]  FROM PAYMENT_MASTER WHERE (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (FIRST_UPLOAD_P1_STATUS = 'C') AND (PAYMENT_MODE = 'CREDIT NOTES') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and " + Condstr + "");
               }

               



               //DataTable dt = rh.getData(strQuery);
               DataTable dt = rh.getData11(cmd);
               Session["SSdt"] = dt;
               //string excelfilename = Server.MapPath("ExportToExcelFiles/") + Session["GlobalName"] + ".xlsx";
               string processor1 = Session["GlobalName"].ToString();
               processor1 = processor1.Replace('\\', '-');

               string country = "";
               string program_name = "";

               //country = gvSuspectStatus.Rows[0].Cells[8].Text.ToString();
               country = SelectCountryCodeList.Text.ToString();
               program_name = SelectProgramList.Text.ToString();

               string timeStamp = DateTime.Now.ToString("s");

               timeStamp = timeStamp.Replace(':', '-');
               timeStamp = timeStamp.Replace("T", "__");
               //currentWorksheet.Cells[1, 1] = timeStamp;
               //currentWorksheet.Cells[1, 2] = "No error occured";

               string filename = "";
               string fname = "";


               if (SelectTeamList.Text == "FC Payments")
               {
                   filename = "C:\\APJ_RH_PaymentsFiles\\Generate_Credit_Note_Files\\" + country + "_" + "PADVCN" + "_" + processor1 + "_" + timeStamp + ".xlsx";

                   fname = country + "_" + "PADVCN" + "_" + processor1 + "_" + timeStamp + ".xlsx";
               }

               else
               {
                   filename = "C:\\APJ_RH_PaymentsFiles\\Generate_Credit_Note_Files\\" + country + "_" + "PADVCN" + "_" + program_name + "_" + processor1 + "_" + timeStamp + ".xlsx";
                   fname = country + "_" + "PADVCN" + "_" + program_name + "_" + processor1 + "_" + timeStamp + ".xlsx";
               }


               if (File.Exists(filename))
               {
                   File.Delete(filename);

               }


               string imported = rh.ExportToExcel(dt, filename);
               string processor = Session["GlobalUserID"].ToString();


               string Inv_dt = DateTime.Now.Date.ToString("dd-MMM-yyyy");
               
               if (SelectTeamList.Text == "FC Payments")
               {
                   SqlCommand cmd1 = new SqlCommand("Update PAYMENT_MASTER SET SENT_APJ_STATUS = 'C', SENT_APJ_STATUS_DATE = '" + Inv_dt + "', SENT_APJ_STATUS_CLOSED_BY = '" + processor + "' WHERE (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (PAYMENT_MODE = 'CREDIT NOTES') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and " + Condstr + ""); 
                   //dt = rh.getData("Update PAYMENT_MASTER SET SENT_APJ_STATUS = 'C', SENT_APJ_STATUS_DATE = '" + Inv_dt + "', SENT_APJ_STATUS_CLOSED_BY = '" + processor + "' WHERE (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (PAYMENT_MODE = 'CREDIT NOTES') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and " + Condstr + "");
                   dt = rh.getData11(cmd1); 
               }
               else
               {
                   SqlCommand cmd1 = new SqlCommand("Update PAYMENT_MASTER SET SENT_APJ_STATUS = 'C', SENT_APJ_STATUS_DATE = '" + Inv_dt + "', SENT_APJ_STATUS_CLOSED_BY = '" + processor + "' WHERE (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (FIRST_UPLOAD_P1_STATUS = 'C') AND (PAYMENT_MODE = 'CREDIT NOTES') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and " + Condstr + ""); 
                   //dt = rh.getData("Update PAYMENT_MASTER SET SENT_APJ_STATUS = 'C', SENT_APJ_STATUS_DATE = '" + Inv_dt + "', SENT_APJ_STATUS_CLOSED_BY = '" + processor + "' WHERE (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (FIRST_UPLOAD_P1_STATUS = 'C') AND (PAYMENT_MODE = 'CREDIT NOTES') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and " + Condstr + "");
                   dt = rh.getData11(cmd1); 
               }
               Response.AppendHeader("Content-Disposition", "attachment; filename=" + fname);
               Response.TransmitFile(filename);
               Response.AppendHeader("X-Download-Options", "noopen");
               Response.End();
           
           
           }

           else if (GenerateFilesList.Text == "LH1 FILE")
           {

               Excel.Application ExcelApp = new Excel.Application();
               //Excel.Workbook ExcelWb = ExcelApp.Workbooks.Add(Excel.XlWBATemplate.xlWBATWorksheet);
               ExcelApp.Application.DisplayAlerts = false;
               ExcelApp.DisplayAlerts = false;
               //Excel.Workbook ExcelWb = ExcelApp.Workbooks.Add();
               Excel.Workbook ExcelWb = ExcelApp.Workbooks.Open(Server.MapPath("docs/") + "SAP_Wizard_LH1.xlsm");
               Excel.Worksheet ExcelWs = ExcelWb.Worksheets[1];
               //string strQuery = "";
               SqlCommand cmd = new SqlCommand(); 
               if (SelectTeamList.SelectedValue == "FC Payments")
               {
                   if ((SelectCountryCodeList.SelectedValue == "KR") || (SelectCountryCodeList.SelectedValue == "VN") || (SelectCountryCodeList.SelectedValue == "ID"))
                   {
                       //strQuery = "SELECT SENT_APJ_STATUS, PROGRAM,QUARTER,FISCAL_YEAR,PAYOUT_ID, COMPANY_CODE, COUNTRY_CODE, WHT_TAX_CODE, VENDOR_NO, TRANSACTION_ID_GEN_DATE, INVOICE_NO, INVOICE_DATE, (sum(round(PAYOUT_DUE,0))) AS sum_amt_Payout, (SUM(round(AMOUNT_AFTER_VAT,0))) AS sum_amt_vat, CURR, REMARKS FROM PAYMENT_MASTER WHERE (SENT_APJ_STATUS_TYPE = 'LH1') AND  (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and " + Condstr + " GROUP BY SENT_APJ_STATUS, PROGRAM,QUARTER,FISCAL_YEAR,PAYOUT_ID, COUNTRY_CODE, COMPANY_CODE, WHT_TAX_CODE, VENDOR_NO, TRANSACTION_ID_GEN_DATE, INVOICE_NO,INVOICE_DATE,CURR,REMARKS";
                       cmd = new SqlCommand("SELECT SENT_APJ_STATUS, PROGRAM,QUARTER,FISCAL_YEAR,PAYOUT_ID, COMPANY_CODE, COUNTRY_CODE, WHT_TAX_CODE, VENDOR_NO, TRANSACTION_ID_GEN_DATE, INVOICE_NO, INVOICE_DATE, (sum(round(PAYOUT_DUE,0))) AS sum_amt_Payout, (SUM(round(AMOUNT_AFTER_VAT,0))) AS sum_amt_vat, CURR, REMARKS FROM PAYMENT_MASTER WHERE (SENT_APJ_STATUS_TYPE = 'LH1') AND  (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and " + Condstr + " GROUP BY SENT_APJ_STATUS, PROGRAM,QUARTER,FISCAL_YEAR,PAYOUT_ID, COUNTRY_CODE, COMPANY_CODE, WHT_TAX_CODE, VENDOR_NO, TRANSACTION_ID_GEN_DATE, INVOICE_NO,INVOICE_DATE,CURR,REMARKS");
                   }

                   else
                   //strQuery = "SELECT SENT_APJ_STATUS, PROGRAM,QUARTER,FISCAL_YEAR,PAYOUT_ID, COMPANY_CODE, COUNTRY_CODE, WHT_TAX_CODE, VENDOR_NO, TRANSACTION_ID_GEN_DATE, INVOICE_NO, INVOICE_DATE, SUM(PAYOUT_DUE) AS sum_amt_Payout, SUM(AMOUNT_AFTER_VAT) AS sum_amt_vat, CURR, REMARKS FROM PAYMENT_MASTER WHERE (SENT_APJ_STATUS_TYPE = 'LH1') AND  (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and " + Condstr + " GROUP BY SENT_APJ_STATUS, PROGRAM,QUARTER,FISCAL_YEAR,PAYOUT_ID, COUNTRY_CODE, COMPANY_CODE, WHT_TAX_CODE, VENDOR_NO, TRANSACTION_ID_GEN_DATE, INVOICE_NO,INVOICE_DATE,CURR,REMARKS";
                   {
                       cmd = new SqlCommand("SELECT SENT_APJ_STATUS, PROGRAM,QUARTER,FISCAL_YEAR,PAYOUT_ID, COMPANY_CODE, COUNTRY_CODE, WHT_TAX_CODE, VENDOR_NO, TRANSACTION_ID_GEN_DATE, INVOICE_NO, INVOICE_DATE, SUM(PAYOUT_DUE) AS sum_amt_Payout, SUM(AMOUNT_AFTER_VAT) AS sum_amt_vat, CURR, REMARKS FROM PAYMENT_MASTER WHERE (SENT_APJ_STATUS_TYPE = 'LH1') AND  (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and " + Condstr + " GROUP BY SENT_APJ_STATUS, PROGRAM,QUARTER,FISCAL_YEAR,PAYOUT_ID, COUNTRY_CODE, COMPANY_CODE, WHT_TAX_CODE, VENDOR_NO, TRANSACTION_ID_GEN_DATE, INVOICE_NO,INVOICE_DATE,CURR,REMARKS");
                   }
                   

               }
               else if (SelectTeamList.SelectedValue == "CI Payments")
               {
                   if ((SelectCountryCodeList.SelectedValue == "KR") || (SelectCountryCodeList.SelectedValue == "VN") || (SelectCountryCodeList.SelectedValue == "ID"))
                   {

                       //strQuery = "SELECT SENT_APJ_STATUS, PROGRAM,QUARTER,FISCAL_YEAR, PAYOUT_ID, COMPANY_CODE, COUNTRY_CODE, WHT_TAX_CODE, VENDOR_NO, TRANSACTION_ID_GEN_DATE, INVOICE_NO, INVOICE_DATE, (sum(round(PAYOUT_DUE,0))) AS sum_amt_Payout, (SUM(round(AMOUNT_AFTER_VAT,0))) AS sum_amt_vat, CURR, REMARKS FROM PAYMENT_MASTER WHERE (SENT_APJ_STATUS_TYPE = 'LH1') AND  (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (FIRST_UPLOAD_P1_STATUS = 'C') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and " + Condstr + " GROUP BY SENT_APJ_STATUS, PROGRAM,QUARTER,FISCAL_YEAR, PAYOUT_ID, COUNTRY_CODE, COMPANY_CODE, WHT_TAX_CODE, VENDOR_NO, TRANSACTION_ID_GEN_DATE, INVOICE_NO,INVOICE_DATE,CURR,REMARKS";
                       cmd = new SqlCommand("SELECT SENT_APJ_STATUS, PROGRAM,QUARTER,FISCAL_YEAR, PAYOUT_ID, COMPANY_CODE, COUNTRY_CODE, WHT_TAX_CODE, VENDOR_NO, TRANSACTION_ID_GEN_DATE, INVOICE_NO, INVOICE_DATE, (sum(round(PAYOUT_DUE,0))) AS sum_amt_Payout, (SUM(round(AMOUNT_AFTER_VAT,0))) AS sum_amt_vat, CURR, REMARKS FROM PAYMENT_MASTER WHERE (SENT_APJ_STATUS_TYPE = 'LH1') AND  (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (FIRST_UPLOAD_P1_STATUS = 'C') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and " + Condstr + " GROUP BY SENT_APJ_STATUS, PROGRAM,QUARTER,FISCAL_YEAR, PAYOUT_ID, COUNTRY_CODE, COMPANY_CODE, WHT_TAX_CODE, VENDOR_NO, TRANSACTION_ID_GEN_DATE, INVOICE_NO,INVOICE_DATE,CURR,REMARKS");
                   }

                   else
                   //strQuery = "SELECT SENT_APJ_STATUS, PROGRAM,QUARTER,FISCAL_YEAR, PAYOUT_ID, COMPANY_CODE, COUNTRY_CODE, WHT_TAX_CODE, VENDOR_NO, TRANSACTION_ID_GEN_DATE, INVOICE_NO, INVOICE_DATE, SUM(PAYOUT_DUE) AS sum_amt_Payout, SUM(AMOUNT_AFTER_VAT) AS sum_amt_vat, CURR, REMARKS FROM PAYMENT_MASTER WHERE (SENT_APJ_STATUS_TYPE = 'LH1') AND  (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (FIRST_UPLOAD_P1_STATUS = 'C') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and " + Condstr + " GROUP BY SENT_APJ_STATUS, PROGRAM,QUARTER,FISCAL_YEAR, PAYOUT_ID, COUNTRY_CODE, COMPANY_CODE, WHT_TAX_CODE, VENDOR_NO, TRANSACTION_ID_GEN_DATE, INVOICE_NO,INVOICE_DATE,CURR,REMARKS";
                   {
                       cmd = new SqlCommand("SELECT SENT_APJ_STATUS, PROGRAM,QUARTER,FISCAL_YEAR, PAYOUT_ID, COMPANY_CODE, COUNTRY_CODE, WHT_TAX_CODE, VENDOR_NO, TRANSACTION_ID_GEN_DATE, INVOICE_NO, INVOICE_DATE, SUM(PAYOUT_DUE) AS sum_amt_Payout, SUM(AMOUNT_AFTER_VAT) AS sum_amt_vat, CURR, REMARKS FROM PAYMENT_MASTER WHERE (SENT_APJ_STATUS_TYPE = 'LH1') AND  (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (FIRST_UPLOAD_P1_STATUS = 'C') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and " + Condstr + " GROUP BY SENT_APJ_STATUS, PROGRAM,QUARTER,FISCAL_YEAR, PAYOUT_ID, COUNTRY_CODE, COMPANY_CODE, WHT_TAX_CODE, VENDOR_NO, TRANSACTION_ID_GEN_DATE, INVOICE_NO,INVOICE_DATE,CURR,REMARKS");
                   }
               }

               //else if (SelectTeamList.SelectedValue == "FC Payments")
               //{
               //    strQuery = "SELECT SENT_APJ_STATUS, PROGRAM,QUARTER,FISCAL_YEAR,PAYOUT_ID, COMPANY_CODE, COUNTRY_CODE, WHT_TAX_CODE, VENDOR_NO, TRANSACTION_ID_GEN_DATE, INVOICE_NO, INVOICE_DATE, SUM(PAYOUT_DUE) AS sum_amt_Payout, SUM(AMOUNT_AFTER_VAT) AS sum_amt_vat, CURR, REMARKS FROM PAYMENT_MASTER WHERE (SENT_APJ_STATUS_TYPE = 'LH1') AND  (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and " + Condstr + " GROUP BY SENT_APJ_STATUS, PROGRAM,QUARTER,FISCAL_YEAR,PAYOUT_ID, COUNTRY_CODE, COMPANY_CODE, WHT_TAX_CODE, VENDOR_NO, TRANSACTION_ID_GEN_DATE, INVOICE_NO,INVOICE_DATE,CURR,REMARKS";
               //}
               //else if (SelectTeamList.SelectedValue == "CI Payments")
               //{
               //    strQuery = "SELECT SENT_APJ_STATUS, PROGRAM,QUARTER,FISCAL_YEAR, PAYOUT_ID, COMPANY_CODE, COUNTRY_CODE, WHT_TAX_CODE, VENDOR_NO, TRANSACTION_ID_GEN_DATE, INVOICE_NO, INVOICE_DATE, SUM(PAYOUT_DUE) AS sum_amt_Payout, SUM(AMOUNT_AFTER_VAT) AS sum_amt_vat, CURR, REMARKS FROM PAYMENT_MASTER WHERE (SENT_APJ_STATUS_TYPE = 'LH1') AND  (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (FIRST_UPLOAD_P1_STATUS = 'C') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and " + Condstr + " GROUP BY SENT_APJ_STATUS, PROGRAM,QUARTER,FISCAL_YEAR, PAYOUT_ID, COUNTRY_CODE, COMPANY_CODE, WHT_TAX_CODE, VENDOR_NO, TRANSACTION_ID_GEN_DATE, INVOICE_NO,INVOICE_DATE,CURR,REMARKS";
               //}
               
               
               
               
               
               
               //DataTable dt = rh.getData(strQuery);
               DataTable dt = rh.getData11(cmd);
               int rows = 5;

              try
              {
                  for (int i = 0; i < dt.Rows.Count; i++)
                  {
                      
                      string COMPANY_CODE = dt.Rows[i]["COMPANY_CODE"].ToString();
                      string VENDOR_NUMBER = dt.Rows[i]["VENDOR_NO"].ToString();
                      DateTime INVOICE_DATE = Convert.ToDateTime(dt.Rows[i]["TRANSACTION_ID_GEN_DATE"].ToString());
                      string invoiceDate1 = INVOICE_DATE.ToString("dd.MM.yyyy");
                      string INVOICE_NUMBER = dt.Rows[i]["INVOICE_NO"].ToString();
                      string program = dt.Rows[i]["PROGRAM"].ToString();
                      string DOC_HEADER_TEXT = "PDM" + "-" + program;
                      string WHT_CODE = dt.Rows[i]["WHT_TAX_CODE"].ToString();
                      string VAT_AMOUNT = dt.Rows[i]["sum_amt_vat"].ToString();
                      string GROSS_AMOUNT = dt.Rows[i]["sum_amt_Payout"].ToString();
                      string CURRENCY = dt.Rows[i]["CURR"].ToString();
                      //string VAT_AMOUNT = dt.Rows[i]["sum_amt_vat"].ToString();
                      string PERIOD_SHORT = "";
                      if (COMPANY_CODE == "ID99")
                      {
                          PERIOD_SHORT = dt.Rows[i]["REMARKS"].ToString();
                      }
                     
                      else
                      {
                          PERIOD_SHORT = dt.Rows[i]["PROGRAM"].ToString() + dt.Rows[i]["QUARTER"].ToString() + dt.Rows[i]["FISCAL_YEAR"].ToString();
                      }

                      //string ref_no = dt.Rows[i]["REF_NO"].ToString();
                      string PAYOUT_ID = dt.Rows[i]["PAYOUT_ID"].ToString();

                      decimal abc = Convert.ToDecimal(GROSS_AMOUNT);
                          decimal abd =Convert.ToDecimal(VAT_AMOUNT);
                          decimal abe = abd - abc;

                      ExcelWs.Cells[rows, 2] = COMPANY_CODE;
                      ExcelWs.Cells[rows, 3] = VENDOR_NUMBER;
                      //ExcelWs.Cells[rows, 4] = InvoiceDate;
                      ExcelWs.Cells[rows, 4] = invoiceDate1;
                      ExcelWs.Cells[rows, 5] = INVOICE_NUMBER;
                      ExcelWs.Cells[rows, 6] = DOC_HEADER_TEXT;
                      ExcelWs.Cells[rows, 7] = WHT_CODE;
                      ExcelWs.Cells[rows, 8] = VAT_AMOUNT;
                      ExcelWs.Cells[rows, 9] = CURRENCY;
                      ExcelWs.Cells[rows, 10] = abe;
                      ExcelWs.Cells[rows, 11] = PERIOD_SHORT;
                      ExcelWs.Cells[rows, 22] = PAYOUT_ID;
                      ExcelWs.Cells[rows, 1] = "Header Info";
                      rows = rows + 1;

                      //string strQuery1 = "";
                      SqlCommand cmd1 = new SqlCommand();
                      SelectQueryBuilder queryBuider = new SelectQueryBuilder();
                      queryBuider.SelectFromTable("PAYMENT_MASTER");
                      
                      if (SelectTeamList.SelectedValue == "FC Payments") 
                      {
                          if ((SelectCountryCodeList.SelectedValue == "KR") || (SelectCountryCodeList.SelectedValue == "VN") || (SelectCountryCodeList.SelectedValue == "ID"))
                          {
                              //strQuery1 = "Select REF_NO,TRANSACTION_ID,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,(sum(round(PAYOUT_DUE,0))) as PAYOUT_DUE,VAT_TAX_CODE,PROGRAM, PL, INTERNAL_ORDER, PROFIT_CENTER from PAYMENT_MASTER where (SENT_APJ_STATUS_TYPE = 'LH1') AND  (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and Invoice_no = '" + INVOICE_NUMBER + "' and PAYOUT_ID = '" + PAYOUT_ID + "' GROUP BY REF_NO, TRANSACTION_ID, ACCT, LCL_SUB_ACCT, IC_SUB_ACCT, PAYOUT_DUE, VAT_TAX_CODE, PROGRAM, PL, INTERNAL_ORDER, PROFIT_CENTER order by REF_NO";
                              //cmd1 = new SqlCommand("Select REF_NO,TRANSACTION_ID,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,(sum(round(PAYOUT_DUE,0))) as PAYOUT_DUE,VAT_TAX_CODE,PROGRAM, PL, INTERNAL_ORDER, PROFIT_CENTER from PAYMENT_MASTER where (SENT_APJ_STATUS_TYPE = 'LH1') AND  (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and Invoice_no = '" + INVOICE_NUMBER + "' and PAYOUT_ID = '" + PAYOUT_ID + "' GROUP BY REF_NO, TRANSACTION_ID, ACCT, LCL_SUB_ACCT, IC_SUB_ACCT, PAYOUT_DUE, VAT_TAX_CODE, PROGRAM, PL, INTERNAL_ORDER, PROFIT_CENTER order by REF_NO");
                              //Neel's update(to be tested)
                              queryBuider.SelectColumns("REF_NO", "TRANSACTION_ID", "ACCT", "LCL_SUB_ACCT", "IC_SUB_ACCT", "sum(round(PAYOUT_DUE, 0)) as PAYOUT_DUE", "VAT_TAX_CODE", "PROGRAM", "PL", "INTERNAL_ORDER", "PROFIT_CENTER");
                              queryBuider.AddWhere("SENT_APJ_STATUS_TYPE", Comparison.Equals, "LH1");
                              queryBuider.AddWhere("VENDOR_ID_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("VENDOR_NAME_MISMATCH_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("WWAS_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("SPLIT_PAYMENT_SENT_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("SPLIT_PAYMENT_RECD_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("SENT_LOS_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("RECD_LOS_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("SUSPECTS_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("TRESHOLD_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("SENT_APJ_STATUS", Comparison.Equals, 'O');
                              queryBuider.AddWhere("ON_CHAPP_STATUS", Comparison.Equals, 'Y');
                              queryBuider.AddWhere("ALL_STATUS", Comparison.Equals, 'O');
                              queryBuider.AddWhere("TRANSACTION_ID_UPlOAD_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("Invoice_no", Comparison.Equals, "" + INVOICE_NUMBER + "");
                              queryBuider.AddWhere("PAYOUT_ID", Comparison.Equals, "" + PAYOUT_ID + "");
                              queryBuider.GroupBy("REF_NO", "TRANSACTION_ID", "ACCT", "LCL_SUB_ACCT", "IC_SUB_ACCT", "PAYOUT_DUE", "VAT_TAX_CODE", "PROGRAM", "PL", "INTERNAL_ORDER", "PROFIT_CENTER");
                              queryBuider.AddOrderBy("REF_NO", Sorting.Ascending);
                              queryBuider.SetDbProviderFactory(DbProviderFactories.GetFactory("System.Data.SqlClient"));
                              DbCommand command = queryBuider.BuildCommand();
                              cmd1 = (SqlCommand)command;

                              //Neel's update End

                          }
                          else
                          {
                              //strQuery1 = "Select REF_NO,TRANSACTION_ID,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,PAYOUT_DUE,VAT_TAX_CODE,PROGRAM, PL, INTERNAL_ORDER, PROFIT_CENTER from PAYMENT_MASTER WHERE (SENT_APJ_STATUS_TYPE = 'LH1') AND  (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and Invoice_no = '" + INVOICE_NUMBER + "' and PAYOUT_ID = '" + PAYOUT_ID + "' order by REF_NO";
                              //cmd1 = new SqlCommand("Select REF_NO,TRANSACTION_ID,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,PAYOUT_DUE,VAT_TAX_CODE,PROGRAM, PL, INTERNAL_ORDER, PROFIT_CENTER from PAYMENT_MASTER WHERE (SENT_APJ_STATUS_TYPE = 'LH1') AND  (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and Invoice_no = '" + INVOICE_NUMBER + "' and PAYOUT_ID = '" + PAYOUT_ID + "' order by REF_NO");
                              queryBuider.SelectColumns("REF_NO", "TRANSACTION_ID", "ACCT", "LCL_SUB_ACCT", "IC_SUB_ACCT", "PAYOUT_DUE", "VAT_TAX_CODE", "PROGRAM", "PL", "INTERNAL_ORDER", "PROFIT_CENTER");
                              queryBuider.AddWhere("SENT_APJ_STATUS_TYPE", Comparison.Equals, "LH1");
                              queryBuider.AddWhere("VENDOR_ID_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("VENDOR_NAME_MISMATCH_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("WWAS_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("SPLIT_PAYMENT_SENT_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("SPLIT_PAYMENT_RECD_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("SENT_LOS_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("RECD_LOS_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("SUSPECTS_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("TRESHOLD_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("SENT_APJ_STATUS", Comparison.Equals, 'O');
                              queryBuider.AddWhere("ON_CHAPP_STATUS", Comparison.Equals, 'Y');
                              queryBuider.AddWhere("ALL_STATUS", Comparison.Equals, 'O');
                              queryBuider.AddWhere("TRANSACTION_ID_UPlOAD_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("Invoice_no", Comparison.Equals, "" + INVOICE_NUMBER + "");
                              queryBuider.AddWhere("PAYOUT_ID", Comparison.Equals, "" + PAYOUT_ID + "");
                              queryBuider.AddOrderBy("REF_NO", Sorting.Ascending);
                              queryBuider.SetDbProviderFactory(DbProviderFactories.GetFactory("System.Data.SqlClient"));
                              DbCommand command1 = queryBuider.BuildCommand();
                              cmd1 = (SqlCommand)command1;
                          }
                          }

                      else if (SelectTeamList.SelectedValue == "CI Payments")
                      {
                          if ((SelectCountryCodeList.SelectedValue == "KR") || (SelectCountryCodeList.SelectedValue == "VN") || (SelectCountryCodeList.SelectedValue == "ID"))
                          {
                              //strQuery1 = "Select REF_NO,TRANSACTION_ID,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,(sum(round(PAYOUT_DUE,0))) as PAYOUT_DUE,VAT_TAX_CODE,PROGRAM, PL, INTERNAL_ORDER, PROFIT_CENTER from PAYMENT_MASTER where (SENT_APJ_STATUS_TYPE = 'LH1') AND  (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (FIRST_UPLOAD_P1_STATUS = 'C') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and Invoice_no = '" + INVOICE_NUMBER + "' and PAYOUT_ID = '" + PAYOUT_ID + "' GROUP BY REF_NO, TRANSACTION_ID, ACCT, LCL_SUB_ACCT, IC_SUB_ACCT, PAYOUT_DUE, VAT_TAX_CODE, PROGRAM, PL, INTERNAL_ORDER, PROFIT_CENTER order by REF_NO";
                              // need to change the code - fortify
                              //cmd1 = new SqlCommand("Select REF_NO,TRANSACTION_ID,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,(sum(round(PAYOUT_DUE,0))) as PAYOUT_DUE,VAT_TAX_CODE,PROGRAM, PL, INTERNAL_ORDER, PROFIT_CENTER from PAYMENT_MASTER where (SENT_APJ_STATUS_TYPE = 'LH1') AND  (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (FIRST_UPLOAD_P1_STATUS = 'C') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and Invoice_no = '" + INVOICE_NUMBER + "' and PAYOUT_ID = '" + PAYOUT_ID + "' GROUP BY REF_NO, TRANSACTION_ID, ACCT, LCL_SUB_ACCT, IC_SUB_ACCT, PAYOUT_DUE, VAT_TAX_CODE, PROGRAM, PL, INTERNAL_ORDER, PROFIT_CENTER order by REF_NO");
                              queryBuider.SelectColumns("REF_NO", "TRANSACTION_ID", "ACCT", "LCL_SUB_ACCT", "IC_SUB_ACCT", "sum(round(PAYOUT_DUE, 0)) as PAYOUT_DUE", "VAT_TAX_CODE", "PROGRAM", "PL", "INTERNAL_ORDER", "PROFIT_CENTER");
                              queryBuider.AddWhere("SENT_APJ_STATUS_TYPE", Comparison.Equals, "LH1");
                              queryBuider.AddWhere("VENDOR_ID_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("VENDOR_NAME_MISMATCH_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("WWAS_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("SPLIT_PAYMENT_SENT_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("SPLIT_PAYMENT_RECD_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("SENT_LOS_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("RECD_LOS_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("SUSPECTS_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("TRESHOLD_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("SENT_APJ_STATUS", Comparison.Equals, 'O');
                              queryBuider.AddWhere("ON_CHAPP_STATUS", Comparison.Equals, 'Y');
                              queryBuider.AddWhere("FIRST_UPLOAD_P1_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("ALL_STATUS", Comparison.Equals, 'O');
                              queryBuider.AddWhere("TRANSACTION_ID_UPlOAD_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("Invoice_no", Comparison.Equals, "" + INVOICE_NUMBER + "");
                              queryBuider.AddWhere("PAYOUT_ID", Comparison.Equals, "" + PAYOUT_ID + "");
                              queryBuider.GroupBy("REF_NO", "TRANSACTION_ID", "ACCT", "LCL_SUB_ACCT", "IC_SUB_ACCT", "PAYOUT_DUE", "VAT_TAX_CODE", "PROGRAM", "PL", "INTERNAL_ORDER", "PROFIT_CENTER");
                              queryBuider.AddOrderBy("REF_NO", Sorting.Ascending);
                              queryBuider.SetDbProviderFactory(DbProviderFactories.GetFactory("System.Data.SqlClient"));
                              DbCommand command = queryBuider.BuildCommand();
                              cmd1 = (SqlCommand)command;
                          }
                          else
                          //strQuery1 = "Select REF_NO,TRANSACTION_ID,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,PAYOUT_DUE,VAT_TAX_CODE,PROGRAM, PL, INTERNAL_ORDER, PROFIT_CENTER from PAYMENT_MASTER WHERE (SENT_APJ_STATUS_TYPE = 'LH1') AND  (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (FIRST_UPLOAD_P1_STATUS = 'C') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O')and Invoice_no = '" + INVOICE_NUMBER + "' and PAYOUT_ID = '" + PAYOUT_ID + "' order by REF_NO";
                          //cmd1 = new SqlCommand("Select REF_NO,TRANSACTION_ID,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,PAYOUT_DUE,VAT_TAX_CODE,PROGRAM, PL, INTERNAL_ORDER, PROFIT_CENTER from PAYMENT_MASTER WHERE (SENT_APJ_STATUS_TYPE = 'LH1') AND  (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (FIRST_UPLOAD_P1_STATUS = 'C') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O')and Invoice_no = '" + INVOICE_NUMBER + "' and PAYOUT_ID = '" + PAYOUT_ID + "' order by REF_NO");
                          {
                              queryBuider.SelectColumns("REF_NO", "TRANSACTION_ID", "ACCT", "LCL_SUB_ACCT", "IC_SUB_ACCT", "PAYOUT_DUE", "VAT_TAX_CODE", "PROGRAM", "PL", "INTERNAL_ORDER", "PROFIT_CENTER");
                              queryBuider.AddWhere("SENT_APJ_STATUS_TYPE", Comparison.Equals, "LH1");
                              queryBuider.AddWhere("VENDOR_ID_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("VENDOR_NAME_MISMATCH_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("WWAS_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("SPLIT_PAYMENT_SENT_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("SPLIT_PAYMENT_RECD_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("SENT_LOS_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("RECD_LOS_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("SUSPECTS_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("TRESHOLD_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("SENT_APJ_STATUS", Comparison.Equals, 'O');
                              queryBuider.AddWhere("ON_CHAPP_STATUS", Comparison.Equals, 'Y');
                              queryBuider.AddWhere("FIRST_UPLOAD_P1_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("ALL_STATUS", Comparison.Equals, 'O');
                              queryBuider.AddWhere("TRANSACTION_ID_UPlOAD_STATUS", Comparison.Equals, 'C');
                              queryBuider.AddWhere("Invoice_no", Comparison.Equals, "" + INVOICE_NUMBER + "");
                              queryBuider.AddWhere("PAYOUT_ID", Comparison.Equals, "" + PAYOUT_ID + "");
                              queryBuider.AddOrderBy("REF_NO", Sorting.Ascending);
                              queryBuider.SetDbProviderFactory(DbProviderFactories.GetFactory("System.Data.SqlClient"));
                              DbCommand command1 = queryBuider.BuildCommand();
                              cmd1 = (SqlCommand)command1;
                          }
                      }
                      //else if (SelectTeamList.SelectedValue == "FC Payments")
                      //{
                      //    strQuery1 = "Select REF_NO,TRANSACTION_ID,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,PAYOUT_DUE,VAT_TAX_CODE,PROGRAM, PL, INTERNAL_ORDER, PROFIT_CENTER from PAYMENT_MASTER WHERE (SENT_APJ_STATUS_TYPE = 'LH1') AND  (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and Invoice_no = '" + INVOICE_NUMBER + "' and PAYOUT_ID = '" + PAYOUT_ID + "' order by REF_NO";
                      //}
                      //else if (SelectTeamList.SelectedValue == "CI Payments")
                      //{
                      //    strQuery1 = "Select REF_NO,TRANSACTION_ID,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,PAYOUT_DUE,VAT_TAX_CODE,PROGRAM, PL, INTERNAL_ORDER, PROFIT_CENTER from PAYMENT_MASTER WHERE (SENT_APJ_STATUS_TYPE = 'LH1') AND  (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (FIRST_UPLOAD_P1_STATUS = 'C') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O')and Invoice_no = '" + INVOICE_NUMBER + "' and PAYOUT_ID = '" + PAYOUT_ID + "' order by REF_NO";
                      //}
                      

                      
                      //DataTable dt1 = rh.getData(strQuery1);
                      DataTable dt1 = rh.getData11(cmd1);

                  
                      for (int j = 0; j < dt1.Rows.Count; j++)
                      {
                          ExcelWs.Cells[rows, 1] = "Line Item";
                          ExcelWs.Cells[rows, 12] = dt1.Rows[j]["ACCT"].ToString() + dt1.Rows[j]["LCL_SUB_ACCT"].ToString() + dt1.Rows[j]["IC_SUB_ACCT"].ToString();
                          ExcelWs.Cells[rows, 13] = dt1.Rows[j]["PAYOUT_DUE"].ToString();
                          ExcelWs.Cells[rows, 14] = dt1.Rows[j]["VAT_TAX_CODE"].ToString();
                          ExcelWs.Cells[rows, 15] = dt1.Rows[j]["PROGRAM"].ToString();
                          ExcelWs.Cells[rows, 16] = dt1.Rows[j]["PL"].ToString() + "00";
                          ////if (dt.Rows[j]["lh_pl"].ToString() == "DK00")
                          ////{
                          ////    ExcelWs.Cells[rows, 17] = dt1.Rows[j]["LH_cost_center"].ToString();
                          ////}
                          ExcelWs.Cells[rows, 18] = dt1.Rows[j]["INTERNAL_ORDER"].ToString();
                          ExcelWs.Cells[rows, 19] = dt1.Rows[j]["PROFIT_CENTER"].ToString();
                          ExcelWs.Cells[rows, 19] = dt1.Rows[j]["PROFIT_CENTER"].ToString();
                          ExcelWs.Cells[rows, 22] = dt1.Rows[j]["REF_NO"].ToString();

                          rows = rows + 1;

                      }
                  }






              }



              catch (Exception ex)
              {
                  Show(ex.Message.ToString());

                  ExcelWs = null;

                  ExcelWb = null;
                  ExcelApp = null;
                  ExcelApp.Application.Quit();

              }

              finally
              {
                  //ExcelApp.Application.DisplayAlerts = false;
                  //ExcelApp.DisplayAlerts = false;
                  
                  System.CodeDom.Compiler.TempFileCollection TempFileCollection = new System.CodeDom.Compiler.TempFileCollection();
                  //DataTable dt1 = new DataTable();
                  //dt1 = rh.getData("Select APPLICATION_VALUE FROM ASP_USER.APPLICATION_SETTINGS_EMEAPAY WHERE APPLICATION_PARAMETER ='SAP_WIZARD_FILE_NO'");
                  //int fileNo = Convert.ToInt32(dt1.Rows[0]["APPLICATION_VALUE"].ToString());
                  //int MaxNo = fileNo + 1;
                  //dt1 = rh.getData("update ASP_USER.APPLICATION_SETTINGS_EMEAPAY SET APPLICATION_VALUE = '" + MaxNo + "' where APPLICATION_PARAMETER ='SAP_WIZARD_FILE_NO'");
                  //string filename = "C:\\EMEA_PAY_SAP_WIZARD\\" + CountryCode + "_" + fileNo + ".xlsx";

                  string country = SelectCountryCodeList.Text.ToString();
                  string filename = "";
                  string fname = "";
                  string processor1 = Session["GlobalName"].ToString();
                  processor1 = processor1.Replace('\\', '-');
                  string timeStamp = DateTime.Now.ToString("s");
                  timeStamp = timeStamp.Replace(':', '-');
                  timeStamp = timeStamp.Replace("T", "__");
                  string program_name = SelectProgramList.Text.ToString();
                 


                  if (SelectTeamList.Text == "FC Payments")
                  {
                      filename = "C:\\APJ_RH_PaymentsFiles\\SAP_WIZARD_Files\\" + country + "_" + "PADVCQ" + "_" + "LH1" + "_" + processor1 + "_" + timeStamp + ".xlsm";

                      fname = country + "_" + "PADVCQ" + "_" + "LH1" + "_" + processor1 + "_" + timeStamp + ".xlsm";
                  }

                  else
                  {
                      filename = "C:\\APJ_RH_PaymentsFiles\\SAP_WIZARD_Files\\" + country + "_" + "PADVCQ" + "_" + program_name + "_" + "LH1" + "_" + processor1 + "_" + timeStamp + ".xlsm";
                      fname = country + "_" + "PADVCQ" + "_" + program_name + "_" + "LH1" + "_" + processor1 + "_" + timeStamp + ".xlsm";
                  }


                  if (File.Exists(filename))
                  {
                      File.Delete(filename);

                  }

                 

                  //string filename1 = "C:\\EMEA_PAY_SAP_WIZARD\\CH00_881.xlsm";
                  //string fname1 = "CH00_881.xlsm";
                  //Response.AppendHeader("Content-Disposition", "attachment; filename=" + fname1);
                  ////Response.RedirectLocation = @"C:\Temp";
                  //Response.TransmitFile(filename1);
                  //Response.End();


                  //ExcelWs.Protect("123");
                  //TempFileCollection.AddExtension(filename, false);

                  //string fname = CountryCode + "_" + fileNo + ".xlsx";
                  //string fname =  "_" + ".xlsm";

                  //ExcelWs.SaveAs(filename);
                  ExcelWb.SaveAs(filename);
                  
                 ExcelWs.Range["L:L"].Locked = false;
                 ExcelWs.Range["R:R"].Locked = false;
                 ExcelWs.Range["S:S"].Locked = false;
                 ExcelWs.Protect("RebatesHigher");
                      
                  ExcelApp.DisplayAlerts = false;
                  ExcelWb.Save();
                  ExcelWb.Close();
                  ExcelWs = null;
                  ExcelWb = null;

                  //Excel.Workbook ExcelWb1 = ExcelApp.Workbooks.Add(filename);
                  //ExcelWb1.Saved = true;

                  //ExcelWb1.Close();
                  //ExcelWb1 = null;


                  ExcelApp.Application.Quit();
                  //System.Diagnostics.Process.Start("E:\\RH_PUBLISH_UAT\\Comp\\docs\\killExcel.bat");
                  //System.Diagnostics.Process.Start(myBatchFileName, myBatchParameters);

                  ExcelApp.Quit();


                  ExcelApp = null;






                  //System.Runtime.InteropServices.Marshal.ReleaseComObject(ExcelWb);
                  //System.Runtime.InteropServices.Marshal.ReleaseComObject(ExcelApp);




                  //Process excelProcess = Process.GetProcessesByName("EXCEL")[0];
                  //if (!excelProcess.CloseMainWindow())
                  //{
                  //    excelProcess.Kill();
                  //}
                  string processor = Session["GlobalUserID"].ToString();


                  string Inv_dt = DateTime.Now.Date.ToString("dd-MMM-yyyy");

                 //dt = rh.getData("Update PAYMENT_MASTER SET SENT_APJ_STATUS = 'C', SENT_APJ_STATUS_DATE = '" + Inv_dt + "', SENT_APJ_STATUS_CLOSED_BY = '" + processor + "' WHERE (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (SENT_APJ_STATUS_TYPE = 'LH1') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and " + Condstr + "");
                 SqlCommand cmd2 = new SqlCommand("Update PAYMENT_MASTER SET SENT_APJ_STATUS = 'C', SENT_APJ_STATUS_DATE = '" + Inv_dt + "', SENT_APJ_STATUS_CLOSED_BY = '" + processor + "' WHERE (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (SENT_APJ_STATUS_TYPE = 'LH1') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and " + Condstr + "");
                 DataTable dt2;
                 dt2 = rh.getData11(cmd2); 


                  Response.AppendHeader("Content-Disposition", "attachment; filename=" + fname);
                  //Response.RedirectLocation = @"C:\Temp";
                  //Response.TransmitFile(Server.MapPath("docs/") + "SAP_Wizard.xlsm");
                  Response.TransmitFile(filename);
                  Response.AppendHeader("X-Download-Options", "noopen");
                  Response.End();


                  //Show("File name saved in path : " + filename);




              }
           
           
           }

           else if (GenerateFilesList.Text == "FI1 FILE")

           {

               Excel.Application ExcelApp = new Excel.Application();
               ExcelApp.Application.DisplayAlerts = false;
               ExcelApp.DisplayAlerts = false;
               Excel.Workbook ExcelWb = ExcelApp.Workbooks.Open(Server.MapPath("docs/") + "SAP_Wizard_FI1.xlsm");
               Excel.Worksheet ExcelWs = ExcelWb.Worksheets[1];
               //string strQuery = "";
               SqlCommand cmd = new SqlCommand(); 
               if ((SelectTeamList.SelectedValue == "CI Payments") & (SelectCountryCodeList.SelectedValue == "JP"))
               {
                   //strQuery = "SELECT SENT_APJ_STATUS, PROGRAM,QUARTER,FISCAL_YEAR, PAYOUT_ID, COMPANY_CODE, COUNTRY_CODE, WHT_TAX_CODE, VENDOR_NO, TRANSACTION_ID_GEN_DATE, INVOICE_NO, INVOICE_DATE, (sum(round(PAYOUT_DUE,0))) as sum_amt_Payout, (SUM(round(AMOUNT_AFTER_VAT,0))) AS sum_amt_vat, CURR FROM PAYMENT_MASTER WHERE (SENT_APJ_STATUS_TYPE = 'FI1') AND (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (FIRST_UPLOAD_P1_STATUS = 'C') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and " + Condstr + " GROUP BY SENT_APJ_STATUS, PROGRAM,QUARTER,FISCAL_YEAR, PAYOUT_ID, COUNTRY_CODE, COMPANY_CODE, WHT_TAX_CODE, VENDOR_NO, TRANSACTION_ID_GEN_DATE, INVOICE_NO,INVOICE_DATE,CURR";
                   cmd = new SqlCommand("SELECT SENT_APJ_STATUS, PROGRAM,QUARTER,FISCAL_YEAR, PAYOUT_ID, COMPANY_CODE, COUNTRY_CODE, WHT_TAX_CODE, VENDOR_NO, TRANSACTION_ID_GEN_DATE, INVOICE_NO, INVOICE_DATE, (sum(round(PAYOUT_DUE,0))) as sum_amt_Payout, (SUM(round(AMOUNT_AFTER_VAT,0))) AS sum_amt_vat, CURR FROM PAYMENT_MASTER WHERE (SENT_APJ_STATUS_TYPE = 'FI1') AND (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (FIRST_UPLOAD_P1_STATUS = 'C') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and " + Condstr + " GROUP BY SENT_APJ_STATUS, PROGRAM,QUARTER,FISCAL_YEAR, PAYOUT_ID, COUNTRY_CODE, COMPANY_CODE, WHT_TAX_CODE, VENDOR_NO, TRANSACTION_ID_GEN_DATE, INVOICE_NO,INVOICE_DATE,CURR");
               }
               else if (SelectTeamList.SelectedValue == "FC Payments")
               {
                   //strQuery = "SELECT SENT_APJ_STATUS, PROGRAM,QUARTER,FISCAL_YEAR, PAYOUT_ID, COMPANY_CODE, COUNTRY_CODE, WHT_TAX_CODE, VENDOR_NO, TRANSACTION_ID_GEN_DATE, INVOICE_NO, INVOICE_DATE, SUM(PAYOUT_DUE) AS sum_amt_Payout, SUM(AMOUNT_AFTER_VAT) AS sum_amt_vat, CURR FROM PAYMENT_MASTER WHERE (SENT_APJ_STATUS_TYPE = 'FI1') AND (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and " + Condstr + " GROUP BY SENT_APJ_STATUS, PROGRAM,QUARTER,FISCAL_YEAR, PAYOUT_ID, COUNTRY_CODE, COMPANY_CODE, WHT_TAX_CODE, VENDOR_NO, TRANSACTION_ID_GEN_DATE, INVOICE_NO,INVOICE_DATE,CURR";
                   cmd = new SqlCommand("SELECT SENT_APJ_STATUS, PROGRAM,QUARTER,FISCAL_YEAR, PAYOUT_ID, COMPANY_CODE, COUNTRY_CODE, WHT_TAX_CODE, VENDOR_NO, TRANSACTION_ID_GEN_DATE, INVOICE_NO, INVOICE_DATE, SUM(PAYOUT_DUE) AS sum_amt_Payout, SUM(AMOUNT_AFTER_VAT) AS sum_amt_vat, CURR FROM PAYMENT_MASTER WHERE (SENT_APJ_STATUS_TYPE = 'FI1') AND (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and " + Condstr + " GROUP BY SENT_APJ_STATUS, PROGRAM,QUARTER,FISCAL_YEAR, PAYOUT_ID, COUNTRY_CODE, COMPANY_CODE, WHT_TAX_CODE, VENDOR_NO, TRANSACTION_ID_GEN_DATE, INVOICE_NO,INVOICE_DATE,CURR");
               }
               else if (SelectTeamList.SelectedValue == "CI Payments")
               {
                   //strQuery = "SELECT SENT_APJ_STATUS, PROGRAM,QUARTER,FISCAL_YEAR, PAYOUT_ID, COMPANY_CODE, COUNTRY_CODE, WHT_TAX_CODE, VENDOR_NO, TRANSACTION_ID_GEN_DATE, INVOICE_NO, INVOICE_DATE, SUM(PAYOUT_DUE) AS sum_amt_Payout, SUM(AMOUNT_AFTER_VAT) AS sum_amt_vat, CURR FROM PAYMENT_MASTER WHERE (SENT_APJ_STATUS_TYPE = 'FI1') AND (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (FIRST_UPLOAD_P1_STATUS = 'C') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and " + Condstr + " GROUP BY SENT_APJ_STATUS, PROGRAM,QUARTER,FISCAL_YEAR, PAYOUT_ID, COUNTRY_CODE, COMPANY_CODE, WHT_TAX_CODE, VENDOR_NO, TRANSACTION_ID_GEN_DATE, INVOICE_NO,INVOICE_DATE,CURR";
                   cmd = new SqlCommand("SELECT SENT_APJ_STATUS, PROGRAM,QUARTER,FISCAL_YEAR, PAYOUT_ID, COMPANY_CODE, COUNTRY_CODE, WHT_TAX_CODE, VENDOR_NO, TRANSACTION_ID_GEN_DATE, INVOICE_NO, INVOICE_DATE, SUM(PAYOUT_DUE) AS sum_amt_Payout, SUM(AMOUNT_AFTER_VAT) AS sum_amt_vat, CURR FROM PAYMENT_MASTER WHERE (SENT_APJ_STATUS_TYPE = 'FI1') AND (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (FIRST_UPLOAD_P1_STATUS = 'C') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and " + Condstr + " GROUP BY SENT_APJ_STATUS, PROGRAM,QUARTER,FISCAL_YEAR, PAYOUT_ID, COUNTRY_CODE, COMPANY_CODE, WHT_TAX_CODE, VENDOR_NO, TRANSACTION_ID_GEN_DATE, INVOICE_NO,INVOICE_DATE,CURR");
               }
              
               
              
               
               //DataTable dt = rh.getData(strQuery);
               DataTable dt = rh.getData11(cmd);
              int rows = 5;

               try
               {
                   for (int i = 0; i < dt.Rows.Count; i++)
                   {

                       string COMPANY_CODE = dt.Rows[i]["COMPANY_CODE"].ToString();
                       string VENDOR_NUMBER = dt.Rows[i]["VENDOR_NO"].ToString();
                       DateTime INVOICE_DATE = Convert.ToDateTime(dt.Rows[i]["TRANSACTION_ID_GEN_DATE"].ToString());
                       string invoiceDate1 = INVOICE_DATE.ToString("MM/dd/yyyy");
                       
                     

                     
                       
                       string INVOICE_NUMBER = dt.Rows[i]["INVOICE_NO"].ToString();
                       string program = dt.Rows[i]["PROGRAM"].ToString();
                       string DOC_HEADER_TEXT = "PDM" + "-" + program;
                       string WHT_CODE = dt.Rows[i]["WHT_TAX_CODE"].ToString();
                       string VAT_AMOUNT = dt.Rows[i]["sum_amt_vat"].ToString();
                       string CURRENCY = dt.Rows[i]["CURR"].ToString();
                       string GROSS_AMOUNT = dt.Rows[i]["sum_amt_Payout"].ToString();
                       string PERIOD_SHORT = dt.Rows[i]["PROGRAM"].ToString() + dt.Rows[i]["QUARTER"].ToString() + dt.Rows[i]["FISCAL_YEAR"].ToString();
                       string PAYOUT_ID = dt.Rows[i]["PAYOUT_ID"].ToString();
                       decimal abc = Convert.ToDecimal(GROSS_AMOUNT);
                       decimal abd = Convert.ToDecimal(VAT_AMOUNT);
                       decimal abe = abd - abc;

                       ExcelWs.Cells[rows, 2] = COMPANY_CODE;
                       ExcelWs.Cells[rows, 3] = VENDOR_NUMBER;
                       ExcelWs.Cells[rows, 4] = invoiceDate1;
                       ExcelWs.Cells[rows, 5] = INVOICE_NUMBER;
                       ExcelWs.Cells[rows, 6] = DOC_HEADER_TEXT;
                       ExcelWs.Cells[rows, 7] = WHT_CODE;
                       ExcelWs.Cells[rows, 8] = VAT_AMOUNT;
                       ExcelWs.Cells[rows, 9] = CURRENCY;
                       ExcelWs.Cells[rows, 10] = abe;
                       ExcelWs.Cells[rows, 11] = PERIOD_SHORT;
                       ExcelWs.Cells[rows, 1] = "Header Info";
                       ExcelWs.Cells[rows, 22] = PAYOUT_ID;
                       rows = rows + 1;
                       //string strQuery1 = "";
                       SqlCommand cmd1 = new SqlCommand();
                       SelectQueryBuilder queryBuider = new SelectQueryBuilder();
                       queryBuider.SelectFromTable("PAYMENT_MASTER");
                       if ((SelectTeamList.SelectedValue == "CI Payments") & (SelectCountryCodeList.SelectedValue == "JP"))
                       {
                           //strQuery1 = "Select REF_NO,SYSTEM_TYPE,ENSE,DEPT,PT,TRANSACTION_ID,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,(sum(round(PAYOUT_DUE,0))) as PAYOUT_DUE,VAT_TAX_CODE,PROGRAM, PL, INTERNAL_ORDER, PROFIT_CENTER from PAYMENT_MASTER WHERE (SENT_APJ_STATUS_TYPE = 'FI1') AND (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (FIRST_UPLOAD_P1_STATUS = 'C') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and Invoice_no = '" + INVOICE_NUMBER + "' and PAYOUT_ID = '" + PAYOUT_ID + "' GROUP BY REF_NO, SYSTEM_TYPE, ENSE, DEPT, PT, TRANSACTION_ID, ACCT, LCL_SUB_ACCT, IC_SUB_ACCT, PAYOUT_DUE, VAT_TAX_CODE, PROGRAM, PL, INTERNAL_ORDER, PROFIT_CENTER order by REF_NO";
                           //need to change the code to fortify
                           //cmd1 = new SqlCommand("Select REF_NO,SYSTEM_TYPE,ENSE,DEPT,PT,TRANSACTION_ID,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,(sum(round(PAYOUT_DUE,0))) as PAYOUT_DUE,VAT_TAX_CODE,PROGRAM, PL, INTERNAL_ORDER, PROFIT_CENTER from PAYMENT_MASTER WHERE (SENT_APJ_STATUS_TYPE = 'FI1') AND (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (FIRST_UPLOAD_P1_STATUS = 'C') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and Invoice_no = '" + INVOICE_NUMBER + "' and PAYOUT_ID = '" + PAYOUT_ID + "' GROUP BY REF_NO, SYSTEM_TYPE, ENSE, DEPT, PT, TRANSACTION_ID, ACCT, LCL_SUB_ACCT, IC_SUB_ACCT, PAYOUT_DUE, VAT_TAX_CODE, PROGRAM, PL, INTERNAL_ORDER, PROFIT_CENTER order by REF_NO");
                           queryBuider.SelectColumns("REF_NO", "SYSTEM_TYPE", "ENSE", "DEPT", "PT", "TRANSACTION_ID", "ACCT", "LCL_SUB_ACCT", "IC_SUB_ACCT", "(sum(round(PAYOUT_DUE,0))) as PAYOUT_DUE", "VAT_TAX_CODE", "PROGRAM", "PL", "INTERNAL_ORDER", "PROFIT_CENTER");
                           queryBuider.AddWhere("SENT_APJ_STATUS_TYPE", Comparison.Equals, "FI1");
                           queryBuider.AddWhere("VENDOR_ID_STATUS", Comparison.Equals, 'C');
                           queryBuider.AddWhere("VENDOR_NAME_MISMATCH_STATUS", Comparison.Equals, 'C');
                           queryBuider.AddWhere("WWAS_STATUS", Comparison.Equals, 'C');
                           queryBuider.AddWhere("SPLIT_PAYMENT_SENT_STATUS", Comparison.Equals, 'C');
                           queryBuider.AddWhere("SPLIT_PAYMENT_RECD_STATUS", Comparison.Equals, 'C');
                           queryBuider.AddWhere("SENT_LOS_STATUS", Comparison.Equals, 'C');
                           queryBuider.AddWhere("RECD_LOS_STATUS", Comparison.Equals, 'C');
                           queryBuider.AddWhere("SUSPECTS_STATUS", Comparison.Equals, 'C');
                           queryBuider.AddWhere("TRESHOLD_STATUS", Comparison.Equals, 'C');
                           queryBuider.AddWhere("SENT_APJ_STATUS", Comparison.Equals, 'O');
                           queryBuider.AddWhere("ON_CHAPP_STATUS", Comparison.Equals, 'Y');
                           queryBuider.AddWhere("FIRST_UPLOAD_P1_STATUS", Comparison.Equals, 'C');
                           queryBuider.AddWhere("ALL_STATUS", Comparison.Equals, 'O');
                           queryBuider.AddWhere("TRANSACTION_ID_UPlOAD_STATUS", Comparison.Equals, 'C');
                           queryBuider.AddWhere("Invoice_no", Comparison.Equals, "" + INVOICE_NUMBER + "");
                           queryBuider.AddWhere("PAYOUT_ID", Comparison.Equals, "" + PAYOUT_ID + "");
                           queryBuider.GroupBy("REF_NO", "SYSTEM_TYPE", "ENSE", "DEPT", "PT", "TRANSACTION_ID", "ACCT", "LCL_SUB_ACCT", "IC_SUB_ACCT", "PAYOUT_DUE", "VAT_TAX_CODE", "PROGRAM", "PL", "INTERNAL_ORDER", "PROFIT_CENTER");
                           queryBuider.AddOrderBy("REF_NO", Sorting.Ascending);
                           queryBuider.SetDbProviderFactory(DbProviderFactories.GetFactory("System.Data.SqlClient"));
                           DbCommand command = queryBuider.BuildCommand();
                           cmd1 = (SqlCommand)command;
                       }

                       else if (SelectTeamList.SelectedValue == "FC Payments")
                       {
                           //strQuery1 = "Select REF_NO,SYSTEM_TYPE,ENSE,DEPT,PT,TRANSACTION_ID,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,PAYOUT_DUE,VAT_TAX_CODE,PROGRAM, PL, INTERNAL_ORDER, PROFIT_CENTER from PAYMENT_MASTER WHERE (SENT_APJ_STATUS_TYPE = 'FI1') AND (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and Invoice_no = '" + INVOICE_NUMBER + "' and PAYOUT_ID = '" + PAYOUT_ID + "' order by REF_NO";
                           //cmd1 = new SqlCommand("Select REF_NO,SYSTEM_TYPE,ENSE,DEPT,PT,TRANSACTION_ID,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,PAYOUT_DUE,VAT_TAX_CODE,PROGRAM, PL, INTERNAL_ORDER, PROFIT_CENTER from PAYMENT_MASTER WHERE (SENT_APJ_STATUS_TYPE = 'FI1') AND (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and Invoice_no = '" + INVOICE_NUMBER + "' and PAYOUT_ID = '" + PAYOUT_ID + "' order by REF_NO");
                           queryBuider.SelectColumns("REF_NO", "SYSTEM_TYPE", "ENSE", "DEPT", "PT", "TRANSACTION_ID", "ACCT", "LCL_SUB_ACCT", "IC_SUB_ACCT", "PAYOUT_DUE", "VAT_TAX_CODE", "PROGRAM", "PL", "INTERNAL_ORDER", "PROFIT_CENTER");
                           queryBuider.AddWhere("SENT_APJ_STATUS_TYPE", Comparison.Equals, "FI1");
                           queryBuider.AddWhere("VENDOR_ID_STATUS", Comparison.Equals, 'C');
                           queryBuider.AddWhere("VENDOR_NAME_MISMATCH_STATUS", Comparison.Equals, 'C');
                           queryBuider.AddWhere("WWAS_STATUS", Comparison.Equals, 'C');
                           queryBuider.AddWhere("SPLIT_PAYMENT_SENT_STATUS", Comparison.Equals, 'C');
                           queryBuider.AddWhere("SPLIT_PAYMENT_RECD_STATUS", Comparison.Equals, 'C');
                           queryBuider.AddWhere("SENT_LOS_STATUS", Comparison.Equals, 'C');
                           queryBuider.AddWhere("RECD_LOS_STATUS", Comparison.Equals, 'C');
                           queryBuider.AddWhere("SUSPECTS_STATUS", Comparison.Equals, 'C');
                           queryBuider.AddWhere("TRESHOLD_STATUS", Comparison.Equals, 'C');
                           queryBuider.AddWhere("SENT_APJ_STATUS", Comparison.Equals, 'O');
                           queryBuider.AddWhere("ON_CHAPP_STATUS", Comparison.Equals, 'Y');
                           queryBuider.AddWhere("ALL_STATUS", Comparison.Equals, 'O');
                           queryBuider.AddWhere("TRANSACTION_ID_UPlOAD_STATUS", Comparison.Equals, 'C');
                           queryBuider.AddWhere("Invoice_no", Comparison.Equals, "" + INVOICE_NUMBER + "");
                           queryBuider.AddWhere("PAYOUT_ID", Comparison.Equals, "" + PAYOUT_ID + "");
                           queryBuider.AddOrderBy("REF_NO", Sorting.Ascending);
                           queryBuider.SetDbProviderFactory(DbProviderFactories.GetFactory("System.Data.SqlClient"));
                           DbCommand command = queryBuider.BuildCommand();
                           cmd1 = (SqlCommand)command;
                       }
                       else if (SelectTeamList.SelectedValue == "CI Payments")
                       {
                           //strQuery1 = "Select REF_NO,SYSTEM_TYPE,ENSE,DEPT,PT,TRANSACTION_ID,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,PAYOUT_DUE,VAT_TAX_CODE,PROGRAM, PL, INTERNAL_ORDER, PROFIT_CENTER from PAYMENT_MASTER WHERE (SENT_APJ_STATUS_TYPE = 'FI1') AND (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (FIRST_UPLOAD_P1_STATUS = 'C') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and Invoice_no = '" + INVOICE_NUMBER + "' and PAYOUT_ID = '" + PAYOUT_ID + "' order by REF_NO";
                           //cmd1 = new SqlCommand("Select REF_NO,SYSTEM_TYPE,ENSE,DEPT,PT,TRANSACTION_ID,ACCT,LCL_SUB_ACCT,IC_SUB_ACCT,PAYOUT_DUE,VAT_TAX_CODE,PROGRAM, PL, INTERNAL_ORDER, PROFIT_CENTER from PAYMENT_MASTER WHERE (SENT_APJ_STATUS_TYPE = 'FI1') AND (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (TRESHOLD_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (FIRST_UPLOAD_P1_STATUS = 'C') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and Invoice_no = '" + INVOICE_NUMBER + "' and PAYOUT_ID = '" + PAYOUT_ID + "' order by REF_NO");
                           queryBuider.SelectColumns("REF_NO", "SYSTEM_TYPE", "ENSE", "DEPT", "PT", "TRANSACTION_ID", "ACCT", "LCL_SUB_ACCT", "IC_SUB_ACCT", "PAYOUT_DUE", "VAT_TAX_CODE", "PROGRAM", "PL", "INTERNAL_ORDER", "PROFIT_CENTER");
                           queryBuider.AddWhere("SENT_APJ_STATUS_TYPE", Comparison.Equals, "FI1");
                           queryBuider.AddWhere("VENDOR_ID_STATUS", Comparison.Equals, 'C');
                           queryBuider.AddWhere("VENDOR_NAME_MISMATCH_STATUS", Comparison.Equals, 'C');
                           queryBuider.AddWhere("WWAS_STATUS", Comparison.Equals, 'C');
                           queryBuider.AddWhere("SPLIT_PAYMENT_SENT_STATUS", Comparison.Equals, 'C');
                           queryBuider.AddWhere("SPLIT_PAYMENT_RECD_STATUS", Comparison.Equals, 'C');
                           queryBuider.AddWhere("SENT_LOS_STATUS", Comparison.Equals, 'C');
                           queryBuider.AddWhere("RECD_LOS_STATUS", Comparison.Equals, 'C');
                           queryBuider.AddWhere("SUSPECTS_STATUS", Comparison.Equals, 'C');
                           queryBuider.AddWhere("TRESHOLD_STATUS", Comparison.Equals, 'C');
                           queryBuider.AddWhere("SENT_APJ_STATUS", Comparison.Equals, 'O');
                           queryBuider.AddWhere("ON_CHAPP_STATUS", Comparison.Equals, 'Y');
                           queryBuider.AddWhere("FIRST_UPLOAD_P1_STATUS", Comparison.Equals, 'C');
                           queryBuider.AddWhere("ALL_STATUS", Comparison.Equals, 'O');
                           queryBuider.AddWhere("TRANSACTION_ID_UPlOAD_STATUS", Comparison.Equals, 'C');
                           queryBuider.AddWhere("Invoice_no", Comparison.Equals, "" + INVOICE_NUMBER + "");
                           queryBuider.AddWhere("PAYOUT_ID", Comparison.Equals, "" + PAYOUT_ID + "");
                           queryBuider.AddOrderBy("REF_NO", Sorting.Ascending);
                           queryBuider.SetDbProviderFactory(DbProviderFactories.GetFactory("System.Data.SqlClient"));
                           DbCommand command = queryBuider.BuildCommand();
                           cmd1 = (SqlCommand)command;
                       }
                       
                       //DataTable dt1 = rh.getData(strQuery1);
                       DataTable dt1 = rh.getData11(cmd1);


                       for (int j = 0; j < dt1.Rows.Count; j++)
                       {
                           ExcelWs.Cells[rows, 1] = "Line Item";
                           ExcelWs.Cells[rows, 12] = dt1.Rows[j]["ACCT"].ToString() + dt1.Rows[j]["LCL_SUB_ACCT"].ToString() + "9999";
                           ExcelWs.Cells[rows, 13] = dt1.Rows[j]["PAYOUT_DUE"].ToString();
                           ExcelWs.Cells[rows, 14] = dt1.Rows[j]["VAT_TAX_CODE"].ToString();
                           ExcelWs.Cells[rows, 15] = dt1.Rows[j]["PROGRAM"].ToString();
                           ExcelWs.Cells[rows, 16] = dt1.Rows[j]["PL"].ToString() + "00";
                           
                           string SYSTEM_TYPE = dt1.Rows[j]["SYSTEM_TYPE"].ToString();
                           string ENSE = dt1.Rows[j]["ENSE"].ToString();
                           string firstTen = "";
                           
                           if (SYSTEM_TYPE == "MDF")
                           {
                               firstTen = ENSE.Substring(0, 10);
                               ExcelWs.Cells[rows, 17] = firstTen + dt1.Rows[j]["DEPT"].ToString() + dt1.Rows[j]["PT"].ToString();
                               
                           }

                           else
                           {
                               ExcelWs.Cells[rows, 17] = dt1.Rows[j]["ENSE"].ToString() + dt1.Rows[j]["DEPT"].ToString() + dt1.Rows[j]["PT"].ToString();
                           }



                           
                           ExcelWs.Cells[rows, 18] = dt1.Rows[j]["INTERNAL_ORDER"].ToString();
                           ExcelWs.Cells[rows, 19] = dt1.Rows[j]["PROFIT_CENTER"].ToString();
                           ExcelWs.Cells[rows, 19] = dt1.Rows[j]["PROFIT_CENTER"].ToString();
                           ExcelWs.Cells[rows, 22] = dt1.Rows[j]["REF_NO"].ToString();

                           rows = rows + 1;

                       }
                   }
               }



               catch (Exception ex)
               {
                   Show(ex.Message.ToString());
                   ExcelWs = null;
                   ExcelWb = null;
                   ExcelApp = null;
                   ExcelApp.Application.Quit();
               }

               finally
               {
                   System.CodeDom.Compiler.TempFileCollection TempFileCollection = new System.CodeDom.Compiler.TempFileCollection();
                   string country = SelectCountryCodeList.Text.ToString();
                   string filename = "";
                   string fname = "";
                   string processor1 = Session["GlobalName"].ToString();
                   processor1 = processor1.Replace('\\', '-');
                   string timeStamp = DateTime.Now.ToString("s");
                   timeStamp = timeStamp.Replace(':', '-');
                   timeStamp = timeStamp.Replace("T", "__");
                   string program_name = SelectProgramList.Text.ToString();



                   if (SelectTeamList.Text == "FC Payments")
                   {
                       filename = "C:\\APJ_RH_PaymentsFiles\\SAP_WIZARD_Files\\" + country + "_" + "PADVCQ" + "_" + "FI1" + "_" + processor1 + "_" + timeStamp + ".xlsm";

                       fname = country + "_" + "PADVCQ" + "_" + "FI1" + "_" + processor1 + "_" + timeStamp + ".xlsm";
                   }

                   else
                   {
                       filename = "C:\\APJ_RH_PaymentsFiles\\SAP_WIZARD_Files\\" + country + "_" + "PADVCQ" + "_" + program_name + "_" + "FI1" + "_" + processor1 + "_" + timeStamp + ".xlsm";
                       fname = country + "_" + "PADVCQ" + "_" + program_name + "_" + "FI1" + "_" + processor1 + "_" + timeStamp + ".xlsm";
                   }


                   if (File.Exists(filename))
                   {
                       File.Delete(filename);

                   }

                   ExcelWb.SaveAs(filename);
                   //ExcelWs.Range["L:L"].Locked = false;
                   //ExcelWs.Range["R:R"].Locked = false;
                   //ExcelWs.Range["S:S"].Locked = false;
                   ExcelWs.Range["T:T"].Locked = false;
                   ExcelWs.Range["U:U"].Locked = false;
                   ExcelWs.Protect("RebatesHigher");
                   ExcelApp.DisplayAlerts = false;
                   ExcelWb.Save();
                   ExcelWb.Close();
                   ExcelWs = null;
                   ExcelWb = null;
                   ExcelApp.Application.Quit();
                   ExcelApp.Quit();
                   ExcelApp = null;
                   string processor = Session["GlobalUserID"].ToString();


                   string Inv_dt = DateTime.Now.Date.ToString("dd-MMM-yyyy");
                   
                   //dt = rh.getData("Update PAYMENT_MASTER SET SENT_APJ_STATUS = 'C', SENT_APJ_STATUS_DATE = '" + Inv_dt + "', SENT_APJ_STATUS_CLOSED_BY = '" + processor + "' WHERE (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (SENT_APJ_STATUS_TYPE = 'FI1') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and " + Condstr + "");
                   SqlCommand cmd2 = new SqlCommand("Update PAYMENT_MASTER SET SENT_APJ_STATUS = 'C', SENT_APJ_STATUS_DATE = '" + Inv_dt + "', SENT_APJ_STATUS_CLOSED_BY = '" + processor + "' WHERE (VENDOR_ID_STATUS = 'C') AND (VENDOR_NAME_MISMATCH_STATUS = 'C') AND (WWAS_STATUS = 'C') AND (SPLIT_PAYMENT_SENT_STATUS = 'C') AND (SPLIT_PAYMENT_RECD_STATUS = 'C') AND (SENT_LOS_STATUS = 'C') AND (RECD_LOS_STATUS = 'C') AND (SUSPECTS_STATUS = 'C') AND (SENT_APJ_STATUS = 'O') AND (ON_CHAPP_STATUS = 'Y') AND (SENT_APJ_STATUS_TYPE = 'FI1') AND TRANSACTION_ID IS NOT NULL AND (ALL_STATUS = 'O') and " + Condstr + "");
                   DataTable dt2;
                   dt2 = rh.getData11(cmd2);  
                   Response.AppendHeader("Content-Disposition", "attachment; filename=" + fname);
                   Response.TransmitFile(filename);
                   Response.AppendHeader("X-Download-Options", "noopen");
                   Response.End();       
               }
           
            }
 
       }
       protected void GenerateCloseLoopFileBtn_Click(object sender, EventArgs e)
       {


           if (SelectTeamList.Text != "")
           {
               if (SelectTeamList.Text == "Select the Team Name")
               {
                   Condstr = " 1=1";
               }
               else
               {


                   Condstr = Condstr + "AND Team_Name = '" + SelectTeamList.Text + "'";
               }

           }


           if (SelectProgramList.Text != "Select the Program Name")
           {
               Condstr = Condstr + " AND Program = '" + SelectProgramList.Text + "'";
           }

           if (SelectCountryCodeList.Text != "Select the Country Code")
           {
               Condstr = Condstr + " AND COUNTRY_CODE = '" + SelectCountryCodeList.Text + "'";
           }
           if (SelectPaymentModeList.Text != "Select the Payment Mode")
           {
               Condstr = Condstr + " AND PAYMENT_MODE = '" + SelectPaymentModeList.Text + "'";
           }


           if (GenerateCloseLoopFilesList.Text == "P1 & India")
           {
               //string strQuery = "SELECT PAYOUT_ID AS [Payout ID], TRANSACTION_ID AS [Transaction ID], CONVERT(VARCHAR(10), CONVERT(datetime, TRANSACTION_ID_GEN_DATE, 1), 101) AS [Transaction ID Generated Date (MM/DD/YYYY)], PROGRAM AS [Program], COUNTRY AS [Country], FISCAL_YEAR AS [Year], QUARTER AS [Quarter], MONTH AS [Month], PARTNER_ID AS [Partner ID], PARTNER_NAME AS [Partner Name], CURR AS [ISO Currency Type], PAYOUT_DUE AS [Payout Due], VAT_PERCENTAGE - WHT_PERCENTAGE AS [Tax(%)], TOT_AMOUNT_PAYABLE AS [Total Amount Payable], APPROVING_MGR AS [Approving Manager], PAYMENT_MODE AS [Payment Mode], VENDOR_NO AS [Vendor ID], WWAS_FLAG AS [Invoice No], ECLIPSE_CODE AS [Eclipse Code], MCC_CODE AS [MCC], CREDIT_NOTE_PL AS [Credit Note PL], REMARKS AS [Remarks], ENSE AS [ENSE], DEPT AS [DEPT], SF AS [SF], PT AS [PT], PL AS [PL], SUB_PL AS [Sub-PL], ACCT AS [ACCT], LCL_SUB_ACCT AS [Local Sub A/C], IC_SUB_ACCT AS [IC Sub- A/C], CHECK_REFERENCE AS [SAP Doc No], CURR AS [Payment Currency Type], AMOUNT_AFTER_VAT AS [Payment Amount], CONVERT(VARCHAR(10), CONVERT(datetime, VALUE_DATE, 1), 101) AS [Payment Date (MM/DD/YYYY)], REMARKS_FRM_PMT_OFFICE AS [Remarks from payment office], NULL AS [Status],NULL AS [Target Partner ID], NULL AS [Target Partner English Name] FROM PAYMENT_MASTER WHERE  (RECD_APJ_CLOSE_LOOP_STATUS = 'C')    and  (UPLOADED_TO_P1_STATUS = 'O') AND (ALL_STATUS = 'O')and (SYSTEM_TYPE = 'P1') and " + Condstr + "";
               SqlCommand cmd = new SqlCommand("SELECT PAYOUT_ID AS [Payout ID], TRANSACTION_ID AS [Transaction ID], CONVERT(VARCHAR(10), CONVERT(datetime, TRANSACTION_ID_GEN_DATE, 1), 101) AS [Transaction ID Generated Date (MM/DD/YYYY)], PROGRAM AS [Program], COUNTRY AS [Country], FISCAL_YEAR AS [Year], QUARTER AS [Quarter], MONTH AS [Month], PARTNER_ID AS [Partner ID], PARTNER_NAME AS [Partner Name], CURR AS [ISO Currency Type], PAYOUT_DUE AS [Payout Due], VAT_PERCENTAGE - WHT_PERCENTAGE AS [Tax(%)], TOT_AMOUNT_PAYABLE AS [Total Amount Payable], APPROVING_MGR AS [Approving Manager], PAYMENT_MODE AS [Payment Mode], VENDOR_NO AS [Vendor ID], WWAS_FLAG AS [Invoice No], ECLIPSE_CODE AS [Eclipse Code], MCC_CODE AS [MCC], CREDIT_NOTE_PL AS [Credit Note PL], REMARKS AS [Remarks], ENSE AS [ENSE], DEPT AS [DEPT], SF AS [SF], PT AS [PT], PL AS [PL], SUB_PL AS [Sub-PL], ACCT AS [ACCT], LCL_SUB_ACCT AS [Local Sub A/C], IC_SUB_ACCT AS [IC Sub- A/C], CHECK_REFERENCE AS [SAP Doc No], CURR AS [Payment Currency Type], AMOUNT_AFTER_VAT AS [Payment Amount], CONVERT(VARCHAR(10), CONVERT(datetime, VALUE_DATE, 1), 101) AS [Payment Date (MM/DD/YYYY)], REMARKS_FRM_PMT_OFFICE AS [Remarks from payment office], NULL AS [Status],NULL AS [Target Partner ID], NULL AS [Target Partner English Name] FROM PAYMENT_MASTER WHERE  (RECD_APJ_CLOSE_LOOP_STATUS = 'C')    and  (UPLOADED_TO_P1_STATUS = 'O') AND (ALL_STATUS = 'O')and (SYSTEM_TYPE = 'P1') and " + Condstr + "");

               //DataTable dt = rh.getData(strQuery);
               DataTable dt = rh.getData11(cmd);
               Session["SSdt"] = dt;
               //string excelfilename = Server.MapPath("ExportToExcelFiles/") + Session["GlobalName"] + ".xlsx";
               string processor1 = Session["GlobalName"].ToString();
               processor1 = processor1.Replace('\\', '-');

               string country = "";
               string program_name = "";

               //country = gvSuspectStatus.Rows[0].Cells[8].Text.ToString();
               country = SelectCountryCodeList.Text.ToString();
               program_name = SelectProgramList.Text.ToString();

               string timeStamp = DateTime.Now.ToString("s");

               timeStamp = timeStamp.Replace(':', '-');
               timeStamp = timeStamp.Replace("T", "__");
               //currentWorksheet.Cells[1, 1] = timeStamp;
               //currentWorksheet.Cells[1, 2] = "No error occured";

               string filename = "";
               string fname = "";


               if (SelectTeamList.Text == "FC Payments")
               {
                   filename = "C:\\APJ_RH_PaymentsFiles\\CloseLoopFiles\\" + country + "_" + "PAYMENT_UPLOAD" + "_" + "P1 & India" + "_" + processor1 + "_" + timeStamp + ".xls";

                   fname = country + "_" + "PAYMENT_UPLOAD" + "_" + "P1 & India" + "_" + processor1 + "_" + timeStamp + ".xls";
               }

               else
               {
                   filename = "C:\\APJ_RH_PaymentsFiles\\CloseLoopFiles\\" + country + "_" + "PAYMENT_UPLOAD" + "_" + program_name + "_" + "P1 & India" + "_" + processor1 + "_" + timeStamp + ".xls";
                   fname = country + "_" + "PAYMENT_UPLOAD" + "_" + program_name + "_" + "P1 & India" + "_" + processor1 + "_" + timeStamp + ".xls";
               }

                
               if (File.Exists(filename))
               {
                   File.Delete(filename);

               }


               string imported = rh.ExportToExcel1(dt, filename);
               string processor = Session["GlobalUserID"].ToString();


               string Inv_dt = DateTime.Now.Date.ToString("dd-MMM-yyyy");

               //dt = rh.getData("Update PAYMENT_MASTER SET ALL_STATUS = 'C', ALL_STATUS_CLOSED_DATE = '" + Inv_dt + "', ALL_STATUS_CLOSED_BY = '" + processor + "', UPLOADED_TO_P1_STATUS  = 'C', UPLOADED_TO_P1_DATE = '" + Inv_dt + "', UPLOADED_TO_P1_STATUS_CLOSED_BY = '" + processor + "' WHERE  (RECD_APJ_CLOSE_LOOP_STATUS = 'C')    and  (UPLOADED_TO_P1_STATUS = 'O') AND (ALL_STATUS = 'O') and (SYSTEM_TYPE = 'P1') and " + Condstr + "");
               SqlCommand cmd1 = new SqlCommand("Update PAYMENT_MASTER SET ALL_STATUS = 'C', ALL_STATUS_CLOSED_DATE = '" + Inv_dt + "', ALL_STATUS_CLOSED_BY = '" + processor + "', UPLOADED_TO_P1_STATUS  = 'C', UPLOADED_TO_P1_DATE = '" + Inv_dt + "', UPLOADED_TO_P1_STATUS_CLOSED_BY = '" + processor + "' WHERE  (RECD_APJ_CLOSE_LOOP_STATUS = 'C')    and  (UPLOADED_TO_P1_STATUS = 'O') AND (ALL_STATUS = 'O') and (SYSTEM_TYPE = 'P1') and " + Condstr + "");
               dt = rh.getData11(cmd1); 
               Response.AppendHeader("Content-Disposition", "attachment; filename=" + fname);
               Response.TransmitFile(filename);
               Response.AppendHeader("X-Download-Options", "noopen");
               Response.End();
           }


           if (GenerateCloseLoopFilesList.Text == "MDF")
           {
               //string strQuery = "SELECT TRANSACTION_ID AS [PaymentId],PAYOUT_ID AS [Claim Id],VALUE_DATE AS [Payment Date],CHECK_REFERENCE AS [PaymentReference],REMARKS_FRM_PMT_OFFICE AS [Payment Remarks],PAYMENT_MODE AS [Payment Method],ECLIPSE_CODE AS [Eclipse Code],MCC_CODE AS [MCC],WWAS_FLAG AS [Invoice No],PAYOUT_DUE AS [Net Amount LC], NULL AS [Net Amount in USD],TOT_AMOUNT_PAYABLE AS [Gross Amount],VAT_PERCENTAGE AS [VAT %], AMOUNT_AFTER_VAT - PAYOUT_DUE AS [VAT Amount],WHT_PERCENTAGE AS [WHT(%)]FROM PAYMENT_MASTER WHERE (RECD_APJ_CLOSE_LOOP_STATUS = 'C') and (UPLOADED_TO_P1_STATUS = 'O') AND (ALL_STATUS = 'O') and (SYSTEM_TYPE = 'MDF') AND " + Condstr + "";
               SqlCommand cmd = new SqlCommand("SELECT TRANSACTION_ID AS [PaymentId],PAYOUT_ID AS [Claim Id],VALUE_DATE AS [Payment Date],CHECK_REFERENCE AS [PaymentReference],REMARKS_FRM_PMT_OFFICE AS [Payment Remarks],PAYMENT_MODE AS [Payment Method],ECLIPSE_CODE AS [Eclipse Code],MCC_CODE AS [MCC],WWAS_FLAG AS [Invoice No],PAYOUT_DUE AS [Net Amount LC], NULL AS [Net Amount in USD],TOT_AMOUNT_PAYABLE AS [Gross Amount],VAT_PERCENTAGE AS [VAT %], AMOUNT_AFTER_VAT - PAYOUT_DUE AS [VAT Amount],WHT_PERCENTAGE AS [WHT(%)]FROM PAYMENT_MASTER WHERE (RECD_APJ_CLOSE_LOOP_STATUS = 'C') and (UPLOADED_TO_P1_STATUS = 'O') AND (ALL_STATUS = 'O') and (SYSTEM_TYPE = 'MDF') AND " + Condstr + "");
 

               //DataTable dt = rh.getData(strQuery);
               DataTable dt = rh.getData11(cmd);
               Session["SSdt"] = dt;
               //string excelfilename = Server.MapPath("ExportToExcelFiles/") + Session["GlobalName"] + ".xlsx";
               string processor1 = Session["GlobalName"].ToString();
               processor1 = processor1.Replace('\\', '-');

               string country = "";
               string program_name = "";

               //country = gvSuspectStatus.Rows[0].Cells[8].Text.ToString();
               country = SelectCountryCodeList.Text.ToString();
               program_name = SelectProgramList.Text.ToString();

               string timeStamp = DateTime.Now.ToString("s");

               timeStamp = timeStamp.Replace(':', '-');
               timeStamp = timeStamp.Replace("T", "__");
               //currentWorksheet.Cells[1, 1] = timeStamp;
               //currentWorksheet.Cells[1, 2] = "No error occured";

               string filename = "";
               string fname = "";


               if (SelectTeamList.Text == "FC Payments")
               {
                   filename = "C:\\APJ_RH_PaymentsFiles\\CloseLoopFiles\\" + country + "_" + "PAYMENT_UPLOAD" + "_" + "MDF" + "_" + processor1 + "_" + timeStamp + ".xlsx";

                   fname = country + "_" + "PAYMENT_UPLOAD" + "_" + "MDF" + "_" + processor1 + "_" + timeStamp + ".xlsx";
               }

               else
               {
                   filename = "C:\\APJ_RH_PaymentsFiles\\CloseLoopFiles\\" + country + "_" + "PAYMENT_UPLOAD" + "_" + program_name + "_" + "MDF" + "_" + processor1 + "_" + timeStamp + ".xlsx";
                   fname = country + "_" + "PAYMENT_UPLOAD" + "_" + program_name + "_" + "MDF" + "_" + processor1 + "_" + timeStamp + ".xlsx";
               }


               if (File.Exists(filename))
               {
                   File.Delete(filename);

               }


               string imported = rh.ExportToExcel(dt, filename);
               string processor = Session["GlobalUserID"].ToString();


               string Inv_dt = DateTime.Now.Date.ToString("dd-MMM-yyyy");

               //dt = rh.getData("Update PAYMENT_MASTER SET ALL_STATUS = 'C', ALL_STATUS_CLOSED_DATE = '" + Inv_dt + "', ALL_STATUS_CLOSED_BY = '" + processor + "', UPLOADED_TO_P1_STATUS  = 'C', UPLOADED_TO_P1_DATE = '" + Inv_dt + "', UPLOADED_TO_P1_STATUS_CLOSED_BY = '" + processor + "' WHERE  (RECD_APJ_CLOSE_LOOP_STATUS = 'C')    and  (UPLOADED_TO_P1_STATUS = 'O') AND (ALL_STATUS = 'O') and (SYSTEM_TYPE = 'MDF') and " + Condstr + "");
               SqlCommand cmd1 = new SqlCommand("Update PAYMENT_MASTER SET ALL_STATUS = 'C', ALL_STATUS_CLOSED_DATE = '" + Inv_dt + "', ALL_STATUS_CLOSED_BY = '" + processor + "', UPLOADED_TO_P1_STATUS  = 'C', UPLOADED_TO_P1_DATE = '" + Inv_dt + "', UPLOADED_TO_P1_STATUS_CLOSED_BY = '" + processor + "' WHERE  (RECD_APJ_CLOSE_LOOP_STATUS = 'C')    and  (UPLOADED_TO_P1_STATUS = 'O') AND (ALL_STATUS = 'O') and (SYSTEM_TYPE = 'MDF') and " + Condstr + "");
               dt = rh.getData11(cmd1);  
               Response.AppendHeader("Content-Disposition", "attachment; filename=" + fname);
               Response.TransmitFile(filename);
               Response.AppendHeader("X-Download-Options", "noopen");
               Response.End();
           }

       }
        protected void ExporttoExcelBtn_Click(object sender, EventArgs e)
        {
            if (SelectStatusList.Text == "Suspect Status")
            {

                DataTable dt = ((DataTable)Session["PPdt"]);
                string excelfilename = Server.MapPath("ExportToExcelFiles/") + Session["GlobalName"] + ".xlsx";
                string excelfname = Session["GlobalName"] + ".xlsx";
                if (File.Exists(excelfilename))
                {
                    File.Delete(excelfilename);

                }
                string imported = rh.ExportToExcel(dt, excelfilename);
                Response.AppendHeader("Content-Disposition", "attachment; filename=" + excelfname);
                //Response.ContentType = ("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
                Response.TransmitFile(excelfilename);
                Response.AppendHeader("X-Download-Options", "noopen");
                Response.End();
                
            }

            else if (SelectStatusList.Text == "To be Sent To C Ops - Split Payments")
            {
                DataTable dt = ((DataTable)Session["TSPdt"]);
                string excelfilename = Server.MapPath("ExportToExcelFiles/") + Session["GlobalName"] + ".xlsx";
                string excelfname = Session["GlobalName"] + ".xlsx";
                if (File.Exists(excelfilename))
                {
                    File.Delete(excelfilename);

                }
                string imported = rh.ExportToExcel(dt, excelfilename);
                Response.AppendHeader("Content-Disposition", "attachment; filename=" + excelfname);
                Response.TransmitFile(excelfilename);
                Response.AppendHeader("X-Download-Options", "noopen");
                Response.End();
            }

            else if (SelectStatusList.Text == "Waiting For C Ops - Split Payments")
            {
                DataTable dt = ((DataTable)Session["WSPdt"]);     
                string excelfilename = Server.MapPath("ExportToExcelFiles/") + Session["GlobalName"] + ".xlsx";
                string excelfname = Session["GlobalName"] + ".xlsx";
                if (File.Exists(excelfilename))
                {
                    File.Delete(excelfilename);

                }
                string imported = rh.ExportToExcel(dt, excelfilename);
                Response.AppendHeader("Content-Disposition", "attachment; filename=" + excelfname);
                Response.TransmitFile(excelfilename);
                Response.AppendHeader("X-Download-Options", "noopen");
                Response.End();
            }

            else if (SelectStatusList.Text == "To Be Sent To Local Outsource - Invoice Collection")
            {
                DataTable dt = ((DataTable)Session["TICdt"]); 
                string excelfilename = Server.MapPath("ExportToExcelFiles/") + Session["GlobalName"] + ".xlsx";
                string excelfname = Session["GlobalName"] + ".xlsx";
                if (File.Exists(excelfilename))
                {
                    File.Delete(excelfilename);

                }
                string imported = rh.ExportToExcel(dt, excelfilename);
                Response.AppendHeader("Content-Disposition", "attachment; filename=" + excelfname);
                Response.TransmitFile(excelfilename);
                Response.AppendHeader("X-Download-Options", "noopen");
                Response.End();
            }

            else if (SelectStatusList.Text == "Waiting For Local Outsource  - Invoice Collection")
            {
                DataTable dt = ((DataTable)Session["WICdt"]);
                string excelfilename = Server.MapPath("ExportToExcelFiles/") + Session["GlobalName"] + ".xlsx";
                string excelfname = Session["GlobalName"] + ".xlsx";
                if (File.Exists(excelfilename))
                {
                    File.Delete(excelfilename);

                }
                string imported = rh.ExportToExcel(dt, excelfilename);
                Response.AppendHeader("Content-Disposition", "attachment; filename=" + excelfname);
                Response.TransmitFile(excelfilename);
                Response.AppendHeader("X-Download-Options", "noopen");
                Response.End();
            }
            else if (SelectStatusList.Text == "To Be Uploaded To Platform One")
            {
                DataTable dt = ((DataTable)Session["TP1dt"]);
                string excelfilename = Server.MapPath("ExportToExcelFiles/") + Session["GlobalName"] + ".xlsx";
                string excelfname = Session["GlobalName"] + ".xlsx";
                if (File.Exists(excelfilename))
                {
                    File.Delete(excelfilename);

                }
                string imported = rh.ExportToExcel(dt, excelfilename);
                Response.AppendHeader("Content-Disposition", "attachment; filename=" + excelfname);
                Response.TransmitFile(excelfilename);
                Response.AppendHeader("X-Download-Options", "noopen");
                Response.End();
            
            }
            else if (SelectStatusList.Text == "Waiting For Transaction Id")
            {
                DataTable dt = ((DataTable)Session["WTIDdt"]);
                string excelfilename = Server.MapPath("ExportToExcelFiles/") + Session["GlobalName"] + ".xlsx";
                string excelfname = Session["GlobalName"] + ".xlsx";
                if (File.Exists(excelfilename))
                {
                    File.Delete(excelfilename);

                }
                string imported = rh.ExportToExcel(dt, excelfilename);
                Response.AppendHeader("Content-Disposition", "attachment; filename=" + excelfname);
                Response.TransmitFile(excelfilename);
                Response.AppendHeader("X-Download-Options", "noopen");
                Response.End();
            
            
            }

            else if (SelectStatusList.Text == "WWAS Approval")
            {
                DataTable dt = ((DataTable)Session["WWASDdt1"]);
                string excelfilename = Server.MapPath("ExportToExcelFiles/") + Session["GlobalName"] + ".xlsx";
                string excelfname = Session["GlobalName"] + ".xlsx";
                if (File.Exists(excelfilename))
                {
                    File.Delete(excelfilename);

                }
                string imported = rh.ExportToExcel(dt, excelfilename);
                Response.AppendHeader("Content-Disposition", "attachment; filename=" + excelfname);
                Response.TransmitFile(excelfilename);
                Response.AppendHeader("X-Download-Options", "noopen");
                Response.End();


            }
            else if (SelectStatusList.Text == "Vendor Id Status")
            {
                DataTable dt = ((DataTable)Session["VISDdt"]);
                string excelfilename = Server.MapPath("ExportToExcelFiles/") + Session["GlobalName"] + ".xlsx";
                string excelfname = Session["GlobalName"] + ".xlsx";
                if (File.Exists(excelfilename))
                {
                    File.Delete(excelfilename);

                }
                string imported = rh.ExportToExcel(dt, excelfilename);
                Response.AppendHeader("Content-Disposition", "attachment; filename=" + excelfname);
                Response.TransmitFile(excelfilename);
                Response.AppendHeader("X-Download-Options", "noopen");
                Response.End();


            }
            else if (SelectStatusList.Text == "Vendor Name Mismatch Status")
            {
                DataTable dt = ((DataTable)Session["VIMSDdt"]);
                string excelfilename = Server.MapPath("ExportToExcelFiles/") + Session["GlobalName"] + ".xlsx";
                string excelfname = Session["GlobalName"] + ".xlsx";
                if (File.Exists(excelfilename))
                {
                    File.Delete(excelfilename);

                }
                string imported = rh.ExportToExcel(dt, excelfilename);
                Response.AppendHeader("Content-Disposition", "attachment; filename=" + excelfname);
                Response.TransmitFile(excelfilename);
                Response.AppendHeader("X-Download-Options", "noopen");
                Response.End();


            }
               else if (SelectStatusList.Text == "To Be Sent To APJ Team")
                 {

                DataTable dt = ((DataTable)Session["SAPJDdt"]);
                string excelfilename = Server.MapPath("ExportToExcelFiles/") + Session["GlobalName"] + ".xlsx";
                string excelfname = Session["GlobalName"] + ".xlsx";
                if (File.Exists(excelfilename))
                {
                    File.Delete(excelfilename);

                }
                string imported = rh.ExportToExcel(dt, excelfilename);
                Response.AppendHeader("Content-Disposition", "attachment; filename=" + excelfname);
                Response.TransmitFile(excelfilename);
                Response.AppendHeader("X-Download-Options", "noopen");
                Response.End();


            }
           else if (SelectStatusList.Text == "Waiting For APJ Team")
            {

                DataTable dt = ((DataTable)Session["WAPJDdt"]);
                string excelfilename = Server.MapPath("ExportToExcelFiles/") + Session["GlobalName"] + ".xlsx";
                string excelfname = Session["GlobalName"] + ".xlsx";
                if (File.Exists(excelfilename))
                {
                    File.Delete(excelfilename);

                }
                string imported = rh.ExportToExcel(dt, excelfilename);
                Response.AppendHeader("Content-Disposition", "attachment; filename=" + excelfname);
                Response.TransmitFile(excelfilename);
                Response.AppendHeader("X-Download-Options", "noopen");
                Response.End();


            }

            else if (SelectStatusList.Text == "Reply Recd From APJ Team - Close Loop")
            {

                DataTable dt = ((DataTable)Session["RRAPJDdt"]);
                string excelfilename = Server.MapPath("ExportToExcelFiles/") + Session["GlobalName"] + ".xlsx";
                string excelfname = Session["GlobalName"] + ".xlsx";
                if (File.Exists(excelfilename))
                {
                    File.Delete(excelfilename);

                }
                string imported = rh.ExportToExcel(dt, excelfilename);
                Response.AppendHeader("Content-Disposition", "attachment; filename=" + excelfname);
                Response.TransmitFile(excelfilename);
                Response.AppendHeader("X-Download-Options", "noopen");
                Response.End();


            }
            else if (SelectStatusList.Text == "All Status - Pending")
            {

                DataTable dt = ((DataTable)Session["ASPdt"]);
                string excelfilename = Server.MapPath("ExportToExcelFiles/") + Session["GlobalName"] + ".xlsx";
               
               
                 
               
                //Show(excelfilename);

                string excelfname = Session["GlobalName"] + ".xlsx";
                if (File.Exists(excelfilename))
                {
                    File.Delete(excelfilename);

                }

                string imported = rh.ExportToExcel(dt, excelfilename);
                Response.AppendHeader("Content-Disposition", "attachment; filename=" + excelfname);
                Response.TransmitFile(excelfilename);
                Response.AppendHeader("X-Download-Options", "noopen");
                Response.End();


            }

            else if (SelectStatusList.Text == "Hold Payments")
            {

                DataTable dt = ((DataTable)Session["HPdt"]);
                string excelfilename = Server.MapPath("ExportToExcelFiles/") + Session["GlobalName"] + ".xlsx";
                string excelfname = Session["GlobalName"] + ".xlsx";
                if (File.Exists(excelfilename))
                {
                    File.Delete(excelfilename);

                }
                string imported = rh.ExportToExcel(dt, excelfilename);
                Response.AppendHeader("Content-Disposition", "attachment; filename=" + excelfname);
                Response.TransmitFile(excelfilename);
                Response.AppendHeader("X-Download-Options", "noopen");
                Response.End();


            }

             else if (SelectStatusList.Text == "Closed")
                 {

                DataTable dt = ((DataTable)Session["Cdt"]);
                string excelfilename = Server.MapPath("ExportToExcelFiles/") + Session["GlobalName"] + ".xlsx";
                string excelfname = Session["GlobalName"] + ".xlsx";
                if (File.Exists(excelfilename))
                {
                    File.Delete(excelfilename);

                }
                string imported = rh.ExportToExcel(dt, excelfilename);
                Response.AppendHeader("Content-Disposition", "attachment; filename=" + excelfname);
                Response.TransmitFile(excelfilename);
                Response.AppendHeader("X-Download-Options", "noopen");
                Response.End();


            }
            else if (SelectStatusList.Text == "Threshold Approval Status")
            {

                DataTable dt = ((DataTable)Session["TAS1"]);
                string excelfilename = Server.MapPath("ExportToExcelFiles/") + Session["GlobalName"] + ".xlsx";
                string excelfname = Session["GlobalName"] + ".xlsx";
                if (File.Exists(excelfilename))
                {
                    File.Delete(excelfilename);

                }
                string imported = rh.ExportToExcel(dt, excelfilename);
                Response.AppendHeader("Content-Disposition", "attachment; filename=" + excelfname);
                Response.TransmitFile(excelfilename);
                Response.AppendHeader("X-Download-Options", "noopen");
                Response.End();


            }

        }
       
    }


}